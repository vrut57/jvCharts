(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var html = "<!--Top title bar of edit popup-->\n<div class='title'>\n    <div class=\"jv-inline\">\n        <b>Edit Options<div id=\"edit-option-element\" class=\"jv-inline\" style=\"visibility: hidden;\"></div>:</b>\n    </div>\n\n    <div id='exitEditMode' class='jv-pull-right jv-pointer'>\n        <i class='fa fa-times'></i>\n    </div>\n</div>\n\n<!--Line dividing top bar with form options below-->\n<hr style='margin:3px 0 3px 0;'/>\n\n<!--Form Options-->\n<div id=\"form'+chart.config.name+'\">\n\n    <!--Number formatting options-->\n    <div class=\"jv-full-width editable-num-format\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Number Format:\n            <select id=\"editable-num-format\">\n                <option value=\"\">--Select Option--</option>\n                <option value=\"currency\">Currency</option>\n                <option value=\"fixedCurrency\">Fixed Point Currency</option>\n                <option value=\"percent\">Percent</option>\n                <option value=\"millions\">Millions</option>\n                <option value=\"commas\">Commas</option>\n                <option value=\"none\">None</option>\n            </select>\n        </div>\n        <br/>\n    </div>\n\n    <!--Text formatting options-->\n    <div class=\"editable-text-size-buttons jv-center topBarOption increasefont jv-pointer\" style=\"display: none;\">\n        <button id='decreaseFontSize' title='Decrease the font size' class='topbar-button font jv-button jv-pointer'><i class='fa fa-font'></i><i class='fa fa-long-arrow-down'></i></button>\n        <button id='increaseFontSize' title='Increase the font size' class='topbar-button font jv-button jv-pointer'><i class='fa fa-font'></i><i class='fa fa-long-arrow-up'></i></button>\n    </div>\n\n\n    <div class=\"jv-full-width editable-text-color\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Text Color:\n            <input type=\"color\" id=\"editable-text-color\" value=\"#000000\">\n        </div>\n        <br/>\n    </div>\n\n    <div class=\"jv-full-width editable-text-size\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Text Size:\n            <input type=\"number\" id=\"editable-text-size\" min=\"0\" max=\"30\" value=\"12\">\n        </div>\n        <br/>\n    </div>\n\n    <div class=\"jv-full-width editable-content\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Text:\n            <input type=\"text\" id=\"editable-content\" placeholder=\"Enter text here\">\n        </div>\n        <br/>\n    </div>\n\n    <!--bar chart formatting-->\n    <div class=\"jv-full-width editable-bar\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Bar Color:\n            <input type=\"color\" id=\"editable-bar\" value=\"#aaaaaa\">\n        </div>\n        <br/>\n    </div>\n\n    <!--pie chart formatting-->\n    <div class=\"jv-full-width editable-pie\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Pie Slice Color:\n            <input type=\"color\" id=\"editable-pie\" value=\"#aaaaaa\">\n        </div>\n        <br/>\n    </div>\n\n    <!--scatter plot formatting-->\n    <div class=\"jv-full-width editable-scatter\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Scatter Circle Color:\n            <input type=\"color\" id=\"editable-scatter\" value=\"#aaaaaa\">\n        </div>\n        <br/>\n    </div>\n\n    <!--bubble chart formatting-->\n    <div class=\"jv-full-width editable-bubble\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Bubble Color:\n            <input type=\"color\" id=\"editable-bubble\" value=\"#aaaaaa\">\n        </div>\n        <br/>\n    </div>\n\n    <!--box and whisker plot formatting-->\n    <div class=\"jv-full-width editable-box\" style=\"display: none;\">\n        <div class=\"jv-edit-mode-input\">Box Color:\n            <input type=\"color\" id=\"editable-box\" value=\"#aaaaaa\">\n        </div>\n        <br/>\n    </div>\n\n    <!--Submit button-->\n    <div class=\"editable-default-and-apply\">\n        <button id=\"submitEditModeDefault\" class=\"jv-button jv-pull-left\">Default</button>\n        <button id=\"submitEditMode\" class=\"jv-button jv-button-green jv-pull-right\">Apply</button>\n    </div>\n</div>";

module.exports = html;

},{}],2:[function(require,module,exports){
'use strict';
//add all required files

require('./jvVars.js');
require('./jvEvents.js');
require('./jvTip.js');
require('./jvBrush.js');
require('./jvComment.js');
require('./jvEdit.js');
require('./visuals/jvBar.js');
require('./visuals/jvPie.js');
require('./visuals/jvLine.js');
require('./visuals/jvScatter.js');
require('./visuals/jvArea.js');
require('./visuals/jvGantt.js');
require('./visuals/jvHeatmap.js');
require('./visuals/jvPack.js');
require('./visuals/jvRadial.js');
require('./visuals/jvSankey.js');
require('./visuals/jvSingleAxis.js');
require('./visuals/jvSunburst.js');
require('./visuals/jvTreemap.js');
require('./visuals/jvWordCloud.js');
require('./visuals/jvBoxWhisker.js');
require('./visuals/jvBubble.js');
require('./visuals/jvClustergram.js');

//attach jv charts objects to the window
var jvCharts = require('./jvCharts.js');
var jvBrush = require('./jvBrush.js');
var jvComment = require('./jvComment.js');
var jvEdit = require('./jvEdit.js');
var jvSelect = require('./jvSelect');
// var jvDoodle = require('./jvDoodle.js');

//Comment out to remove from window object - if you are not using jvCharts as a minified file
window.jvCharts = jvCharts;
window.jvBrush = jvBrush;
window.jvComment = jvComment;
window.jvEdit = jvEdit;
window.jvSelect = jvSelect;

//add polyfill for Object.assign() if unsupported
if (typeof Object.assign !== 'function') {
    Object.assign = function (target) {
        //.length of function is 2
        'use strict';

        if (target == null) {
            //TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
        }
        var to = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource != null) {
                //Skip over if undefined or null
                for (var nextKey in nextSource) {
                    //Avoid bugs when hasOwnProperty is shadowed
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    };
}

},{"./jvBrush.js":3,"./jvCharts.js":4,"./jvComment.js":5,"./jvEdit.js":6,"./jvEvents.js":7,"./jvSelect":8,"./jvTip.js":9,"./jvVars.js":10,"./visuals/jvArea.js":11,"./visuals/jvBar.js":12,"./visuals/jvBoxWhisker.js":13,"./visuals/jvBubble.js":14,"./visuals/jvClustergram.js":15,"./visuals/jvGantt.js":16,"./visuals/jvHeatmap.js":17,"./visuals/jvLine.js":18,"./visuals/jvPack.js":19,"./visuals/jvPie.js":20,"./visuals/jvRadial.js":21,"./visuals/jvSankey.js":22,"./visuals/jvScatter.js":23,"./visuals/jvSingleAxis.js":24,"./visuals/jvSunburst.js":25,"./visuals/jvTreemap.js":26,"./visuals/jvWordCloud.js":27}],3:[function(require,module,exports){
'use strict';
/***  jvBrush ***/
'use-strict';

/**
* @name jvBrush
* @desc Constructor for JV Brush - creates brush mode for a jv visualization and executes a callback for the visual to be filtered
* @param {object} configObj - constructor object containing the jvChart and other options
* @return {undefined} - no return
*/

function jvBrush(configObj) {
    var brushObj = this;
    brushObj.chartDiv = configObj.chartDiv;
    brushObj.jvChart = configObj.jvChart;
    brushObj.onBrushCallback = configObj.onBrushCallback;
}

jvBrush.prototype.removeBrush = removeBrush;
jvBrush.prototype.startBrush = startBrush;

/**
* @name removeBrush
* @desc removes the brush area from the visual
* @return {undefined} - no return
*/
function removeBrush() {
    var brushObj = this;
    brushObj.jvChart.chartDiv.selectAll('.brusharea').remove();
}

/**
* @name startBrush
* @desc removes the brush area from the visual
* @param {object} event - optional event to start brush immediately with a new mousedown
* @return {undefined} - no return
*/
function startBrush() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var brushObj = this,
        height = brushObj.jvChart.config.container.height,
        width = brushObj.jvChart.config.container.width,
        svg = brushObj.jvChart.svg;

    if (brushObj.jvChart.config.type === 'singleaxis') {
        brushObj.brushType = 'x';
        svg.append('g').attr('class', 'brusharea').style('height', height + 'px').style('width', width + 'px').call(d3.brushX().extent([[0, 0], [width, height]]).on('end', brushEnd.bind(brushObj)));
    } else if (brushObj.jvChart.config.type === 'clustergram') {
        brushObj.brushType = 'xy';
        svg.append('g').attr('class', 'brusharea').attr("transform", "translate(" + brushObj.jvChart._vars.leftTreeWidth + "," + brushObj.jvChart._vars.topTreeHeight + ")").style('height', height + 'px').style('width', width + 'px').call(d3.brush().extent([[0, 0], [width, height]]).on('end', brushEnd.bind(brushObj)));
    } else {
        brushObj.brushType = 'xy';
        svg.append('g').attr('class', 'brusharea').style('height', height + 'px').style('width', width + 'px').call(d3.brush().extent([[0, 0], [width, height]]).on('end', brushEnd.bind(brushObj)));
    }

    if (event) {
        //dispatch mousedown to start a brush at the event coordinates
        var brushElement = svg.select('.brusharea').node(),
            newEvent = new Event('mousedown');
        newEvent.pageX = event.pageX;
        newEvent.clientX = event.clientX;
        newEvent.pageY = event.pageY;
        newEvent.clientY = event.clientY;
        newEvent.view = event.view;
        brushElement.__data__ = { type: 'overlay' };
        brushElement.dispatchEvent(newEvent);
    }
}

/**
* @name brushEnd
* @desc called at the end of the user brushing which calls the onBrush callback
* @return {undefined} - no return
*/
function brushEnd() {
    var brushObj = this,
        xScale = brushObj.jvChart.currentData.xAxisScale,
        yScale = brushObj.jvChart.currentData.yAxisScale,
        filteredXAxisLabels = [],
        filteredYAxisLabels = [],
        shouldReset = false,
        e = d3.event.selection,
        returnObj,
        filteredLabels = [],
        filteredConcepts = {},
        index,
        filterCol,
        filteredLabelsX,
        filteredLabelsY;

    if (e) {
        if (brushObj.brushType === 'xy') {
            if (xScale && typeof xScale.invert !== 'function') {
                //means that the scale is ordinal and not linear
                returnObj = calculateBrushAreaOrdinal(e[0][0], e[1][0], xScale);
                filteredXAxisLabels = returnObj.filteredAxisLabels;
                shouldReset = returnObj.shouldReset;
            } else if (xScale) {
                //calculate labels for linear scale
                returnObj = calculateBrushAreaLinear(e[0][0], e[1][0], xScale, brushObj.jvChart.currentData, brushObj.jvChart.config.type, 'x');
                filteredXAxisLabels = returnObj.filteredAxisLabels;
                shouldReset = returnObj.shouldReset;
            }

            if (yScale && typeof yScale.invert !== 'function') {
                //means that the scale is oridnal and not linear
                returnObj = calculateBrushAreaOrdinal(e[0][1], e[1][1], yScale);
                filteredYAxisLabels = returnObj.filteredAxisLabels;
                if (returnObj.shouldReset) {
                    shouldReset = true;
                }
            } else if (yScale) {
                //calculate labels for linear scale
                returnObj = calculateBrushAreaLinear(e[0][1], e[1][1], yScale, brushObj.jvChart.currentData, brushObj.jvChart.config.type, 'y');
                filteredYAxisLabels = returnObj.filteredAxisLabels;
                if (returnObj.shouldReset) {
                    shouldReset = true;
                }
            } else if (brushObj.jvChart.config.type === 'heatmap') {
                returnObj = calculateHeatmapBrush(e, brushObj.jvChart.currentData, brushObj.jvChart);
                filteredLabelsX = returnObj.filteredXAxisLabels;
                filteredLabelsY = returnObj.filteredYAxisLabels;
                if (returnObj.shouldReset) {
                    shouldReset = true;
                }
            } else if (brushObj.jvChart.config.type === 'clustergram') {
                returnObj = calculateClustergramBrush(e, brushObj.jvChart.currentData, brushObj.jvChart);
                filteredLabelsX = returnObj.filteredXAxisLabels;
                filteredLabelsY = returnObj.filteredYAxisLabels;
                if (returnObj.shouldReset) {
                    shouldReset = true;
                }
            }
        } else if (brushObj.brushType === 'x') {
            returnObj = calculateBrushAreaLinear(e[0], e[1], xScale, brushObj.jvChart.currentData, brushObj.jvChart.config.type, 'x');
            filteredXAxisLabels = returnObj.filteredAxisLabels;
            if (returnObj.shouldReset) {
                shouldReset = true;
            }
        }
    } else {
        shouldReset = true;
    }

    if (filteredXAxisLabels.length > 0 && filteredYAxisLabels.length > 0) {
        //merge axisLabels
        for (var j = 0; j < filteredXAxisLabels.length; j++) {
            index = filteredYAxisLabels.indexOf(filteredXAxisLabels[j]);
            if (index > -1) {
                filteredLabels.push(filteredXAxisLabels[j]);
            }
        }
    } else if (filteredXAxisLabels.length > 0) {
        filteredLabels = filteredXAxisLabels;
    } else if (filteredYAxisLabels.length > 0) {
        filteredLabels = filteredYAxisLabels;
    }

    var flag = true;

    if (brushObj.jvChart.config.type === 'heatmap') {
        if (!shouldReset) {
            var filterColX = brushObj.jvChart.currentData.dataTable.x,
                filterColY = brushObj.jvChart.currentData.dataTable.y;
            if (filteredLabelsX.length > 0) {
                filteredConcepts[filterColX] = filteredLabelsX;
            }
            if (filteredLabelsY.length > 0) {
                filteredConcepts[filterColY] = filteredLabelsY;
            }
        }
    } else if (brushObj.jvChart.config.type === 'clustergram') {
        if (!shouldReset) {
            var xLength = Object.keys(filteredLabelsX).length;
            for (var i = 0; i < xLength; i++) {
                var _filterColX = brushObj.jvChart.currentData.dataTable['x_category ' + (xLength - i)];
                filteredConcepts[_filterColX] = filteredLabelsX[i];
            }
            var yLength = Object.keys(filteredLabelsY).length;
            for (var _i = 0; _i < yLength; _i++) {
                var _filterColY = brushObj.jvChart.currentData.dataTable['y_category ' + (yLength - _i)];
                filteredConcepts[_filterColY] = filteredLabelsY[_i];
            }
            // let filterColX = brushObj.jvChart.currentData.dataTable['x_category 2'],
            //     filterColY = brushObj.jvChart.currentData.dataTable['y_category 2'];
            // if (filteredLabelsX.length > 0) {
            //     filteredConcepts[filterColX] = filteredLabelsX;
            // }
            // if (filteredLabelsY.length > 0) {
            //     filteredConcepts[filterColY] = filteredLabelsY;
            // }
        }
        flag = false;
    } else {
        if (brushObj.jvChart.config.type === 'gantt') {
            filterCol = brushObj.jvChart.currentData.dataTable.group;
        } else {
            filterCol = brushObj.jvChart.currentData.dataTable.label;
        }
        filteredConcepts[filterCol] = filteredLabels;
    }

    //calls back to update data with brushed data
    brushObj.onBrushCallback({
        data: filteredConcepts,
        reset: shouldReset,
        clean: flag
    });
    brushObj.removeBrush();
}

/**
* @name calculateBrushAreaOrdinal
* @desc calculates the ordinal values that are in the brushed area
* @param {number} mousePosMin - lower bound mouse position
* @param {number} mousePosMax - upper bound mouse position
* @param {object} scale - d3 axis scale
* @return {Object} - object of filtered values
*/
function calculateBrushAreaOrdinal(mousePosMin, mousePosMax, scale) {
    var domain = scale.domain(),
        padding = scale.padding(),
        step = scale.step(),
        minIndex = void 0,
        maxIndex = void 0,
        paddingDistance = padding * step / 2,
        filteredAxisLabels = void 0;

    //determine min index
    if (mousePosMin % step > step - paddingDistance) {
        //don't include on min side
        minIndex = Math.floor(mousePosMin / step) + 1;
    } else {
        //include on min side
        minIndex = Math.floor(mousePosMin / step);
    }

    //determine max index
    if (mousePosMax % step < paddingDistance) {
        //don't include on max side
        maxIndex = Math.floor(mousePosMax / step) - 1;
    } else {
        //include on max side
        maxIndex = Math.floor(mousePosMax / step);
        if (maxIndex === domain.length) {
            maxIndex -= 1;
        }
    }
    filteredAxisLabels = domain.slice(minIndex, maxIndex + 1);
    return { filteredAxisLabels: filteredAxisLabels, shouldReset: filteredAxisLabels.length === 0 };
}

/**
* @name calculateBrushAreaLinear
* @desc calculates the linear values that are in the brushed area
* @param {number} mousePosMin - lower bound mouse position
* @param {number} mousePosMax - upper bound mouse position
* @param {object} scale - d3 axis scale
* @param {object} data - chartData
* @param {string} type - visual type
* @param {string} axis - x / y / z
* @return {Object} - object of filtered values
*/
function calculateBrushAreaLinear(mousePosMin, mousePosMax, scale, data, type, axis) {
    var filteredAxisLabels = [],
        min = void 0,
        max = void 0,
        axisLabel = void 0;

    //switch min and max if scale is y due to svg drawing (y axis increases up the screen while mousePos decreases)
    if (axis === 'y') {
        max = scale.invert(mousePosMin);
        min = scale.invert(mousePosMax);
    } else {
        min = scale.invert(mousePosMin);
        max = scale.invert(mousePosMax);
    }

    if (type === 'bar') {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = data.legendData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                axisLabel = _step.value;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = data.chartData[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var dataElement = _step2.value;

                        if (dataElement[axisLabel] >= min) {
                            filteredAxisLabels.push(dataElement[data.dataTable.label]);
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    } else if (type === 'gantt') {
        max = new Date(max);
        min = new Date(min);
        for (var i = 0; i < data.legendData.length; i++) {
            var count = i + 1,
                startDate = void 0,
                endDate = void 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = data.chartData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _dataElement = _step3.value;

                    startDate = new Date(_dataElement[data.dataTable['start ' + count]]);
                    endDate = new Date(_dataElement[data.dataTable['end ' + count]]);
                    if (startDate <= max && startDate >= min || endDate <= max && endDate >= min || startDate <= min && endDate >= max) {
                        filteredAxisLabels.push(_dataElement[data.dataTable.group]);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    } else if (type === 'line' || type === 'area' || type === 'singleaxis') {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = data.legendData[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                axisLabel = _step4.value;
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = data.chartData[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var _dataElement2 = _step5.value;

                        if (_dataElement2[axisLabel] <= max && _dataElement2[axisLabel] >= min) {
                            filteredAxisLabels.push(_dataElement2[data.dataTable.label]);
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }
    } else if (type === 'scatterplot') {
        axisLabel = data.dataTable[axis];
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
            for (var _iterator6 = data.chartData[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var _dataElement3 = _step6.value;

                if (_dataElement3[axisLabel] <= max && _dataElement3[axisLabel] >= min) {
                    filteredAxisLabels.push(_dataElement3[data.dataTable.label]);
                }
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                    _iterator6.return();
                }
            } finally {
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }
    } else if (type === 'heatmap') {
        axisLabel = data.dataTable[axis];
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
            for (var _iterator7 = data.chartData[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var _dataElement4 = _step7.value;

                if (_dataElement4[axisLabel] <= max && _dataElement4[axisLabel] >= min) {
                    filteredAxisLabels.push(_dataElement4[data.dataTable.label]);
                }
            }
        } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                }
            } finally {
                if (_didIteratorError7) {
                    throw _iteratorError7;
                }
            }
        }
    }

    return { filteredAxisLabels: filteredAxisLabels, shouldReset: filteredAxisLabels.length === 0 };
}

/**
* @name calculateHeatmapBrush
* @desc calculates values inside of brushed area of a heatmap
* @param {array} e - mouse extent for location of brushed area
* @param {array} data - chart data
* @param {array} chart - jvChart
* @return {object} - filtered data
*/
function calculateHeatmapBrush(e, data, chart) {
    var mouseXmin = e[0][0],
        mouseYmin = e[0][1],
        mouseXmax = e[1][0],
        mouseYmax = e[1][1],
        filteredXAxisLabels = [],
        filteredYAxisLabels = [],
        reset = true,
        xBucketMax = Math.floor(mouseXmax / chart._vars.heatGridSize) + 1,
        yBucketMax = Math.floor(mouseYmax / chart._vars.heatGridSize) + 1,
        xBucketMin = Math.floor(mouseXmin / chart._vars.heatGridSize),
        yBucketMin = Math.floor(mouseYmin / chart._vars.heatGridSize);

    for (var i = 0; i < xBucketMax; i++) {
        if (i >= xBucketMin) {
            filteredXAxisLabels.push(data.xAxisData.values[i]);
            reset = false;
        }
    }
    for (var _i2 = 0; _i2 < yBucketMax; _i2++) {
        if (_i2 >= yBucketMin) {
            filteredYAxisLabels.push(data.yAxisData.values[_i2]);
            reset = false;
        }
    }

    //Might need when new PKQL pixel... comes out
    //for (var i = 0; i < data.chartData.length; i++) {
    //var d = data.chartData[i];
    //if(filteredXAxisLabels.includes(d[data.dataTable.x]) && filteredYAxisLabels.includes(d[data.dataTable.y])) {
    //filteredDataX.push(d[data.dataTable.x]);
    //filteredDataY.push(d[data.dataTable.y]);
    //}
    //}

    return { filteredXAxisLabels: filteredXAxisLabels, filteredYAxisLabels: filteredYAxisLabels, shouldReset: reset };
}

/**
* @name calculateClustergramBrush
* @desc calculates values inside of brushed area of a clustergram
* @param {array} e - mouse extent for location of brushed area
* @param {array} data - chart data
* @param {array} chart - jvChart
* @return {object} - filtered data
*/
function calculateClustergramBrush(e, data, chart) {
    var mouseXmin = e[0][0],
        mouseYmin = e[0][1],
        mouseXmax = e[1][0],
        mouseYmax = e[1][1],
        filteredXAxisLabels = [],
        filteredYAxisLabels = [],
        reset = true,
        xBucketMax = Math.floor(mouseXmax / chart._vars.clustergramGridWidth) + 1,
        yBucketMax = Math.floor(mouseYmax / chart._vars.clustergramGridHeight) + 1,
        xBucketMin = Math.floor(mouseXmin / chart._vars.clustergramGridWidth),
        yBucketMin = Math.floor(mouseYmin / chart._vars.clustergramGridHeight);

    for (var i = 0; i < xBucketMax; i++) {
        if (i >= xBucketMin) {
            filteredXAxisLabels.push(data.xAxisData[i]);
            reset = false;
        }
    }
    for (var _i3 = 0; _i3 < yBucketMax; _i3++) {
        if (_i3 >= yBucketMin) {
            filteredYAxisLabels.push(data.yAxisData[_i3]);
            reset = false;
        }
    }

    //X Axis
    //Dynamically create arrays for each level of the hierarchy
    var xLevels = {};
    if (filteredXAxisLabels[0]) {
        var parentCountX = (filteredXAxisLabels[0].match(/\./g) || []).length;
        for (var _i4 = 0; _i4 < parentCountX + 1; _i4++) {
            xLevels[_i4] = [];
        }

        //Populate the hierarchy arrays with the labels of that respective hierarchy
        for (var _i5 = 0; _i5 < filteredXAxisLabels.length; _i5++) {
            if (filteredXAxisLabels[_i5]) {
                var xFields = filteredXAxisLabels[_i5].split(".");
                for (var k = 0; k < xFields.length; k++) {
                    if (xLevels[k].indexOf(xFields[k]) === -1) {
                        xLevels[k].push(xFields[k]);
                    }
                }
            }
        }
    }

    //Y Axis
    //Dynamically create arrays for each level of the hierarchy
    var yLevels = {};
    if (filteredYAxisLabels[0]) {
        var parentCountY = (filteredYAxisLabels[0].match(/\./g) || []).length;
        for (var _i6 = 0; _i6 < parentCountY + 1; _i6++) {
            yLevels[_i6] = [];
        }

        //Populate the hierarchy arrays with the labels of that respective hierarchy
        for (var _i7 = 0; _i7 < filteredYAxisLabels.length; _i7++) {
            if (filteredYAxisLabels[_i7]) {
                var yFields = filteredYAxisLabels[_i7].split(".");
                for (var _k = 0; _k < yFields.length; _k++) {
                    if (yLevels[_k].indexOf(yFields[_k]) === -1) {
                        yLevels[_k].push(yFields[_k]);
                    }
                }
            }
        }
    }

    return { filteredXAxisLabels: xLevels, filteredYAxisLabels: yLevels, shouldReset: reset };
}

module.exports = jvBrush;

},{}],4:[function(require,module,exports){
'use strict';
/***  jvCharts ***/

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var jvTip = require('./jvTip.js');

/**Create a jvCharts object
 * @constructor
 * @param {Object} configObj - Configuration object passed into jvCharts constructor
 * @param {string} configObj.type - The type of chart
 * @param {string} configObj.name - The name of the chart
 * @param {Object} configObj.container - The container of the chart
 * @param {Object} configObj.userOptions - UI options for the chart
 * @param {Object} configObj.tipConfig - Configuration object for jvTooltip
 * @param {Object} configObj.chartDiv - A div wrapper for the chart and other jv features
 */

var jvCharts = function () {
    function jvCharts(configObj) {
        _classCallCheck(this, jvCharts);

        var chart = this;
        configObj.type = configObj.type.toLowerCase();
        chart.chartDiv = configObj.chartDiv;
        configObj.options = cleanToolData(configObj.options, configObj.editOptions);
        chart._vars = chart.getDefaultOptions(configObj.options);
        chart.mode = configObj.mode || 'default-mode';

        //remove pieces from config that have been copied somewhere else
        delete configObj.chartDiv;
        delete configObj.options;
        delete configObj.mode;

        chart.config = configObj;
        chart.createTooltip();
        chart.setData();
        chart.paint();
    }

    _createClass(jvCharts, [{
        key: 'createTooltip',
        value: function createTooltip() {
            var chart = this;
            chart.tip = new jvTip({
                config: chart.config.tipConfig,
                chartDiv: chart.chartDiv
            });
        }
    }, {
        key: 'setData',
        value: function setData() {
            var chart = this;
            if (chart.config.setData) {
                chart.data = chart.config.setData;
                //refer to main data as chartData to keep naming separate and understandable
                chart.data.chartData = chart.config.setData.data;
                delete chart.data.data;

                chart.colors = chart.config.setData.colors;
                chart[chart.config.type].setData.call(chart);
            }
        }
    }, {
        key: 'checkDimensions',
        value: function checkDimensions() {
            var chart = this,
                dimensions = chart.chartDiv.node().getBoundingClientRect();
            if (dimensions.height > 50 && dimensions.width > 120) {
                return true;
            }
            console.log('Chart container is too small to paint');
            return false;
        }
    }, {
        key: 'paint',
        value: function paint(annimation) {
            var chart = this;
            if (chart.checkDimensions()) {
                if (chart.data && _typeof(chart[chart.config.type]) === 'object' && typeof chart[chart.config.type].paint === 'function') {
                    chart[chart.config.type].paint.call(chart, annimation);
                    chart.initializeModes();
                } else {
                    console.log('no paint function for: ' + chart.config.type);
                }
            }
        }
    }, {
        key: 'setAxisData',
        value: function setAxisData(axis, data, keys) {
            var chart = this,
                axisData = [],
                chartData = data.chartData,
                label = '',
                maxStack = 0,
                dataTableKeys = data.dataTableKeys,
                dataType = void 0;

            if (!dataTableKeys) {
                dataTableKeys = keys;
            }

            //Step 1: find out what the label is for the axis
            if (axis === 'x') {
                if (data.dataTable) {
                    if (data.dataTable.hasOwnProperty('label')) {
                        label = data.dataTable.label;
                    } else {
                        console.error("Label doesn't exist in dataTable");
                    }
                } else {
                    console.log('DataTable does not exist');
                }

                dataType = 'STRING';

                //Replace underscores with spaces
                label = label.replace(/_/g, ' ');

                //loop through data to populate axisData
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = chartData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var chartEle = _step.value;

                        if (chartEle[label] === null) {
                            axisData.push('NULL_VALUE');
                        } else if (chartEle[label] === '') {
                            axisData.push('EMPTY_STRING');
                        } else if (chartEle[label] || chartEle[label] === 0) {
                            axisData.push(chartEle[label]);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                if (dataTableKeys === undefined) {
                    console.error('dataTableKeys do not exist');
                }
                //Find the max value for Y Data
                var count = 0;

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = dataTableKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var key = _step2.value;

                        if (key.vizType !== 'label' && key.vizType !== 'tooltip' && key.vizType !== 'series') {
                            label = key.varKey;
                            count++;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                dataType = getDataTypeFromKeys(label, dataTableKeys, 'NUMBER');

                //Add all values that are on yaxis to axis data
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = chartData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _chartEle = _step3.value;

                        var stack = 0; //Keeps track of the maximum size of stacked data so that axis can be scaled to fit max size
                        for (var k in data.dataTable) {
                            if (_chartEle.hasOwnProperty(data.dataTable[k]) && k !== 'label' && k.indexOf('tooltip') === -1 && k !== 'series') {
                                stack += _chartEle[data.dataTable[k]];
                                axisData.push(_chartEle[data.dataTable[k]]);
                            }
                        }
                        if (stack > maxStack) {
                            maxStack = stack;
                        }
                    }

                    //If there are multiple values on the yAxis, don't specify a label
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                if (count > 1) {
                    label = '';
                }
                label = label.replace(/_/g, ' ');
            }

            //Find the min and max of numeric data for building axes and add it to the returned object
            if (dataType === 'NUMBER') {
                var max = void 0,
                    min = void 0,
                    temp = void 0,
                    tempMin = void 0,
                    tempMax = void 0;
                if (chart._vars.stackToggle) {
                    max = maxStack;
                } else {
                    max = Math.max.apply(null, axisData);
                }

                min = Math.min.apply(null, axisData);
                min = Math.min(0, min);

                //Check if there's an axis min/max set
                if (axis === 'x') {
                    if (chart._vars.xMin != null && chart._vars.xMin !== 'none') {
                        min = chart._vars.xMin;
                    }
                    if (chart._vars.xMax != null && chart._vars.xMax !== 'none') {
                        max = chart._vars.xMax;
                    }
                } else if (axis === 'y') {
                    if (chart._vars.yMin != null && chart._vars.yMin !== 'none') {
                        min = chart._vars.yMin;
                    }
                    if (chart._vars.yMax != null && chart._vars.yMax !== 'none') {
                        max = chart._vars.yMax;
                    }
                }

                if (dataType === 'NUMBER' && axisData.length === 1) {
                    if (axisData[0] >= 0) {
                        axisData.unshift(0);
                    } else {
                        axisData.push(0);
                    }
                }

                tempMin = parseInt(min, 10);
                tempMax = parseInt(max, 10);
                //Make sure that axis min and max don't get flipped
                if (tempMin > tempMax) {
                    temp = min;
                    min = max;
                    max = temp;
                }

                return {
                    'label': label,
                    'values': axisData,
                    'dataType': dataType,
                    'min': min,
                    'max': max
                };
            }

            return {
                'label': label,
                'values': axisData,
                'dataType': dataType
            };
        }

        /**setFlippedSeries
         *  flips series and returns flipped data
         *
         * @params chartData, dataTable, dataLabel
         * @returns Object of data and table for flipped series
         */

    }, {
        key: 'setFlippedSeries',
        value: function setFlippedSeries(dataTableKeys) {
            var chart = this,
                chartData = chart.data.chartData,
                dataTable = chart.data.dataTable,
                dataLabel = chart.data.xAxisData.label,
                flippedData = [],
                flippedDataTable = {},
                valueCount = 1,
                filteredDataTableArray = [];

            for (var k in dataTable) {
                if (dataTable.hasOwnProperty(k)) {
                    var flippedObject = {};
                    if (dataTable[k] !== dataLabel) {
                        flippedObject[dataLabel] = dataTable[k];
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;

                        try {
                            for (var _iterator4 = chartData[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var chartEle = _step4.value;

                                flippedObject[chartEle[dataLabel]] = chartEle[dataTable[k]];
                                if (filteredDataTableArray.indexOf(chartEle[dataLabel]) === -1) {
                                    flippedDataTable['value ' + valueCount] = chartEle[dataLabel];
                                    valueCount++;
                                    filteredDataTableArray.push(chartEle[dataLabel]);
                                }
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                    _iterator4.return();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }

                        flippedData.push(flippedObject);
                    }
                }
            }
            flippedDataTable.label = dataLabel;
            chart.flippedData = { chartData: flippedData, dataTable: flippedDataTable };

            if (chart.config.type === 'bar' || chart.config.type === 'line' || chart.config.type === 'area') {
                chart.flippedData.xAxisData = chart.setAxisData('x', chart.flippedData, dataTableKeys);
                chart.flippedData.yAxisData = chart.setAxisData('y', chart.flippedData, dataTableKeys);
                chart.flippedData.legendData = setBarLineLegendData(chart.flippedData);
            } else {
                console.log('Add additional chart type to set flipped series');
            }
        }

        /**organizeChartData
         *  reorders all data based on the sortLabel and sortType
         *  -Only for chartData, does not work with flipped data
         *
         * @params sortLabel , sortType
         * @returns [] sorted data
         */

    }, {
        key: 'organizeChartData',
        value: function organizeChartData(sortParam, sortType) {
            var chart = this,
                organizedData = void 0,
                dataType = void 0,
                dataTableKeys = chart.data.dataTableKeys,
                sortLabel = sortParam;

            //If sortLabel doesn't exist, sort on the x axis label by default
            if (sortLabel === 'none') {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = dataTableKeys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var key = _step5.value;

                        if (key.vizType === 'label') {
                            sortLabel = key.uri;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }

            //Remove underscores from sortLabel
            if (sortLabel) {
                sortLabel = sortLabel.replace(/_/g, ' ');
            }

            if (!chart.data.chartData[0][sortLabel]) {
                //Check if the sort label is a calculatedBy field
                var isValidSortLabel = false;
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = dataTableKeys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var _key = _step6.value;

                        if (_key.operation.hasOwnProperty('calculatedBy') && _key.operation.calculatedBy[0] === sortLabel) {
                            sortLabel = _key.uri.replace(/_/g, ' ');
                            isValidSortLabel = true;
                            break;
                        }
                    }
                    //If it's not a valid sort label, return and don't sort the data
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }

                if (!isValidSortLabel) {
                    console.error('Not a valid sort');
                    //throw new Error('Not a valid sort');
                }
            }

            //Check the data type to determine which logic to flow through
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = dataTableKeys[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var _key2 = _step7.value;

                    //Loop through dataTableKeys to find sortLabel
                    if (_key2.uri.replace(/_/g, ' ') === sortLabel) {
                        dataType = _key2.type;
                        break;
                    }
                }

                //Date sorting
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            if (dataType != null && dataType === 'DATE') {
                organizedData = chart.data.chartData.sort(function (a, b) {
                    return new Date(a[sortLabel]) - new Date(b[sortLabel]);
                });
            } else if (dataType != null && dataType === 'NUMBER') {
                organizedData = chart.data.chartData.sort(function (a, b) {
                    if (!isNaN(a[sortLabel]) && !isNaN(b[sortLabel])) {
                        return a[sortLabel] - b[sortLabel];
                    }
                });
            } else {
                organizedData = chart.data.chartData.sort(function (a, b) {
                    if (!isNaN(a[sortLabel]) && !isNaN(b[sortLabel])) {
                        if (parseFloat(a[sortLabel]) < parseFloat(b[sortLabel])) {
                            //sort string ascending
                            return -1;
                        }
                        if (parseFloat(a[sortLabel]) > parseFloat(b[sortLabel])) {
                            return 1;
                        }
                        return 0;
                    }
                    if (a[sortLabel].toLowerCase() < b[sortLabel].toLowerCase()) {
                        //sort string ascending
                        return -1;
                    }
                    if (a[sortLabel].toLowerCase() > b[sortLabel].toLowerCase()) {
                        return 1;
                    }
                    return 0;
                });
            }

            switch (sortType) {
                case 'sortAscending':
                case 'ascending':
                    chart.data.chartData = organizedData;
                    break;
                case 'sortDescending':
                case 'descending':
                    chart.data.chartData = organizedData.reverse();
                    break;
                default:
                    chart.data.chartData = organizedData;
            }
        }

        /**setTipData
         *
         * creates data object to display in tooltip
         * @params
         * @returns {{}}
         */

    }, {
        key: 'setTipData',
        value: function setTipData(d, i) {
            var chart = this,
                data = chart.currentData.chartData,

            //Get Color from chartData and add to object
            color = chart._vars.color,
                title = d[chart.data.dataTable.label],
                dataTable = {};

            if (chart.config.type === 'treemap') {
                for (var item in d) {
                    if (item !== chart.data.dataTable.label && item !== 'Parent') {
                        dataTable[item] = d[item];
                    }
                }
            } else if (chart.config.type === 'bar' || chart.config.type === 'line' || chart.config.type === 'area') {
                title = data[i][chart.data.dataTable.label];
                for (var _item in data[i]) {
                    if (_item !== chart.data.dataTable.label) {
                        dataTable[_item] = data[i][_item];
                    } else {
                        continue;
                    }
                }
            } else if (chart.config.type === 'gantt') {
                //Calculate length of dates
                for (var _item2 in data[i]) {
                    if (data[i].hasOwnProperty(_item2) && _item2 !== chart.data.dataTable.group) {
                        dataTable[_item2] = data[i][_item2];
                    }
                }

                var start = void 0,
                    end = void 0,
                    difference = void 0,

                //Calculting duration of date ranges to add to tooltip
                numPairs = Math.floor(Object.keys(chart.data.dataTable).length / 2);

                for (var j = 1; j <= numPairs; j++) {
                    start = new Date(data[i][chart.data.dataTable['start ' + j]]);
                    end = new Date(data[i][chart.data.dataTable['end ' + j]]);
                    difference = end.getTime() - start.getTime();
                    dataTable['Duration ' + j] = Math.ceil(difference / (1000 * 60 * 60 * 24)) + ' days';
                }

                title = data[i][chart.data.dataTable.group];
            } else if (chart.config.type === 'pie' || chart.config.type === 'radial') {
                title = d.label;
                for (var _item3 in d) {
                    if (_item3 !== 'label') {
                        dataTable[_item3] = d[_item3];
                    } else {
                        continue;
                    }
                }
                delete dataTable.outerRadius;
            } else if (chart.config.type === 'circlepack' || chart.config.type === 'sunburst') {
                title = d.data.name;
                dataTable[chart.data.dataTable.value] = d.value;
            } else if (chart.config.type === 'cloud') {
                title = d[chart.data.dataTable.label];
                dataTable[chart.data.dataTable.value] = d[chart.data.dataTable.value];
                if (typeof d[chart.data.dataTable['tooltip 1']] !== 'undefined') {
                    dataTable[chart.data.dataTable['tooltip 1']] = d[chart.data.dataTable['tooltip 1']];
                }
            } else if (chart.config.type === 'heatmap') {
                title = d.yAxisName + ' to ' + d.xAxisName;
                if (d.hasOwnProperty('value')) {
                    dataTable.value = d.value;
                }
                for (var tooltip in d) {
                    if (tooltip.indexOf('tooltip') > -1) {
                        dataTable[chart.data.dataTable[tooltip]] = d[tooltip];
                    }
                }
            } else if (chart.config.type === 'clustergram') {
                //title = d.y_path.replace(/\./g, '→') + '</br>' + d.x_path.replace(/\./g, '→');
                //Build strings for tooltip
                var yTemp = d.y_path.split('.'),
                    yTempString = '',
                    xTemp = d.x_path.split('.'),
                    xTempString = '';

                for (var k = 0; k < yTemp.length; k++) {
                    if (chart.data.dataTable['y_category ' + (k + 1)]) {
                        yTempString += yTemp[k] += ' (' + chart.data.dataTable['y_category ' + (k + 1)] + ')';
                    } else {
                        yTempString += yTemp[k] += ' (' + chart.data.dataTable['y_category'] + ')';
                    }

                    if (k !== yTemp.length - 1) {
                        yTempString += ' → ';
                    }
                }
                for (var _k = 0; _k < xTemp.length; _k++) {
                    if (chart.data.dataTable['x_category ' + (_k + 1)]) {
                        xTempString += xTemp[_k] += ' (' + chart.data.dataTable['x_category ' + (_k + 1)] + ')';
                    } else {
                        xTempString += xTemp[_k] += ' (' + chart.data.dataTable['x_category'] + ')';
                    }

                    if (_k !== xTemp.length - 1) {
                        xTempString += ' → ';
                    }
                }

                title = 'Y > ' + yTempString + '<br>' + 'X > ' + xTempString;
                if (d.hasOwnProperty('value')) {
                    dataTable.value = d.value;
                }
                for (var _tooltip in d) {
                    if (_tooltip.indexOf('tooltip') > -1) {
                        dataTable[chart.data.dataTable[_tooltip]] = d[_tooltip];
                    }
                }
            } else if (chart.config.type === 'sankey') {
                title = d.source.name.slice(0, -2) + ' to ' + d.target.name.slice(0, -2);

                if (d.hasOwnProperty('value')) {
                    dataTable.value = d.value;
                }
            } else if (chart.config.type === 'singleaxis') {
                title = d.data[chart.data.dataTable.label];

                for (var _item4 in chart.data.dataTable) {
                    if (_item4 !== 'label') {
                        dataTable[chart.data.dataTable[_item4]] = d.data[chart.data.dataTable[_item4]];
                    }
                }
            } else {
                for (var _item5 in d) {
                    if (_item5 !== chart.data.dataTable.label) {
                        dataTable[_item5] = d[_item5];
                    } else {
                        continue;
                    }
                }
            }

            return { 'data': d, 'tipData': dataTable, 'index': i, 'title': title, 'color': color, 'viz': chart.config.type };
        }

        /************************************************ Draw functions ******************************************************/

        /**generateSVG
         *creates an SVG element on the panel
         *
         * @params container, margin, name
         *
         */

    }, {
        key: 'generateSVG',
        value: function generateSVG(legendData, customMarginParam, customSizeParam) {
            var chart = this,
                margin = {},
                container = {},
                dimensions = chart.chartDiv.node().getBoundingClientRect(),
                customMargins = customMarginParam,
                customSize = customSizeParam,
                textWidth = void 0;

            if (chart._vars.customMargins) {
                customMargins = chart._vars.customMargins;
            }

            //set margins
            if (!customMargins) {
                //declare margins if they arent passed in
                margin = {
                    top: 55,
                    right: 50,
                    left: 100,
                    bottom: 70
                };
                if (legendData != null) {
                    if (legendData.length <= 3) {
                        margin.bottom = 70;
                    } else if (legendData.length <= 6) {
                        margin.bottom = 85;
                    } else {
                        margin.bottom = 130;
                    }
                }
            } else {
                margin = customMargins;
            }

            //reduce margins if legend is toggled off
            //TODO make this better
            if (chart._vars.toggleLegend === false) {
                if (chart.config.type === 'pie' || chart.config.type === 'radial' || chart.config.type === 'circlepack' || chart.config.type === 'heatmap') {
                    margin.left = 40;
                } else if (chart.config.type === 'treemap' || chart.config.type === 'bar' || chart.config.type === 'gantt' || chart.config.type === 'scatter' || chart.config.type === 'line') {
                    margin.bottom = 40;
                }
            }

            if (chart.config.type === 'clustergram') {
                textWidth = getMaxWidthForAxisData('y', chart.leftLabels, chart._vars, dimensions, margin, chart.chartDiv, chart.config.type);
                margin.left = Math.ceil(textWidth);
                if (margin.left < 30) {
                    margin.left = 30;
                }

                textWidth = getMaxWidthForAxisData('y', chart.rightLabels, chart._vars, dimensions, margin, chart.chartDiv, chart.config.type);
                margin.top = Math.ceil(textWidth);
                if (margin.top < 30) {
                    margin.top = 30;
                }
            }

            //set yAxis margins
            if (chart.currentData && chart.currentData.yAxisData) {
                textWidth = getMaxWidthForAxisData('y', chart.currentData.yAxisData, chart._vars, dimensions, margin, chart.chartDiv, chart.config.type);
                if (textWidth > 100 && chart.config.type === 'heatmap') {
                    textWidth = 100;
                }
                chart._vars.heatmapYmargin = textWidth;
                margin.left = Math.ceil(textWidth) + 30;
            }

            //set xAxis top margins
            if (chart.config.type === 'heatmap' && chart.currentData && chart.currentData.xAxisData) {
                textWidth = getMaxWidthForAxisData('x', chart.currentData.xAxisData, chart._vars, dimensions, margin, chart.chartDiv, chart.config.type);
                //subtract space for tilt
                textWidth = Math.ceil(textWidth);
                if (textWidth > 100) {
                    textWidth = 100;
                }
                //specific to heatmap
                if (chart.config.type === 'heatmap') {
                    if (textWidth > 100) {
                        textWidth = 100;
                    } else if (textWidth < 80) {
                        textWidth = 80;
                    }
                }
                chart._vars.heatmapXmargin = textWidth;
                margin.top = textWidth;
                customSize = {};
                //set container
                customSize.width = chart.currentData.xAxisData.values.length * 20;
                customSize.height = chart.currentData.yAxisData.values.length * 20;

                if (!chart._vars.toggleLegend) {
                    var dummyObj = {};
                    dummyObj.values = chart.data.heatData;
                    dummyObj.values.sort(function (a, b) {
                        return a - b;
                    });
                    dummyObj.label = '';
                    dummyObj.min = dummyObj.values[0];
                    dummyObj.max = dummyObj.values[dummyObj.values.length - 1];

                    textWidth = getMaxWidthForAxisData('y', dummyObj, chart._vars, dimensions, margin, chart.chartDiv, chart.config.type);
                    chart.config.heatWidth = Math.ceil(textWidth) + 30;
                    margin.left = margin.left + chart.config.heatWidth;
                }

                if (customSize.width + margin.left + margin.right < dimensions.width) {
                    margin.right = parseInt(dimensions.width, 10) - margin.left - customSize.width - 20;
                }
                if (customSize.height + margin.top + margin.bottom < dimensions.height) {
                    margin.bottom = parseInt(dimensions.height, 10) - margin.top - customSize.height - 10;
                }
                customSize.width += margin.right + margin.left;
                customSize.height += margin.top + margin.bottom;
            }

            //set container attributes
            //Set svg size based on calculation margins or custom size if specified
            if (customSize && customSize.hasOwnProperty('height')) {
                container.height = customSize.height - margin.top - margin.bottom;
            } else {
                container.height = parseInt(dimensions.height, 10) - margin.top - margin.bottom;
                if (container.height <= 50) {
                    margin.top = 10;
                    margin.bottom = 10;
                    container.height = parseInt(dimensions.height, 10) - margin.top - margin.bottom;
                    chart._vars.xLabelFontSize = 0;
                }
            }

            if (customSize && customSize.hasOwnProperty('width')) {
                container.width = customSize.width - margin.left - margin.right;
            } else {
                container.width = parseInt(dimensions.width, 10) - margin.left - margin.right;
            }

            //add margin and container to chart config object
            chart.config.margin = margin;
            chart.config.container = container;

            //remove old svg if it exists
            chart.svg = chart.chartDiv.select('svg').remove();

            //svg layer
            if (chart.config.type === 'heatmap' || chart.config.type === 'singleaxis') {
                chart.svg = chart.chartDiv.append('svg').attr('class', 'editable-svg').attr('width', container.width + margin.left + margin.right).attr('height', container.height + margin.top + margin.bottom).append('g').attr('class', 'container').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
            } else if (chart.config.type === 'clustergram') {
                if (chart.data.chartData[2].length * 10 > container.width || chart.data.chartData[2].length * 10 > container.height) {
                    chart.svg = chart.chartDiv.append('svg').attr('class', 'editable-svg').attr('width', chart.data.chartData[2].length * 10).attr('height', chart.data.chartData[2].length * 10).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                } else {
                    chart.svg = chart.chartDiv.append('svg').attr('class', 'editable-svg').attr('width', container.width).attr('height', container.height).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                }
            } else {
                chart.svg = chart.chartDiv.append('svg').attr('class', 'editable-svg').attr('width', container.width + margin.left + margin.right).attr('height', container.height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
            }

            //TODO move to edit mode
            if (chart._vars.backgroundColor !== 'none') {
                chart.colorBackground(chart._vars.backgroundColor);
            }
        }

        /**generateXAxis
         * creates x axis on the svg
         *
         * @params xAxisData
         */

    }, {
        key: 'generateXAxis',
        value: function generateXAxis(xAxisData, ticks) {
            //declare variables
            var chart = this,
                xAxis = void 0,

            //Need to getXAxisScale each time so that axis updates on resize
            xAxisScale = jvCharts.getAxisScale('x', xAxisData, chart.config.container, chart._vars),
                containerHeight = chart.config.container.height,
                containerWidth = chart.config.container.width,
                xAxisClass = 'xAxisLabels editable editable-xAxis editable-text',
                tickSize = 0,
                axisHeight = containerHeight,
                xContent = void 0,
                xAxisGroup = void 0,
                formatValueType = void 0;

            //assign css class for edit mode
            //if the axis is numbers add editable-num
            if (xAxisData.dataType === 'NUMBER') {
                xAxisClass += ' editable-num';
            }

            //remove previous xAxis container if its there
            chart.svg.selectAll('.xAxisContainer').remove();

            //Save the axis scale to chart object
            chart.currentData.xAxisScale = xAxisScale;

            if (chart.currentData.xAxisData.dataType === 'NUMBER') {
                tickSize = 5;
            }

            //create xAxis drawing function
            if (chart.config.type === 'singleaxis') {
                xAxis = d3.axisTop(xAxisScale).tickSize(tickSize);
            } else {
                xAxis = d3.axisBottom(xAxisScale).tickSize(tickSize);
            }

            if (ticks) {
                xAxis.ticks(ticks);
            }

            if (chart.config.type === 'singleaxis') {
                //For any axes that are on top of the data
                axisHeight = 0;
            }

            xContent = chart.svg.append('g').attr('class', 'xAxisContainer').attr('transform', 'translate(0,' + axisHeight + ')');

            xAxisGroup = xContent.append('g').attr('class', 'xAxis').call(xAxis);

            formatValueType = jvFormatValueType(xAxisData.values);

            //Styling the axis
            xAxisGroup.select('path').attr('stroke', chart._vars.axisColor).attr('stroke-width', chart._vars.strokeWidth);

            //Styling for ticks
            xAxisGroup.selectAll('line').attr('stroke', chart._vars.axisColor).attr('stroke-width', chart._vars.stroke);

            //Styling the labels for each piece of data
            xAxisGroup.selectAll('text').attr('fill', chart._vars.fontColor) //Customize the color of axis labels
            .attr('class', xAxisClass).style('text-anchor', 'middle').attr('font-size', chart._vars.fontSize).attr('transform', 'translate(0, 3)').text(function (d) {
                if (xAxisData.dataType === 'NUMBER' || chart._vars.rotateAxis) {
                    return jvFormatValue(d, formatValueType);
                }
                return d;
            });

            //Styling the label for the entire axis
            xContent.append('g').attr('class', 'xLabel').append('text').attr('class', 'xLabel editable editable-text editable-content').attr('text-anchor', 'middle').attr('font-size', chart._vars.fontSize).text(function () {
                if (xAxisData.dataType === 'DATE') {
                    return '';
                }
                return xAxisData.label;
            }).attr('transform', 'translate(' + containerWidth / 2 + ', 33)');
        }

        /**FormatXAxisLabels
         *
         * If x-axis labels are too long/overlapping, they will be hidden/shortened
         */

    }, {
        key: 'formatXAxisLabels',
        value: function formatXAxisLabels(dataLength, recursion) {
            var chart = this,
                showAxisLabels = true,
                xAxisLength = chart.config.container.width,
                textWidth = [],
                formatValueType = null,
                dataType = chart.currentData.xAxisData.dataType,
                axisValues = chart.currentData.xAxisData.values;

            if (dataType === 'NUMBER') {
                formatValueType = jvFormatValueType(axisValues);
            }

            //create dummy text to determine computed text length for the axis labels
            //necessary to do this because axis labels getBBox() is returning 0 since they do not seem to be drawn yet
            chart.svg.append('g').selectAll('.dummyText').data(axisValues).enter().append('text').attr('font-family', 'sans-serif').attr('font-size', chart._vars.fontSize).text(function (d) {
                var returnVal = d;
                if (dataType === 'NUMBER') {
                    returnVal = jvFormatValue(d, formatValueType);
                }
                return returnVal;
            }).each(function () {
                //adding 10px buffer
                var thisWidth = this.getComputedTextLength() + 10;
                textWidth.push(thisWidth);
                this.remove(); //remove them just after displaying them
            });

            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = textWidth[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var textEle = _step8.value;

                    if (textEle > xAxisLength / dataLength) {
                        showAxisLabels = false;
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            if (showAxisLabels) {
                if (recursion) {
                    chart.generateXAxis(chart.currentData.xAxisData, dataLength);
                }
                chart.svg.selectAll('.xAxisLabels').style('display', 'block');
            } else if (dataLength > 1 && chart.currentData.xAxisData.dataType === 'NUMBER') {
                //recursively keep decreasing to figure out ticks length to repaint the xAxis if its numeric
                chart.formatXAxisLabels(dataLength - 1, true);
            } else {
                chart.svg.selectAll('.xAxis').selectAll('text').style('display', 'none');
            }
        }

        /**generateYAxis
         * creates y axis on the svg
         *
         * @params generateYAxis
         */

    }, {
        key: 'generateYAxis',
        value: function generateYAxis(yAxisData) {
            var chart = this,
                yAxisScale = jvCharts.getAxisScale('y', yAxisData, chart.config.container, chart._vars),
                yAxisClass = 'yAxisLabels editable editable-yAxis editable-text',
                maxYAxisLabelWidth = void 0,
                numberOfTicks = Math.floor(chart.config.container.height / 14),
                yAxis = void 0,
                yContent = void 0,
                yAxisGroup = void 0,
                forceFormatTypeTo = null,
                ylabel = '';

            //assign css class for edit mode
            //if the axis is numbers add editable-num
            if (yAxisData.dataType === 'NUMBER') {
                yAxisClass += ' editable-num';
            }

            //Save y axis scale to chart object
            chart.currentData.yAxisScale = yAxisScale;

            //remove previous svg elements
            chart.svg.selectAll('.yAxisContainer').remove();
            chart.svg.selectAll('text.yLabel').remove();

            if (numberOfTicks > 10) {
                if (numberOfTicks < 20) {
                    numberOfTicks = 10;
                } else if (numberOfTicks < 30) {
                    numberOfTicks /= 2;
                } else {
                    numberOfTicks = 15;
                }
            }

            //If all y-axis values are the same, only show a tick for that value. If value is 1, don't show any decimal places
            if (yAxisData.values.length > 0 && !!yAxisData.values.reduce(function (a, b) {
                return a === b ? a : NaN;
            })) {
                numberOfTicks = 1;
                if (yAxisData.values[0] === 1) {
                    forceFormatTypeTo = 'nodecimals';
                }
            }
            yAxis = d3.axisLeft().ticks(numberOfTicks) //Link to D3.svg.axis options: https://github.com/mbostock/d3/wiki/SVG-Axes
            .scale(yAxisScale) //Sets the scale to use in the axis
            .tickSize(5) //Sets the thickness of the axis line
            .tickPadding(5);

            //Hide Axis values if necessary
            if (yAxisData.hideValues) {
                yAxis.tickFormat('');
            }
            if (chart._vars.displayYAxisLabel) {
                ylabel = yAxisData.label;
            }

            yContent = chart.svg.append('g').attr('class', 'yAxisContainer');

            yContent.append('g').attr('class', 'yLabel').append('text').attr('class', 'yLabel editable editable-text editable-content').attr('text-anchor', 'start').attr('font-size', chart._vars.fontSize).attr('x', 0).attr('y', 0).attr('transform', 'translate(' + (-chart.config.margin.left + 10) + ', -10)').text(ylabel).attr('fill-opacity', 1);

            yAxisGroup = yContent.append('g').attr('class', 'yAxis');

            yAxisGroup.call(yAxis);

            //Styling for Axis
            yAxisGroup.select('path').attr('stroke', chart._vars.axisColor).attr('stroke-width', chart._vars.strokeWidth);

            maxYAxisLabelWidth = 0;

            if (yAxisData.hideValues) {
                //Styling for ticks
                yAxisGroup.selectAll('line').attr('stroke-width', 0);
            } else {
                var formatValueType = jvFormatValueType(yAxisData.values);
                //Styling for ticks
                yAxisGroup.selectAll('line').attr('stroke', chart._vars.axisColor).attr('stroke-width', chart._vars.stroke);
                //Styling for data labels on axis
                yAxisGroup.selectAll('text').attr('fill', chart._vars.fontColor) //Customize the color of axis labels
                .attr('class', yAxisClass).attr('transform', 'rotate(0)') //Add logic to rotate axis based on size of title
                .attr('font-size', chart._vars.fontSize).append('svg:title');

                yAxisGroup.selectAll('text').text(function (d) {
                    if (chart._vars.rotateAxis) {
                        return d;
                    }
                    var maxLength = 13,
                        current = '';
                    if (d.length > maxLength) {
                        current = d.substring(0, maxLength) + '...';
                    } else {
                        current = d;
                    }

                    if (forceFormatTypeTo !== null) {
                        formatValueType = forceFormatTypeTo;
                    }
                    return jvFormatValue(current, formatValueType);
                }).each(function (d, i, j) {
                    if (j[0].getBBox().width > maxYAxisLabelWidth) {
                        maxYAxisLabelWidth = j[0].getBBox().width;
                    }
                });
                if (maxYAxisLabelWidth > 0) {
                    chart._vars.yLabelWidth = Math.ceil(maxYAxisLabelWidth) + 20;
                }
            }
        }
        /************************************************ Legend functions ******************************************************/

    }, {
        key: 'generateLegend',
        value: function generateLegend(legendData, drawFunc) {
            var chart = this,
                svg = chart.svg,
                legendElements = void 0;
            svg.selectAll('.legend').remove();

            legendElements = generateLegendElements(chart, legendData, drawFunc);

            //Returns the legend rectangles that are toggled on/off
            if (drawFunc) {
                attachClickEventsToLegend(chart, legendElements, drawFunc, legendData);
            }

            if (chart._vars.thresholds !== 'none' && chart._vars.thesholdLegend === true) {
                if (chart.config.type === 'bar' || chart.config.type === 'area' || chart.config.type === 'line') {
                    if (chart.config.container.height > 300 && chart.config.container.width > 300) {
                        generateThresholdLegend(chart);
                    }
                }
            }

            if (!chart._vars.toggleLegend) {
                svg.selectAll('.legend').remove();
                svg.selectAll('.legend-carousel').remove();
            }
        }

        /**generateVerticalLegend
         *
         * creates and draws a vertical legend on the svg element
         * @params svg, legendData, options, container, chartData, xAxisData, yAxisData, chartType
         * @returns {{}}
         */

    }, {
        key: 'generateVerticalLegend',
        value: function generateVerticalLegend(paintFunc) {
            var chart = this,
                svg = chart.svg,
                legendData = chart.currentData.legendData,
                legendElements = void 0;

            svg.selectAll('.legend').remove();
            legendElements = generateVerticalLegendElements(chart, legendData, paintFunc);

            //Returns the legend rectangles that are toggled on/off
            if (paintFunc !== 'generatePack') {
                attachClickEventsToLegend(chart, legendElements, paintFunc, legendData);
            }

            if (!chart._vars.toggleLegend) {
                svg.selectAll('.legend').remove();
                svg.selectAll('.legend-carousel').remove();
            }
        }

        /**
         *
         * Generates a clip path that contains the contents of the chart area to the view of the chart area container
         * i.e - don't want bars going below the x axis
         */

    }, {
        key: 'generateClipPath',
        value: function generateClipPath() {
            var chart = this,
                svg = chart.svg,
                type = chart.config.type,
                containerName = '.' + type + '-container';

            svg.append('clipPath').attr('id', 'clip').append('rect').attr('x', 0).attr('y', 0).attr('width', chart.config.container.width).attr('height', chart.config.container.height);

            //Break this out into logic for all other vizzes that have overflow issues
            svg.select(containerName).attr('clip-path', 'url(#clip)');
        }
    }, {
        key: 'setThreshold',
        value: function setThreshold(data) {
            var chart = this,
                thresholds = chart._vars.thresholds,
                length = thresholds ? Object.keys(thresholds).length : 0;

            if (thresholds !== 'none') {
                for (var i = length - 1; i >= 0; i--) {
                    var threshold = thresholds[i];
                    //console.log(typeof data == "date");
                    if (data >= Number(threshold.threshold)) {
                        return 'rect-' + i;
                    }
                }
            }
            return '';
        }
    }, {
        key: 'generateLineThreshold',
        value: function generateLineThreshold() {
            var chart = this,
                svg = chart.svg,
                width = chart.config.container.width,
                height = chart.config.container.height,
                thresholds = chart._vars.thresholds,
                length = Object.keys(chart._vars.thresholds).length,
                x = chart.currentData.xAxisScale,
                y = chart.currentData.yAxisScale;

            if (thresholds !== 'none') {
                for (var i = 0; i < length; i++) {
                    var threshold = thresholds[i];
                    if (chart._vars.rotateAxis) {
                        svg.append('line').style('stroke', threshold.thresholdColor).attr('x1', x(threshold.threshold)).attr('y1', 0).attr('x2', x(threshold.threshold)).attr('y2', height).attr('stroke-dasharray', '3, 3');
                    } else {
                        svg.append('line').style('stroke', threshold.thresholdColor).attr('x1', 0).attr('y1', y(threshold.threshold)).attr('x2', width).attr('y2', y(threshold.threshold)).attr('stroke-dasharray', '3, 3');
                    }
                }
            }
        }
    }, {
        key: 'colorBackground',
        value: function colorBackground(color) {
            var chart = this;
            chart._vars.backgroundColor = color;
            chart.chartDiv.style('background-color', '' + color);
        }

        /**displayValues
         *
         * toggles data values that are displayed on the specific type of chart on the svg
         * @params svg, barData, options, xAxisData, yAxisData, container
         * @returns {{}}
         */

    }, {
        key: 'displayValues',
        value: function displayValues() {
            var chart = this,
                svg = chart.svg,
                container = chart.config.container,
                chartData = chart.data.chartData,
                xAxisData = chart.currentData.xAxisData,
                yAxisData = chart.currentData.yAxisData,
                legendOptions = chart._vars.legendOptions,
                cleanedChartData = JSON.parse(JSON.stringify(chartData)),
                data = [],
                //Only stores values
            posCalc,
                x,
                y,
                displayValuesGroup;

            //If series is flipped, use flipped data; initialize with the full data set
            if (chart._vars.seriesFlipped) {
                chartData = chart.flippedData.chartData;
                legendOptions = chart._vars.flippedLegendOptions;
            }

            if (chart._vars.displayValues === true) {
                svg.selectAll('.displayValueContainer').remove();
                if (legendOptions) {
                    //Checking which legend elements are toggled on resize
                    var _iteratorNormalCompletion9 = true;
                    var _didIteratorError9 = false;
                    var _iteratorError9 = undefined;

                    try {
                        for (var _iterator9 = cleanedChartData[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var chartEle = _step9.value;
                            var _iteratorNormalCompletion10 = true;
                            var _didIteratorError10 = false;
                            var _iteratorError10 = undefined;

                            try {
                                for (var _iterator10 = legendOptions[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                                    var legendEle = _step10.value;

                                    if (legendEle.toggle === false) {
                                        delete chartEle[legendEle.element];
                                    }
                                }
                            } catch (err) {
                                _didIteratorError10 = true;
                                _iteratorError10 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                        _iterator10.return();
                                    }
                                } finally {
                                    if (_didIteratorError10) {
                                        throw _iteratorError10;
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError9 = true;
                        _iteratorError9 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                _iterator9.return();
                            }
                        } finally {
                            if (_didIteratorError9) {
                                throw _iteratorError9;
                            }
                        }
                    }
                }

                var _iteratorNormalCompletion11 = true;
                var _didIteratorError11 = false;
                var _iteratorError11 = undefined;

                try {
                    for (var _iterator11 = cleanedChartData[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                        var _chartEle2 = _step11.value;

                        var val = getDisplayValuesElement(_chartEle2, chart.currentData.dataTable, chart.config.type);
                        data.push(val);
                    }
                } catch (err) {
                    _didIteratorError11 = true;
                    _iteratorError11 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion11 && _iterator11.return) {
                            _iterator11.return();
                        }
                    } finally {
                        if (_didIteratorError11) {
                            throw _iteratorError11;
                        }
                    }
                }

                posCalc = getPosCalculations(cleanedChartData, chart._vars, xAxisData, yAxisData, container, chart);
                x = jvCharts.getAxisScale('x', xAxisData, container, chart._vars);
                y = jvCharts.getAxisScale('y', yAxisData, container, chart._vars);

                if (chart._vars.rotateAxis) {
                    //Add a container for display values over each bar group
                    displayValuesGroup = svg.append('g').attr('class', 'displayValuesGroup').selectAll('g').data(data).enter().append('g').attr('class', 'displayValuesGroup').attr('transform', function (d, i) {
                        var translate = y.paddingOuter() * y.step() + y.step() * i;
                        return 'translate(0,' + translate + ')';
                    });

                    displayValuesGroup.selectAll('text').data(function (d) {
                        return d;
                    }).enter().append('text').attr('class', 'displayValue').attr('x', function (d, i, j) {
                        //sets the x position of the bar)
                        return posCalc.width(d, i, j) + posCalc.x(d, i, j);
                    }).attr('y', function (d, i, j) {
                        //sets the y position of the bar
                        return posCalc.y(d, i, j) + posCalc.height(d, i, j) / 2;
                    }).attr('dy', '.35em').attr('text-anchor', 'start').attr('fill', chart._vars.fontColor).text(function (d) {
                        var returnText = Math.round(d * 100) / 100; //round to 2 decimals
                        return jvFormatValue(returnText);
                    }).attr('font-size', chart._vars.fontSize);
                } else {
                    //Add a display values container over each bar group
                    displayValuesGroup = svg.append('g').attr('class', 'displayValuesGroup').selectAll('g').data(data).enter().append('g').attr('class', 'displayValuesGroup').attr('transform', function (d, i) {
                        var translate = x.paddingOuter() * x.step() + x.step() * i;
                        return 'translate(' + translate + ',0)';
                    });
                    displayValuesGroup.selectAll('text').data(function (d) {
                        return d;
                    }).enter().append('text').attr('class', 'displayValue').attr('x', function (d, i, j) {
                        //sets the x position of the bar)
                        return Math.round(posCalc.x(d, i, j) + posCalc.width(d, i, j) / 2);
                    }).attr('y', function (d, i, j) {
                        //sets the y position of the bar
                        return Math.round(posCalc.y(d, i, j)) - 3; //+ posCalc.height(d, i, j) - 5);
                    }).attr('text-anchor', 'middle').attr('fill', chart._vars.fontColor).text(function (d, i, j) {
                        if (chart._vars.stackToggle && chart._vars.displayValuesStackAsPercent) {
                            var total = 0;
                            for (var index = 0; index < j.length; index++) {
                                total += j[index].__data__;
                            }
                            return jvFormatValue(d / total, 'percent');
                        }

                        return jvFormatValue(d);
                    }).attr('font-size', chart._vars.fontSize);

                    if (chart._vars.stackToggle && chart._vars.displayValuesStackTotal) {
                        var stackCounter = 0;
                        svg.append('g').attr('class', 'displayStackTotal').selectAll('g').data(data).enter().append('g').attr('transform', function (d, i) {
                            var translate = x.paddingOuter() * x.step() + x.step() * i;
                            return 'translate(' + translate + ',0)';
                        }).selectAll('text').data(function (d) {
                            return d;
                        }).enter().append('text').attr('x', function (d, i, j) {
                            //sets the x position of the bar)
                            return Math.round(posCalc.x(d, i, j) + posCalc.width(d, i, j) / 2);
                        }).attr('y', function (d, i, j) {
                            //sets the y position of the bar
                            return Math.round(posCalc.y(d, i, j)) - 18; //+ posCalc.height(d, i, j) - 5);
                        }).attr('text-anchor', 'middle').attr('fill', chart._vars.fontColor).text(function (d, i, j) {
                            var yLength = chart.currentData.yAxisData.values.length,
                                xLength = chart.currentData.xAxisData.values.length,
                                indexMax = yLength / xLength,
                                stack = 0;
                            if (i + 1 === indexMax) {
                                for (var k = 0; j < indexMax; k++) {
                                    stack += chart.currentData.yAxisData.values[indexMax * stackCounter + k];
                                }
                                stackCounter++;
                                return jvFormatValue(stack);
                            }
                            return '';
                        }).attr('font-size', chart._vars.fontSize);
                    }
                }
            } else {
                svg.selectAll('.displayValueContainer').remove();
            }
        }
    }, {
        key: 'drawGridlines',
        value: function drawGridlines(axisData) {
            var chart = this,
                scaleData = void 0;

            chart.svg.selectAll('g.gridLines').remove();
            chart.svg.append('g').attr('class', 'gridLines');

            //Determine if gridlines are horizontal or vertical based on rotateAxis
            if (chart._vars.rotateAxis === true || chart.config.type === 'gantt' || chart.config.type === 'singleaxis') {
                var gridLineHeight = chart.config.container.height,
                    xAxisScale = jvCharts.getAxisScale('x', axisData, chart.config.container, chart._vars);

                if (axisData.dataType === 'STRING') {
                    scaleData = axisData.values;
                } else if (axisData.dataType === 'NUMBER' || axisData.dataType === 'DATE') {
                    scaleData = xAxisScale.ticks(10);
                }

                chart.svg.select('.gridLines').selectAll('.horizontalGrid').data(scaleData).enter().append('line').attr('class', 'horizontalGrid').attr('x1', function (d, i) {
                    return i > 0 ? xAxisScale(d) : 0;
                }).attr('x2', function (d, i) {
                    return i > 0 ? xAxisScale(d) : 0;
                }).attr('y1', 0).attr('y2', function (d, i) {
                    return i > 0 ? gridLineHeight : 0;
                }).attr('fill', 'none').attr('shape-rendering', 'crispEdges').attr('stroke', chart._vars.axisColor).attr('stroke-width', chart._vars.gridLineStrokeWidth);
            } else {
                var gridLineWidth = chart.config.container.width,
                    yAxisScale = jvCharts.getAxisScale('y', axisData, chart.config.container, chart._vars);

                if (axisData.dataType === 'STRING') {
                    scaleData = axisData.values;
                } else if (axisData.dataType === 'NUMBER' || axisData.dataType === 'DATE') {
                    scaleData = yAxisScale.ticks(10);
                }

                chart.svg.select('.gridLines').selectAll('.horizontalGrid').data(scaleData).enter().append('line').attr('class', 'horizontalGrid').attr('x1', 0).attr('x2', function (d, i) {
                    return i > 0 ? gridLineWidth : 0;
                }).attr('y1', function (d, i) {
                    return i > 0 ? yAxisScale(d) : 0;
                }).attr('y2', function (d, i) {
                    return i > 0 ? yAxisScale(d) : 0;
                }).attr('fill', 'none').attr('shape-rendering', 'crispEdges').attr('stroke', chart._vars.axisColor).attr('stroke-width', chart._vars.gridLineStrokeWidth);
            }
        }

        /**getBarDataFromOptions
        * ^^ not just a bar function, line and area also use it
        *
        * Assigns the correct chart data to current data using the chart.options
        */

    }, {
        key: 'getBarDataFromOptions',
        value: function getBarDataFromOptions() {
            var chart = this,
                dataObj = {},
                data = chart.data;

            //set flipped data if necessary
            if (chart._vars.seriesFlipped) {
                data = chart.flippedData;
            }

            dataObj.chartData = data.chartData;
            dataObj.legendData = data.legendData;
            dataObj.dataTable = data.dataTable;
            chart._vars.color = data.color;
            if (chart._vars.rotateAxis === true) {
                dataObj.xAxisData = data.yAxisData;
                dataObj.yAxisData = data.xAxisData;
            } else {
                dataObj.xAxisData = data.xAxisData;
                dataObj.yAxisData = data.yAxisData;
            }

            return dataObj;
        }

        /************************************************ Utility functions ******************************************************/

        /**highlightItems
         *
         * highlights items on the svg element
         * @params items, svg
         * @returns {{}}
         */

    }, {
        key: 'highlightItem',
        value: function highlightItem(items, tag, highlightIndex, highlightUri) {
            var chart = this,
                svg = chart.svg;

            //TODO remove if statements
            if (highlightIndex >= 0) {
                if (chart.config.type === 'pie') {
                    //set all circles stroke width to 0
                    svg.select('.pie-container').selectAll(tag).attr('stroke', chart._vars.pieBorder).attr('stroke-width', 1);
                    //highlight necessary pie slices
                    svg.select('.pie-container').selectAll(tag).filter('.highlight-class-' + highlightIndex).attr('stroke', chart._vars.highlightBorderColor).attr('stroke-width', chart._vars.highlightBorderWidth);
                }
                if (chart.config.type === 'scatterplot') {
                    //set all circles stroke width to 0
                    svg.select('.scatter-container').selectAll(tag).attr('stroke-width', 0);
                    //highlight necessary scatter dots
                    svg.select('.scatter-container').selectAll(tag).filter('.scatter-circle-' + highlightIndex).attr('stroke', chart._vars.highlightBorderColor).attr('stroke-width', chart._vars.highlightBorderWidth);
                }
            } else if (highlightUri) {
                if (chart.config.type === 'bar') {
                    //set all bars stroke width to 0
                    svg.select('.bar-container').selectAll(tag).attr('stroke', 0).attr('stroke-width', 0);
                    //highlight necessary bars
                    svg.select('.bar-container').selectAll('.highlight-class-' + highlightUri).attr('stroke', chart._vars.highlightBorderColor).attr('stroke-width', chart._vars.highlightBorderWidth);
                }
                if (chart.config.type === 'line' || chart.config.type === 'area') {
                    //set all circles stroke width to 0
                    svg.select('.line-container').selectAll(tag).attr('stroke', 0).attr('stroke-width', 0);
                    //highlight necessary cirlces
                    svg.select('.line-container').selectAll(tag).filter('.highlight-class-' + highlightUri).attr('stroke', chart._vars.highlightBorderColor).attr('stroke-width', chart._vars.highlightBorderWidth);
                }
            } else {
                console.log('need to pass highlight index to highlight item');
            }
        }

        /**
        *@desc Removes highlights that were applied with related insights
        *
        */

    }, {
        key: 'removeHighlight',
        value: function removeHighlight() {
            var chart = this,
                svg = chart.svg;
            if (chart.config.type === 'pie') {
                //set all circles stroke width to 0
                svg.select('.pie-container').selectAll('path').attr('stroke', chart._vars.pieBorder).attr('stroke-width', 0);
            }
            if (chart.config.type === 'scatterplot') {
                svg.select('.scatter-container').selectAll('circle').attr('stroke-width', 0);
            }
            if (chart.config.type === 'bar') {
                svg.select('.bar-container').selectAll('rect').attr('stroke', 0).attr('stroke-width', 0);
            }
            if (chart.config.type === 'line' || chart.config.type === 'area') {
                svg.select('.line-container').selectAll('circle').attr('stroke', 0).attr('stroke-width', 0);
            }
        }
    }]);

    return jvCharts;
}();

function jvFormatValue(val, formatType) {
    if (!isNaN(val)) {
        var formatNumber = d3.format('.0f');

        if (formatType === 'billions') {
            return formatNumber(val / 1e9) + 'B';
        } else if (formatType === 'millions') {
            return formatNumber(val / 1e6) + 'M';
        } else if (formatType === 'thousands') {
            return formatNumber(val / 1e3) + 'K';
        } else if (formatType === 'decimals') {
            formatNumber = d3.format('.2f');
            return formatNumber(val);
        } else if (formatType === 'nodecimals') {
            return formatNumber(val);
        } else if (formatType === 'percent') {
            var p = Math.max(0, d3.precisionFixed(0.05) - 2),
                expression = d3.format('.' + p + '%');
            return expression(val);
        } else if (formatType === '') {
            return val;
        }

        if (val === 0) {
            return 0;
        }

        if (Math.abs(val) >= 1000000000) {
            //Billions
            return formatNumber(val / 1e9) + 'B';
        } else if (Math.abs(val) >= 1000000) {
            //Millions
            return formatNumber(val / 1e6) + 'M';
        } else if (Math.abs(val) >= 1000) {
            //Thousands
            return formatNumber(val / 1e3) + 'K';
        } else if (Math.abs(val) <= 10) {
            //2 decimals
            formatNumber = d3.format('.2f');
        }
        return formatNumber(val);
    }
    return val;
}

/**
 * @param the set of values that you want to format uniformly
 * @return '' the level of formatting for the group of data
 * Problem with jvFormatValue function is that if you pass in values 10, 20... 90, 100, 1120, 120
 * you will get the formats 10.00, 20.00 .... 100, 110, 120 when you want 10, 20, ... 100, 110
 * --Format the value based off of the highest number in the group
 */
function jvFormatValueType(valueArray, dataType) {
    if (valueArray != null && dataType !== 'STRING') {
        var max = Math.max.apply(null, valueArray),

        //After getting the max, check the min
        min = Math.min.apply(null, valueArray),
            range = max - min,
            incrememnt = Math.abs(Math.round(range / 10)); //10 being the number of axis labels to show

        if (Math.abs(incrememnt) >= 1000000000) {
            return 'billions';
        } else if (Math.abs(incrememnt) >= 1000000) {
            return 'millions';
        } else if (Math.abs(incrememnt) >= 1000) {
            return 'thousands';
        } else if (Math.abs(incrememnt) <= 10) {
            return 'decimals';
        } else if (Math.abs(incrememnt) >= 10) {
            return 'nodecimals';
        }
    }
    return '';
}

/**getFormatExpression
 *
 * @desc returns the d3 format expression for a given option
 * @params option
 * @returns string expression
 */
function getFormatExpression(option) {
    var expression = '',
        p = void 0;
    if (option === 'currency') {
        expression = d3.format('$,');
    }
    if (option === 'fixedCurrency') {
        expression = d3.format('($.2f');
    }
    if (option === 'percent') {
        p = Math.max(0, d3.precisionFixed(0.05) - 2);
        expression = d3.format('.' + p + '%');
    }
    if (option === 'millions') {
        p = d3.precisionPrefix(1e5, 1.3e6);
        expression = d3.formatPrefix('.' + p, 1.3e6);
    }
    if (option === 'commas') {
        expression = d3.format(',.0f');
    }
    if (option === 'none' || option === '') {
        expression = d3.format('');
    }
    if (option === 'displayValues') {
        expression = d3.format(',.2f');
    }

    return expression;
}

/**getToggledData
 *
 * Gets the headers of the data to be drawn and filters the data based on that
 * @params chartData, dataHeaders
 */
function getToggledData(data, dataHeaders) {
    var legendToggleArray = getLegendElementToggleArray(dataHeaders, data.legendData),
        newData = JSON.parse(JSON.stringify(data.chartData));
    if (legendToggleArray) {
        for (var i = 0; i < data.chartData.length; i++) {
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = legendToggleArray[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var toggleKey = _step12.value;

                    if (toggleKey.toggle === false) {
                        delete newData[i][toggleKey.element];
                    }
                }
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }
        }
    }
    return newData;
}

/**
 * @name getLegendElementToggleArray
 * @desc Gets an array of legend elements with true/false tags for if toggled
 * @param {any} selectedHeaders - headers selected by user
 * @param {any} allHeaders - all available headers in the visual
 * @returns {array} - array of legend elements
 */
function getLegendElementToggleArray(selectedHeaders, allHeaders) {
    var legendToggleArray = [];
    var _iteratorNormalCompletion13 = true;
    var _didIteratorError13 = false;
    var _iteratorError13 = undefined;

    try {
        for (var _iterator13 = allHeaders[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var header = _step13.value;

            legendToggleArray.push({ element: header });
        }
    } catch (err) {
        _didIteratorError13 = true;
        _iteratorError13 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion13 && _iterator13.return) {
                _iterator13.return();
            }
        } finally {
            if (_didIteratorError13) {
                throw _iteratorError13;
            }
        }
    }

    var _iteratorNormalCompletion14 = true;
    var _didIteratorError14 = false;
    var _iteratorError14 = undefined;

    try {
        for (var _iterator14 = legendToggleArray[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
            var toggleKey = _step14.value;
            var _iteratorNormalCompletion15 = true;
            var _didIteratorError15 = false;
            var _iteratorError15 = undefined;

            try {
                for (var _iterator15 = selectedHeaders[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                    var _header = _step15.value;

                    if (toggleKey.element === _header) {
                        toggleKey.toggle = true;
                        continue;
                    }
                }
            } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion15 && _iterator15.return) {
                        _iterator15.return();
                    }
                } finally {
                    if (_didIteratorError15) {
                        throw _iteratorError15;
                    }
                }
            }

            if (toggleKey.toggle !== true) {
                toggleKey.toggle = false;
            }
        }
    } catch (err) {
        _didIteratorError14 = true;
        _iteratorError14 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion14 && _iterator14.return) {
                _iterator14.return();
            }
        } finally {
            if (_didIteratorError14) {
                throw _iteratorError14;
            }
        }
    }

    return legendToggleArray;
}

/**
 * generateLegendElements
 *
 * @param {any} chart - chart object
 * @param {any} legendData -legend data for visual
 * @param {any} drawFunc - redraw function for visual
 * @returns {object} - legend rectangles
 */
function generateLegendElements(chart, legendData, drawFunc) {
    var svg = chart.svg,
        container = chart.config.container,
        legend = void 0,
        legendRow = 0,
        legendColumn = 0,
        legendDataLength = legendData.length,
        legendElementToggleArray = void 0,
        legendRectangles = void 0,
        legendText = void 0;

    if (!chart._vars.legendIndex) {
        chart._vars.legendIndex = 0;
    }

    if (!chart._vars.legendIndexMax) {
        chart._vars.legendIndexMax = Math.floor(legendDataLength / chart._vars.legendMax - 0.01);
    }

    //if legend headers don't exist, set them equal to legend data
    if (!chart._vars.legendHeaders && !chart._vars.seriesFlipped) {
        chart._vars.legendHeaders = JSON.parse(JSON.stringify(legendData));
    } else if (!chart._vars.flippedLegendHeaders && chart._vars.seriesFlipped) {
        chart._vars.flippedLegendHeaders = JSON.parse(JSON.stringify(legendData));
    }
    //Set legend element toggle array based on if series is flipped
    if (!chart._vars.seriesFlipped) {
        legendElementToggleArray = getLegendElementToggleArray(chart._vars.legendHeaders, legendData);
    } else {
        legendElementToggleArray = getLegendElementToggleArray(chart._vars.flippedLegendHeaders, legendData);
    }

    legend = svg.append('g').attr('class', 'legend');

    //Adding colored rectangles to the legend
    legendRectangles = legend.selectAll('rect').data(legendData).enter().append('rect').attr('class', 'legendRect').attr('x', function (d, i) {
        var legendPos = void 0;
        if (i % (chart._vars.legendMax / 3) === 0 && i > 0) {
            legendColumn = 0;
        }
        legendPos = 200 * legendColumn;
        legendColumn++;
        return legendPos;
    }).attr('y', function (d, i) {
        if (i % (chart._vars.legendMax / 3) === 0 && i > 0) {
            legendRow++;
        }
        if (i % chart._vars.legendMax === 0 && i > 0) {
            legendRow = 0;
        }
        return container.height + 10 + 15 * (legendRow + 1) - 5; //Increment row when column limit is reached
    }).attr('width', chart._vars.gridSize).attr('height', chart._vars.gridSize).attr('fill', function (d, i) {
        return getColors(chart._vars.color, i, legendData[i]);
    }).attr('display', function (d, i) {
        if (i >= chart._vars.legendIndex * chart._vars.legendMax && i <= chart._vars.legendIndex * chart._vars.legendMax + (chart._vars.legendMax - 1)) {
            return 'all';
        }
        return 'none';
    }).attr('opacity', function (d, i) {
        if (!legendElementToggleArray) {
            return '1';
        }
        if (legendElementToggleArray[i].toggle === true) {
            return '1';
        }
        return '0.2';
    });

    legendRow = 0;
    legendColumn = 0;

    //Adding text labels for each rectangle in legend
    legendText = legend.selectAll('text').data(legendData).enter().append('text').attr('class', function (d, i) {
        return 'legendText editable editable-text editable-content editable-legend-' + i;
    }).attr('x', function (d, i) {
        if (i % (chart._vars.legendMax / 3) === 0 && i > 0) {
            legendColumn = 0;
        }
        var legendPos = 200 * legendColumn;
        legendColumn++;
        return legendPos + 17;
    }).attr('y', function (d, i) {
        if (i % (chart._vars.legendMax / 3) === 0 && i > 0) {
            legendRow++;
        }
        if (i % chart._vars.legendMax === 0 && i > 0) {
            legendRow = 0;
        }
        return container.height + 10 + 15 * (legendRow + 1); //Increment row when column limit is reached
    }).attr('text-anchor', 'start').attr('dy', '0.35em') //Vertically align with node
    .attr('fill', chart._vars.fontColor).attr('font-size', chart._vars.fontSize).attr('display', function (d, i) {
        if (i >= chart._vars.legendIndex * chart._vars.legendMax && i <= chart._vars.legendIndex * chart._vars.legendMax + (chart._vars.legendMax - 1)) {
            return 'all';
        }
        return 'none';
    }).text(function (d, i) {
        var elementName = legendData[i];
        if (chart.config.type === 'gantt') {
            elementName = legendData[i].slice(0, -5); //Removing last 5 characters of legend label---i.e plannedSTART -> planned
        }
        if (elementName.length > 20) {
            return elementName.substring(0, 19) + '...';
        }
        return elementName;
    });

    //Adding info box to legend elements when hovering over
    legendText.data(legendData).append('svg:title').text(function (d) {
        return d;
    });

    //Only create carousel if the number of elements exceeds one legend "page"
    if (chart._vars.legendIndexMax > 0) {
        createCarousel(chart, legendData, drawFunc);
    }
    //Centers the legend in the panel
    if (legend) {
        var legendWidth = legend.node().getBBox().width;
        legend.attr('transform', 'translate(' + (container.width - legendWidth) / 2 + ', 30)');
    }

    return legendRectangles;
}

/**updateDataFromLegend
 *
 * Returns a list of data headers that should be displayed in viz
 * based off what is toggled on/off in legend
 * @params legendData
 */
function updateDataFromLegend(legendData) {
    var data = [],
        legendElement = legendData[0];
    var _iteratorNormalCompletion16 = true;
    var _didIteratorError16 = false;
    var _iteratorError16 = undefined;

    try {
        for (var _iterator16 = legendElement[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
            var ele = _step16.value;

            if (ele.attributes.opacity.value !== '0.2') {
                //If not white, add it to the updated data array
                data.push(ele.__data__);
            }
        }
    } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion16 && _iterator16.return) {
                _iterator16.return();
            }
        } finally {
            if (_didIteratorError16) {
                throw _iteratorError16;
            }
        }
    }

    return data;
}

/**createCarousel
 *
 * Draws the horizontal legend carousel
 * @params chart, legendData, drawFunc
 */
function createCarousel(chart, legendData, drawFunc) {
    var svg = chart.svg,
        container = chart.config.container,
        legendPolygon = void 0;

    //Adding carousel to legend
    svg.selectAll('.legend-carousel').remove();
    svg.selectAll('#legend-text-index').remove();

    legendPolygon = svg.append('g').attr('class', 'legend-carousel');

    //Creates left navigation arrow for carousel
    legendPolygon.append('polygon').attr('id', 'leftChevron').attr('class', 'pointer-cursor').style('fill', chart._vars.legendArrowColor).attr('transform', 'translate(0,0)').attr('points', '0,7.5, 15,0, 15,15').on('click', function () {
        if (chart._vars.legendIndex >= 1) {
            chart._vars.legendIndex--;
        }
        svg.selectAll('.legend').remove();
        var legendElements = generateLegendElements(chart, legendData, drawFunc);
        attachClickEventsToLegend(chart, legendElements, drawFunc, legendData);
    }).attr({
        display: function display() {
            if (chart._vars.legendIndex === 0) {
                return 'none';
            }
            return 'all';
        }
    });

    //Creates page number for carousel navigation
    legendPolygon.append('text').attr('id', 'legend-text-index').attr('x', 35).attr('y', 12.5).style('text-anchor', 'start').style('font-size', chart._vars.fontSize).text(function () {
        return chart._vars.legendIndex + 1 + ' / ' + (chart._vars.legendIndexMax + 1);
    }).attr({
        display: function display() {
            if (chart._vars.legendIndexMax === 0) {
                return 'none';
            }
            return 'all';
        }
    });

    //Creates right navigation arrow for carousel
    legendPolygon.append('polygon').attr('id', 'rightChevron').attr('class', 'pointer-cursor').style('fill', chart._vars.legendArrowColor).attr('transform', 'translate(85,0)').attr('points', '15,7.5, 0,0, 0,15').on('click', function () {
        if (chart._vars.legendIndex < chart._vars.legendIndexMax) {
            chart._vars.legendIndex++;
        }
        svg.selectAll('.legend').remove();
        var legendElements = generateLegendElements(chart, legendData, drawFunc);
        attachClickEventsToLegend(chart, legendElements, drawFunc, legendData);
    }).attr({
        display: function display() {
            if (chart._vars.legendIndex === chart._vars.legendIndexMax) {
                return 'none';
            }
            return 'all';
        }
    });

    //Centers the legend polygons in the panel
    if (legendPolygon) {
        var legendPolygonWidth = legendPolygon.node().getBBox().width;
        legendPolygon.attr('transform', 'translate(' + (container.width - legendPolygonWidth) / 2 + ',' + (container.height + 105) + ')');
    }
}

/**getPlotData
 *
 * Returns only data values to be plotted; input is the data object
 * @params objectData, chart
 */
function getPlotData(objectData, chart) {
    var data = [],
        objDataNew = JSON.parse(JSON.stringify(objectData)); //Copy of barData
    var _iteratorNormalCompletion17 = true;
    var _didIteratorError17 = false;
    var _iteratorError17 = undefined;

    try {
        for (var _iterator17 = objDataNew[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var objEle = _step17.value;

            var group = [];
            var _iteratorNormalCompletion18 = true;
            var _didIteratorError18 = false;
            var _iteratorError18 = undefined;

            try {
                for (var _iterator18 = chart.currentData.legendData[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                    var legendEle = _step18.value;

                    if (typeof objEle[legendEle] !== 'undefined') {
                        group.push(objEle[legendEle]);
                    }
                }
            } catch (err) {
                _didIteratorError18 = true;
                _iteratorError18 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion18 && _iterator18.return) {
                        _iterator18.return();
                    }
                } finally {
                    if (_didIteratorError18) {
                        throw _iteratorError18;
                    }
                }
            }

            data.push(group);
        }
    } catch (err) {
        _didIteratorError17 = true;
        _iteratorError17 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion17 && _iterator17.return) {
                _iterator17.return();
            }
        } finally {
            if (_didIteratorError17) {
                throw _iteratorError17;
            }
        }
    }

    return data;
}

/**getPosCalculations
 *Holds the logic for positioning all bars on a bar chart (depends on toolData)
 *
 * @params svg, chartData, options, xAxisData, yAxisData, container
 * @returns {{}}
 */
function getPosCalculations(chartData, _vars, xAxisData, yAxisData, container, chart) {
    var x = jvCharts.getAxisScale('x', xAxisData, container, _vars),
        y = jvCharts.getAxisScale('y', yAxisData, container, _vars),
        scaleFactor = 1,
        data = [],
        size = 0,
        positionFunctions = {};

    for (var item in chart.currentData.dataTable) {
        if (item !== 'label' && item.indexOf('tooltip') === -1) {
            size++;
        }
    }

    var _iteratorNormalCompletion19 = true;
    var _didIteratorError19 = false;
    var _iteratorError19 = undefined;

    try {
        for (var _iterator19 = chartData[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
            var chartEle = _step19.value;

            var val = [];
            for (var key in chartEle) {
                if (chartEle.hasOwnProperty(key)) {
                    val.push(chartEle[key]);
                }
            }
            data.push(val.slice(1, chartEle.length));
        }
    } catch (err) {
        _didIteratorError19 = true;
        _iteratorError19 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion19 && _iterator19.return) {
                _iterator19.return();
            }
        } finally {
            if (_didIteratorError19) {
                throw _iteratorError19;
            }
        }
    }

    if (_vars.rotateAxis === true && _vars.stackToggle === true) {
        positionFunctions.startx = function () {
            return 0;
        };
        positionFunctions.starty = function () {
            return 0;
        };
        positionFunctions.startwidth = function () {
            return 0;
        };
        positionFunctions.startheight = function () {
            return y.bandwidth() * 0.95;
        };
        positionFunctions.x = function (d, i, j) {
            var increment = 0; //Move the x up by the values that come before it
            for (var k = i - 1; k >= 0; k--) {
                if (!isNaN(j[k].__data__)) {
                    increment += j[k].__data__;
                }
            }
            return x(increment) === 0 ? 1 : x(increment);
        };
        positionFunctions.y = function () {
            return 0;
        };
        positionFunctions.width = function (d) {
            return Math.abs(x(0) - x(d));
        };
        positionFunctions.height = function () {
            return y.bandwidth() * 0.95;
        };
    } else if (_vars.rotateAxis === true && _vars.stackToggle === false) {
        positionFunctions.startx = function () {
            return 0;
        };
        positionFunctions.starty = function (d, i) {
            return y.bandwidth() / size * i;
        };
        positionFunctions.startwidth = function () {
            return 0;
        };
        positionFunctions.startheight = function () {
            return y.bandwidth() / size * 0.95 * scaleFactor;
        };
        positionFunctions.x = function (d) {
            return x(0) - x(d) > 0 ? x(d) : x(0);
        };
        positionFunctions.y = function (d, i) {
            return y.bandwidth() / size * i;
        };
        positionFunctions.width = function (d) {
            return Math.abs(x(0) - x(d));
        };
        positionFunctions.height = function () {
            return y.bandwidth() / size * 0.95 * scaleFactor;
        };
    } else if (_vars.rotateAxis === false && _vars.stackToggle === true) {
        positionFunctions.startx = function () {
            return 0;
        };
        positionFunctions.starty = function () {
            return container.height;
        };
        positionFunctions.startwidth = function () {
            return x.bandwidth() * 0.95 * scaleFactor;
        };
        positionFunctions.startheight = function () {
            return 0;
        };
        positionFunctions.x = function () {
            return 0;
        };
        positionFunctions.y = function (d, i, j) {
            var increment = 0; //Move the y up by the values that come before it
            for (var k = i - 1; k >= 0; k--) {
                if (!isNaN(j[k].__data__)) {
                    increment += j[k].__data__;
                }
            }
            return y(parseFloat(d) + increment);
        };
        positionFunctions.width = function () {
            return x.bandwidth() * 0.95 * scaleFactor;
        };
        positionFunctions.height = function (d) {
            return container.height - y(d);
        };
    } else if (_vars.rotateAxis === false && _vars.stackToggle === false) {
        positionFunctions.startx = function (d, i) {
            return x.bandwidth() / size * i;
        };
        positionFunctions.starty = function () {
            return container.height;
        };
        positionFunctions.startwidth = function () {
            return x.bandwidth() / size * 0.95;
        };
        positionFunctions.startheight = function () {
            return 0;
        };
        positionFunctions.x = function (d, i) {
            return x.bandwidth() / size * i;
        };
        positionFunctions.y = function (d) {
            return y(0) - y(d) > 0 ? y(d) : y(0);
        };
        positionFunctions.width = function () {
            return x.bandwidth() / size * 0.95;
        };
        positionFunctions.height = function (d) {
            return Math.abs(y(0) - y(d));
        };
    }
    return positionFunctions;
}

/**getColors
 *
 * gets the colors to apply to the specific chart
 * @params colorObj, index, label
 * @returns {{}}
 */
function getColors(colorObj, paramIndex, label) {
    var index = paramIndex,
        cleanedColors = void 0;

    //logic to return the color if the colorObj passed in
    //is an object with the label being the key
    if (typeof label !== 'undefined' && colorObj.hasOwnProperty(label) && colorObj[label]) {
        return colorObj[label];
    }

    if (!Array.isArray(colorObj)) {
        cleanedColors = [];
        for (var k in colorObj) {
            if (colorObj.hasOwnProperty(k)) {
                if (colorObj[k]) {
                    cleanedColors.push(colorObj[k]);
                }
            }
        }
    } else {
        cleanedColors = colorObj;
    }

    //logic to return a repeating set of colors assuming that
    //the user changed data (ex: flip series on bar chart)
    if (!cleanedColors[index]) {
        while (index > cleanedColors.length - 1) {
            index = index - cleanedColors.length;
        }
    }
    return cleanedColors[index];
}

function getAxisScale(whichAxis, axisData, container, _vars, paddingType) {
    var leftPadding = 0.4,
        rightPadding = 0.2,
        axisScale = void 0,
        axis = void 0,
        minDate = void 0,
        maxDate = void 0;

    if (paddingType === 'no-padding') {
        leftPadding = 0;
        rightPadding = 0;
    }

    whichAxis === 'x' ? axis = container.width : axis = container.height;

    if (axisData.dataType === 'DATE') {
        var _iteratorNormalCompletion20 = true;
        var _didIteratorError20 = false;
        var _iteratorError20 = undefined;

        try {
            for (var _iterator20 = axisData.values[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                var axisValue = _step20.value;

                axisValue = new Date(axisValue);
            }
        } catch (err) {
            _didIteratorError20 = true;
            _iteratorError20 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion20 && _iterator20.return) {
                    _iterator20.return();
                }
            } finally {
                if (_didIteratorError20) {
                    throw _iteratorError20;
                }
            }
        }

        maxDate = Math.max.apply(null, axisData.values);
        minDate = Math.min.apply(null, axisData.values);

        axisScale = d3.scaleTime().domain([new Date(minDate), new Date(maxDate)]).rangeRound([0, axis]);
    } else if (axisData.dataType === 'STRING') {
        axisScale = d3.scaleBand().domain(axisData.values).range([0, axis]).paddingInner(leftPadding).paddingOuter(rightPadding);
    } else if (axisData.dataType === 'NUMBER') {
        var domain = void 0;
        if (_vars.xReversed || _vars.yReversed) {
            if (_vars.xReversed && whichAxis === 'x' || whichAxis === 'y' && !_vars.yReversed) {
                domain = [axisData.max, axisData.min];
            }
            if (_vars.yReversed && whichAxis === 'y' || whichAxis === 'x' && !_vars.xReversed) {
                domain = [axisData.min, axisData.max];
            }
        } else {
            whichAxis === 'x' ? domain = [axisData.min, axisData.max] : domain = [axisData.max, axisData.min];
        }

        if (_vars.hasOwnProperty('axisType') && _vars.axisType === 'Logarithmic') {
            domain[1] = 0.1;
            axisScale = d3.scaleLog().base(10).domain(domain).rangeRound([0, axis]);
        } else {
            axisScale = d3.scaleLinear().domain(domain).rangeRound([0, axis]);
        }
    } else {
        console.error('Axis is not a valid data type');
        //throw new Error('Axis is not a valid data type');
    }
    return axisScale;
}

/************************************************ Data functions ******************************************************/

/**
 * @function
 * @param {string} label - The field that is checked for type
 * @param {Object} dataTableKeys - Object that contains the data type for each column of data
 */
function getDataTypeFromKeys(label, dataTableKeys) {
    var defaultType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'STRING';

    var type = defaultType;

    var _iteratorNormalCompletion21 = true;
    var _didIteratorError21 = false;
    var _iteratorError21 = undefined;

    try {
        for (var _iterator21 = dataTableKeys[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
            var key = _step21.value;

            //Replace underscores with spaces
            if (key.varKey.replace(/_/g, ' ') === label.replace(/_/g, ' ')) {
                if (key.hasOwnProperty('type')) {
                    type = key.type;
                    if (type === 'STRING') {
                        type = 'STRING';
                    } else if (type === 'DATE') {
                        type = 'DATE';
                    } else if (type === 'NUMBER') {
                        type = 'NUMBER';
                    } else {
                        type = 'NUMBER';
                    }
                    break;
                }
            }
        }
    } catch (err) {
        _didIteratorError21 = true;
        _iteratorError21 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion21 && _iterator21.return) {
                _iterator21.return();
            }
        } finally {
            if (_didIteratorError21) {
                throw _iteratorError21;
            }
        }
    }

    return type;
}

/**setBarLineLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setBarLineLegendData(data) {
    var legendArray = [];
    for (var item in data.dataTable) {
        if (data.dataTable.hasOwnProperty(item)) {
            if (item !== 'label') {
                legendArray.push(data.dataTable[item]);
            }
        }
    }
    return legendArray;
}

/**setChartColors
 *  cleans incoming colors for consistency
 *
 * @params colorArray, legendData
 * @returns object with colors
 */

function setChartColors(toolData, legendData, defaultColorArray) {
    //function handles 3 color inputs
    //toolData as an array in toolData
    //toolData as an object
    //toolData as 'none'
    //any other case will result in using defaultColorArray

    var colors = {},
        usedColors = [],
        unaccountedLegendElements = [],
        toolDataAsArray = void 0;

    //toolData is array
    if (Array.isArray(toolData)) {
        if (toolData.length > 0) {
            colors = createColorsWithDefault(legendData, toolData);
        } else {
            colors = createColorsWithDefault(legendData, defaultColorArray);
        }
    } else if (toolData === Object(toolData)) {
        var _iteratorNormalCompletion22 = true;
        var _didIteratorError22 = false;
        var _iteratorError22 = undefined;

        try {
            for (var _iterator22 = legendData[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                var legendEle = _step22.value;

                if (toolData.hasOwnProperty(legendEle)) {
                    usedColors.push(toolData[legendEle]);
                } else {
                    unaccountedLegendElements.push(legendEle);
                }
            }
            //check if object has desired keys
        } catch (err) {
            _didIteratorError22 = true;
            _iteratorError22 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion22 && _iterator22.return) {
                    _iterator22.return();
                }
            } finally {
                if (_didIteratorError22) {
                    throw _iteratorError22;
                }
            }
        }

        if (usedColors.length === legendData.length) {
            colors = toolData;
        } else if (usedColors.length > 0) {
            toolDataAsArray = Object.values(toolData);
            if (toolDataAsArray.length > legendData.length) {
                colors = createColorsWithDefault(legendData, toolDataAsArray);
            } else {
                colors = createColorsWithDefault(legendData, defaultColorArray);
            }
        } else {
            toolDataAsArray = Object.values(toolData);
            if (toolDataAsArray.length > legendData.length) {
                colors = createColorsWithDefault(legendData, toolDataAsArray);
            } else {
                colors = createColorsWithDefault(legendData, defaultColorArray);
            }
        }
    } else {
        colors = createColorsWithDefault(legendData, defaultColorArray);
    }

    return colors;
}

function createColorsWithDefault(legendData, colors) {
    var mappedColors = {},
        count = 0;
    var _iteratorNormalCompletion23 = true;
    var _didIteratorError23 = false;
    var _iteratorError23 = undefined;

    try {
        for (var _iterator23 = legendData[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
            var legendEle = _step23.value;

            if (count > colors.length - 1) {
                count = 0;
            }
            mappedColors[legendEle] = colors[count];
            count++;
        }
    } catch (err) {
        _didIteratorError23 = true;
        _iteratorError23 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion23 && _iterator23.return) {
                _iterator23.return();
            }
        } finally {
            if (_didIteratorError23) {
                throw _iteratorError23;
            }
        }
    }

    return mappedColors;
}

/**cleanToolData
 *  cleans incoming toolData for consistency
 *
 * @param toolData
 * @returns object with tooldata
 */
function cleanToolData() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var editOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var data = options || {};

    if (!data.hasOwnProperty('rotateAxis')) {
        data.rotateAxis = false;
    }
    if (data.hasOwnProperty('stackToggle')) {
        if (data.stackToggle === 'stack-data' || data.stackToggle === true) {
            data.stackToggle = true;
        } else {
            data.stackToggle = false;
        }
    } else {
        data.stackToggle = false;
    }
    if (data.hasOwnProperty('colors')) {
        data.color = data.colors;
    }
    if (!data.hasOwnProperty('thresholds')) {
        data.thresholds = [];
    }

    //These are used in setting dynamic margins on the y Axis in jvCharts
    if (editOptions && editOptions.hasOwnProperty('yAxis') && editOptions.yAxis.hasOwnProperty('editable-text-size')) {
        data.yLabelFontSize = editOptions.yAxis['editable-text-size'];
        data.yLabelFormat = editOptions.yAxis['editable-num-format'];
    }
    return data;
}

function getMaxWidthForAxisData(axis, axisData, _vars, dimensions, margin, chartDiv) {
    var maxAxisText = '',
        formatType = void 0,
        dummySVG = void 0,
        axisDummy = void 0,
        width = void 0;
    //Dynamic left margin for charts with y axis
    if (_vars.rotateAxis) {
        //get length of longest text label and make the axis based off that
        var maxString = '',
            height = parseInt(dimensions.height, 10) - margin.top - margin.bottom;

        //check if labels should be shown
        if (height !== 0 && height / axisData.values.length < parseInt(_vars.fontSize, 10)) {
            axisData.hideValues = true;
        } else {
            var _iteratorNormalCompletion24 = true;
            var _didIteratorError24 = false;
            var _iteratorError24 = undefined;

            try {
                for (var _iterator24 = axisData.values[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                    var axisValue = _step24.value;

                    var currentStr = axisValue.toString();
                    if (currentStr.length > maxString.length) {
                        maxString = currentStr;
                    }
                }
            } catch (err) {
                _didIteratorError24 = true;
                _iteratorError24 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion24 && _iterator24.return) {
                        _iterator24.return();
                    }
                } finally {
                    if (_didIteratorError24) {
                        throw _iteratorError24;
                    }
                }
            }

            maxAxisText = maxString;
        }
    } else if (!!_vars.yLabelFormat || !!_vars.xLabelFormat) {
        var labelFormat = _vars.yLabelFormat,
            expression = void 0;
        if (axis === 'x') {
            labelFormat = _vars.xLabelFormat;
        }

        formatType = jvFormatValueType(axisData.values);
        expression = getFormatExpression(labelFormat);

        if (expression !== '') {
            maxAxisText = expression(axisData.max);
        } else {
            maxAxisText = jvFormatValue(axisData.max);
        }
    } else {
        formatType = jvFormatValueType(axisData.values);
        if (!axisData.hasOwnProperty('max')) {
            var maxLength = 0;
            var _iteratorNormalCompletion25 = true;
            var _didIteratorError25 = false;
            var _iteratorError25 = undefined;

            try {
                for (var _iterator25 = axisData.values[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
                    var _axisValue = _step25.value;

                    if (_axisValue && _axisValue.length > maxLength) {
                        maxLength = _axisValue.length;
                        maxAxisText = _axisValue;
                    }
                }
            } catch (err) {
                _didIteratorError25 = true;
                _iteratorError25 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion25 && _iterator25.return) {
                        _iterator25.return();
                    }
                } finally {
                    if (_didIteratorError25) {
                        throw _iteratorError25;
                    }
                }
            }
        } else {
            maxAxisText = jvFormatValue(axisData.max, formatType);
        }
    }

    //if (type === 'heatmap') {
    ////also need to check width of label
    //if (maxAxisText.length < axisData.label.length + 5) {
    ////need added space
    //if (axis === 'x') {
    //maxAxisText = axisData.label;
    //} else {
    //maxAxisText = axisData.label + 'Extra';
    //}
    //}
    //}

    //Create dummy svg to place max sized text element on
    dummySVG = chartDiv.append('svg').attr('class', 'dummy-svg');

    //Create dummy text element
    axisDummy = dummySVG.append('text').attr('font-size', function () {
        if (axis === 'y' && _vars.yLabelFontSize !== 'none') {
            return _vars.yLabelFontSize;
        }
        if (axis === 'x' && _vars.xLabelFontSize !== 'none') {
            return _vars.xLabelFontSize;
        }
        return _vars.fontSize;
    }).attr('x', 0).attr('y', 0).text(maxAxisText);

    //Calculate the width of the dummy text
    width = axisDummy.node().getBBox().width;
    //Remove the svg and text element
    chartDiv.select('.dummy-svg').remove();
    return width;
}

function getDisplayValuesElement(object, dataTableAlign, type) {
    var valuesArray = [];

    if (type === 'bar' || type === 'pie' || type === 'line' || type === 'area') {
        for (var key in dataTableAlign) {
            if (dataTableAlign.hasOwnProperty(key)) {
                if (key.indexOf('value') > -1) {
                    valuesArray.push(object[dataTableAlign[key]]);
                }
            }
        }
    } else {
        for (var _key3 in object) {
            if (object.hasOwnProperty(_key3)) {
                valuesArray.push(object[_key3]);
            }
        }
    }
    return valuesArray;
}

/**getZScale
 *
 * gets the scale for the z axis
 * @params zAxisData, container, padding
 * @returns {{}}
 */
function getZScale(zAxisData, container, _vars) {
    var zAxisScale = d3.scaleLinear().domain([d3.min(zAxisData.values), d3.max(zAxisData.values)]).rangeRound([_vars.NODE_MIN_SIZE, _vars.NODE_MAX_SIZE]).nice();
    return zAxisScale;
}

/**generateEventGroups
 *
 *
 * @params chartContainer, barData, chart
 */
function generateEventGroups(chartContainer, barData, chart) {
    var container = chart.config.container,
        dataToPlot = jvCharts.getPlotData(barData, chart),
        eventGroups = void 0;

    //Invisible rectangles on screen that represent bar groups. Used to show/hide tool tips on hover
    eventGroups = chartContainer.data(dataToPlot).enter().append('rect').attr('class', 'event-rect')
    //sets the x position of the bar
    .attr('x', function (d, i) {
        return chart._vars.rotateAxis ? 0 : container.width / barData.length * i;
    })
    //sets the y position of the bar
    .attr('y', function (d, i) {
        return chart._vars.rotateAxis ? container.height / barData.length * i : 0;
    })
    //sets the width position of the bar
    .attr('width', function () {
        return chart._vars.rotateAxis ? container.width : container.width / barData.length;
    })
    //sets the height position of the bar
    .attr('height', function () {
        return chart._vars.rotateAxis ? container.height / barData.length : container.height;
    }).attr('fill', 'transparent').attr('class', function (d, i) {
        return 'event-rect editable-bar bar-col-' + String(barData[i][chart.currentData.dataTable.label]).replace(/\s/g, '_').replace(/\./g, '_dot_');
    });

    return eventGroups;
}

function generateThresholdLegend(chart) {
    var svg = chart.svg,
        colorLegendData = [],
        gLegend = void 0,
        legend = void 0;
    if (chart._vars.thresholds !== 'none') {
        for (var j = 0; j < Object.keys(chart._vars.thresholds).length; j++) {
            colorLegendData.push(chart._vars.thresholds[j].thresholdName);
        }
    }

    gLegend = svg.append('g').attr('class', 'thresholdLegendContainer');

    legend = gLegend.selectAll('.thresholdLegend').data(colorLegendData).enter().append('g').attr('class', 'thresholdLegend').attr('transform', function (d, i) {
        var height = 19,
            offset = 19 * colorLegendData.length / 2,
            horz = -2 * 12,
            vert = i * height - offset;
        return 'translate(' + horz + ',' + vert + ')';
    });

    legend.append('rect').attr('width', 12).attr('height', 12).style('fill', function (d, i) {
        return chart._vars.thresholds[i].thresholdColor;
    });

    legend.append('text').attr('x', 24).attr('y', 8).attr('font-size', '.75em').text(function (d) {
        return d;
    });

    //Centers the legend in the panel
    if (gLegend) {
        var legendWidth = gLegend.node().getBBox().width;
        gLegend.attr('transform', 'translate(' + (chart.config.container.width - legendWidth) + ',' + 10 * colorLegendData.length + ')');
    }
}

function attachClickEventsToLegend(chart, legendElements, drawFunc) {
    //Adding the click event to legend rectangles for toggling on/off
    legendElements.on('click', function () {
        var selectedRect = d3.select(this),
            dataHeaders = void 0;

        if (selectedRect._groups[0][0].attributes.opacity.value !== '0.2') {
            selectedRect.attr('opacity', '0.2');
        } else {
            selectedRect.attr('opacity', '1');
        }

        //Gets the headers of the data to be drawn
        dataHeaders = updateDataFromLegend(legendElements._groups);
        //Sets the legendData to the updated headers
        if (chart._vars.seriesFlipped) {
            chart._vars.flippedLegendHeaders = dataHeaders;
        } else {
            chart._vars.legendHeaders = dataHeaders;
        }

        //Plots the data
        chart._vars.transitionTime = 800; //Keep transition for toggling legend elements
        if (chart._vars.seriesFlipped) {
            chart[drawFunc](chart.flippedData);
        } else {
            chart[drawFunc](chart.data);
        }
        if (chart.applyEditMode) {
            chart.applyEditMode();
        }
    });
}

/**generateVerticalLegendElements
 *
 * Creates the legend elements--rectangles and labels
 * @params chart, legendData, drawFunc
 */
function generateVerticalLegendElements(chart, legendData, drawFunc) {
    var svg = chart.svg,
        legend = void 0,
        legendDataLength = legendData.length,
        legendElementToggleArray = void 0,
        legendRectangles = void 0,
        legendText = void 0;

    chart._vars.gridSize = 20;

    if (!chart._vars.legendIndex) {
        chart._vars.legendIndex = 0;
    }

    if (!chart._vars.legendIndexMax) {
        chart._vars.legendIndexMax = Math.floor(legendDataLength / chart._vars.legendMax - 0.01);
    }

    //Check to see if legend element toggle array needs to be set
    if (chart._vars.legendIndexMax >= 0) {
        if (!chart._vars.legendHeaders) {
            chart._vars.legendHeaders = JSON.parse(JSON.stringify(legendData));
        }

        legendElementToggleArray = getLegendElementToggleArray(chart._vars.legendHeaders, legendData);
    }

    legend = svg.append('g').attr('class', 'legend').attr('transform', 'translate(' + 18 + ',' + 20 + ')');

    //Adding colored rectangles to the legend
    legendRectangles = legend.selectAll('rect').data(legendData).enter().append('rect').attr('class', 'legendRect').attr('x', '3').attr('y', function (d, i) {
        return chart._vars.gridSize * (i % chart._vars.legendMax) * 1.1;
    }).attr('width', chart._vars.gridSize).attr('height', chart._vars.gridSize).attr('fill', function (d, i) {
        if (!legendElementToggleArray && !chart._vars.seriesFlipped || chart._vars.seriesFlipped && !legendElementToggleArray) {
            return getColors(chart._vars.color, i, legendData[i]);
        }
        if (!chart._vars.seriesFlipped && legendElementToggleArray[i].toggle === true || chart._vars.seriesFlipped && legendElementToggleArray[i].toggle === true) {
            return getColors(chart._vars.color, i, legendData[i]);
        }
        return chart._vars.emptyLegendSquare;
    }).attr('display', function (d, i) {
        if (i >= chart._vars.legendIndex * chart._vars.legendMax && i <= chart._vars.legendIndex * chart._vars.legendMax + (chart._vars.legendMax - 1)) {
            return 'all';
        }
        return 'none';
    }).attr('opacity', '1');

    //Adding text labels for each rectangle in legend
    legendText = legend.selectAll('text').data(legendData).enter().append('text').attr('class', function (d, i) {
        return 'legendText editable editable-text editable-content editable-legend-' + i;
    }).attr('x', chart._vars.gridSize + 7).attr('y', function (d, i) {
        return chart._vars.gridSize * (i % chart._vars.legendMax) * 1.1 + 10;
    }).attr('text-anchor', 'start').attr('dy', '0.35em') //Vertically align with node
    .attr('fill', chart._vars.fontColor).attr('font-size', chart._vars.fontSize).attr('display', function (d, i) {
        if (i >= chart._vars.legendIndex * chart._vars.legendMax && i <= chart._vars.legendIndex * chart._vars.legendMax + (chart._vars.legendMax - 1)) {
            return 'all';
        }
        return 'none';
    }).text(function (d, i) {
        var elementName = legendData[i];
        if (elementName.length > 20) {
            return elementName.substring(0, 19) + '...';
        }
        return elementName;
    });

    //Adding info box to legend elements when hovering over
    legendText.data(legendData).append('svg:title').text(function (d) {
        return d;
    });

    //Only create carousel if the number of elements exceeds one legend "page"
    if (chart._vars.legendIndexMax > 0) {
        createVerticalCarousel(chart, legendData, drawFunc);
    }

    return legendRectangles;
}

/**createVerticalCarousel
 *
 * Draws the vertical legend carousel
 * @params chart, legendData, drawFunc
 */
function createVerticalCarousel(chart, legendData, drawFunc) {
    var svg = chart.svg,
        legendPolygon = void 0;

    //Adding carousel to legend
    svg.selectAll('.legend-carousel').remove();
    svg.selectAll('#legend-text-index').remove();

    legendPolygon = svg.append('g').attr('class', 'legend-carousel');

    //Creates left navigation arrow for carousel
    legendPolygon.append('polygon').attr('id', 'leftChevron').attr('class', 'pointer-cursor').style('fill', chart._vars.legendArrowColor).attr('transform', 'translate(0,' + (chart._vars.legendMax * chart._vars.gridSize + 50) + ')').attr('points', '0,7.5, 15,0, 15,15').on('click', function () {
        if (chart._vars.legendIndex >= 1) {
            chart._vars.legendIndex--;
        }
        svg.selectAll('.legend').remove();
        var legendElements = generateVerticalLegendElements(chart, legendData, drawFunc);
        attachClickEventsToLegend(chart, legendElements, drawFunc, legendData);
    }).attr({
        display: function display() {
            if (chart._vars.legendIndex === 0) {
                return 'none';
            }
            return 'all';
        }
    });

    //Creates page number for carousel navigation
    legendPolygon.append('text').attr('id', 'legend-text-index').attr('x', 35).attr('y', 242.5).style('text-anchor', 'start').style('font-size', chart._vars.fontSize).text(function () {
        return chart._vars.legendIndex + 1 + ' / ' + (chart._vars.legendIndexMax + 1);
    }).attr({
        display: function display() {
            if (chart._vars.legendIndexMax === 0) {
                return 'none';
            }
            return 'all';
        }
    });

    //Creates right navigation arrow for carousel
    legendPolygon.append('polygon').attr('id', 'rightChevron').attr('class', 'pointer-cursor').style('fill', chart._vars.legendArrowColor).attr('transform', 'translate(85,' + (chart._vars.legendMax * chart._vars.gridSize + 50) + ')').attr('points', '15,7.5, 0,0, 0,15').on('click', function () {
        if (chart._vars.legendIndex < chart._vars.legendIndexMax) {
            chart._vars.legendIndex++;
        }
        svg.selectAll('.legend').remove();
        var legendElements = generateVerticalLegendElements(chart, legendData, drawFunc);
        attachClickEventsToLegend(chart, legendElements, drawFunc, legendData);
    }).attr({
        display: function display() {
            if (chart._vars.legendIndex === chart._vars.legendIndexMax) {
                return 'none';
            }
            return 'all';
        }
    });
}

//Bind functions to prototype or jvCharts object
jvCharts.getColors = getColors;
jvCharts.setBarLineLegendData = setBarLineLegendData;
jvCharts.createColorsWithDefault = createColorsWithDefault;
jvCharts.getZScale = getZScale;
jvCharts.getLegendElementToggleArray = getLegendElementToggleArray;
jvCharts.generateLegendElements = generateLegendElements;
jvCharts.updateDataFromLegend = updateDataFromLegend;
jvCharts.createCarousel = createCarousel;
jvCharts.generateThresholdLegend = generateThresholdLegend;
jvCharts.attachClickEventsToLegend = attachClickEventsToLegend;
jvCharts.generateVerticalLegendElements = generateVerticalLegendElements;
jvCharts.createVerticalCarousel = createVerticalCarousel;
jvCharts.getToggledData = getToggledData;
jvCharts.getPlotData = getPlotData;
jvCharts.getPosCalculations = getPosCalculations;
jvCharts.setBarLineLegendData = setBarLineLegendData;
jvCharts.jvFormatValue = jvFormatValue;
jvCharts.getFormatExpression = getFormatExpression;
jvCharts.generateEventGroups = generateEventGroups;
jvCharts.jvFormatValueType = jvFormatValueType;
jvCharts.getAxisScale = getAxisScale;
jvCharts.setChartColors = setChartColors;
jvCharts.getDataTypeFromKeys = getDataTypeFromKeys;
jvCharts.cleanToolData = cleanToolData;

module.exports = jvCharts;

},{"./jvTip.js":9}],5:[function(require,module,exports){
'use strict';
/***  jvComment ***/
'use-strict';
/**
* @name jvComment
* @desc Constructor for JV Comment - creates comments for a jv visualization and executes a callback for the comments to be saved
* @param {object} configObj - constructor object containing the jvChart and other options
* @return {undefined} - no return
*/

function jvComment(configObj) {
    'use strict';

    var commentObj = this;
    commentObj.chartDiv = configObj.chartDiv;
    commentObj.showComments = false;
    commentObj.comments = configObj.comments ? configObj.comments : {};
    commentObj.disabled = false;
    commentObj.drawCommentNodes();
    commentObj.onSaveCallback = configObj.onSaveCallback;
    commentObj.getMode = configObj.getMode;
}

jvComment.prototype.createMoveListener = createMoveListener;
jvComment.prototype.updatePosition = updatePosition;
jvComment.prototype.makeComment = makeComment;
jvComment.prototype.removeComment = removeComment;
jvComment.prototype.drawCommentNodes = drawCommentNodes;
jvComment.prototype.drawComment = drawComment;
jvComment.prototype.doubleClick = doubleClick;
jvComment.prototype.overlayDivPosition = overlayDivPosition;

/**
* @name createMoveListener
* @desc creates the mousemove listener to determine if the user moves or resizes a comment
* @param {object} commentNode - comment that the user clicked on
* @return {undefined} - no return
*/
function createMoveListener(commentNode) {
    var commentObj = this,
        timeMouseDown = new Date().getTime();
    commentObj.chartDiv.on('mousemove', function () {
        //mouse move happend too quickly, chrome bug
        var timeMouseMove = new Date().getTime(),
            node = commentNode.node(),
            mouse = d3.mouse(node),
            mouseOnChartDiv = d3.mouse(commentObj.chartDiv.node()),
            resizeNode;
        if (timeMouseDown + 10 > timeMouseMove) {
            return;
        }
        //set the moved node, so we know to do a mouse up event
        commentObj.moved = commentNode;

        //resize in the right corner of the comment
        if (commentNode.select('.comment-padding')._groups[0][0] && (mouse[0] + 15 > node.clientWidth && mouse[1] + 15 > node.clientHeight || commentObj.moved.mouse)) {
            if (!commentObj.moved.mouse) {
                resizeNode = commentNode.select('.comment-padding');
                resizeNode.style('width', 'auto');
                resizeNode.style('height', 'auto');
            }
            //set the mouse event so we can update the location on mouse up
            commentObj.moved.mouse = mouse;
        } else {
            //move the comment node around the visual
            if (commentNode._groups[0][0].nodeName === 'text') {
                commentObj.chartDiv.select('.commentbox-readonly').remove();
            }
            commentNode.style('left', mouseOnChartDiv[0] + 'px').style('top', mouseOnChartDiv[1] + 'px');
            commentNode.attr('x', mouseOnChartDiv[0]).attr('y', mouseOnChartDiv[1]);
        }
    });
}

/**
* @name updatePosition
* @desc determines whether the user dragged a comment on the screen or updated its size and then creates the appropriate save function
* @return {undefined} - no return
*/
function updatePosition() {
    var commentObj = this,
        nodeToUpdate = commentObj.moved._groups[0][0],
        nodeId = nodeToUpdate.id.split('node')[1],
        comment = commentObj.comments.list[nodeId],
        x = void 0,
        y = void 0;
    if (Array.isArray(commentObj.moved.mouse)) {
        comment.binding.width = commentObj.moved.mouse[0];
        comment.binding.height = commentObj.moved.mouse[1];
    } else {
        x = Math.round(nodeToUpdate.getAttribute('x'));
        y = Math.round(nodeToUpdate.getAttribute('y'));
        comment.binding = {
            'x': x,
            'y': y,
            'xChartArea': commentObj.chartDiv._groups[0][0].clientWidth,
            'yChartArea': commentObj.chartDiv._groups[0][0].clientHeight,
            'currentX': x,
            'currentY': y,
            'showAsMarker': comment.binding.showAsMarker,
            'height': comment.binding.height,
            'width': comment.binding.width
        };
    }

    commentObj.onSaveCallback(comment, nodeId, 'edit');
}

/**
* @name makeComment
* @desc creates the comment entry box on the screen and attaches listeners to the save delete and cancel options
* @param {object} event - event that holds the mouse position for where the user wants to place the comment
* @return {undefined} - no return
*/
function makeComment(event) {
    if (this.chartDiv.select('.commentbox')._groups[0][0] || this.chartDiv.select('.commentbox-edit')._groups[0][0]) {
        //dont create new comment
        return;
    }

    var commentObj = this,
        x = parseInt(d3.mouse(event)[0], 10),
        y = parseInt(d3.mouse(event)[1], 10),
        commentHeight = 145,
        commentWidth = 200,

    //calculate position of overlay div
    position = commentObj.overlayDivPosition(commentWidth, commentHeight, x, y),
        commentType = 'svgMain';

    commentObj.chartDiv.selectAll('.commentbox-readonly').remove();

    commentObj.showComments = false;
    commentObj.chartDiv.append('div').attr('class', 'commentbox').attr('id', 'commentbox').style('opacity', 1).html("<div class='title'><b>Add New Comment</b></div>" + "<textarea placeholder='Enter comment...' form='commentform' class='comment-textarea' style='width:155px; height: 90px;' name='comment' id = 'textarea1'></textarea>" + "<br><input type='checkBox' class='commentbox-display' id ='display'> Display as marker" + "<br><button class='commentbox-close' id ='cancel'><i class='fa fa-close'></i></button>" + "<button class='smss-btn commentbox-submit' id = 'submit'>Submit Comment</button>").style('position', 'absolute').style('left', position.x + 'px').style('top', position.y + 'px');

    //Autofocus on the text area
    document.getElementById('textarea1').focus();

    commentObj.chartDiv.selectAll('.commentbox').select('#cancel').on('click.delete', function () {
        commentObj.removeComment();
    });

    commentObj.chartDiv.selectAll('.commentbox').select('#submit').on('click.save', function () {
        var commentText = commentObj.chartDiv.select('#commentbox').select('#textarea1')._groups[0][0].value,
            showAsMarker = commentObj.chartDiv.select('#commentbox').select('#display')._groups[0][0].checked,
            newCommentObj = void 0;

        newCommentObj = {
            'commentText': commentText,
            'groupID': 'group0',
            'type': commentType,
            'binding': {
                'x': x,
                'y': y,
                'xChartArea': commentObj.chartDiv._groups[0][0].clientWidth,
                'yChartArea': commentObj.chartDiv._groups[0][0].clientHeight,
                'currentX': x,
                'currentY': y,
                'showAsMarker': showAsMarker ? 'true' : 'false',
                'height': false,
                'width': false
            }
        };
        commentObj.chartDiv.select('.commentbox').remove();
        if (isNaN(commentObj.comments.maxId)) {
            commentObj.comments.maxId = -1;
        }
        commentObj.onSaveCallback(newCommentObj, ++commentObj.comments.maxId, 'add');
    });
}

/**
* @name removeComment
* @desc function to remove comment entry box
* @return {undefined} - no return
*/
function removeComment() {
    var commentObj = this;
    commentObj.chartDiv.selectAll('.commentbox').remove();
}

/**
* @name drawCommentNodes
* @desc function to draw a all comments on the visual
* @return {undefined} - no return
*/
function drawCommentNodes() {
    var commentObj = this,
        comments = commentObj.comments.list;

    commentObj.chartDiv.selectAll('.min-comment').remove();

    for (var id in comments) {
        if (comments.hasOwnProperty(id)) {
            commentObj.drawComment(comments[id], id);
        }
    }
}

/**
* @name drawComment
* @desc function to draw a single comment on the visual
* @param {object} comment - data used to pain the comment
* @param {number} id - id of the specific comment
* @return {undefined} - no return
*/
function drawComment(comment, id) {
    if (typeof this.chartDiv._groups === 'undefined') {
        console.log('Comment data is in old format, will not display or chart div doesnt exist');
        return;
    }

    if (!comment.binding || !this.chartDiv._groups[0][0]) {
        console.log('Comment data is in old format, will not display or chart div doesnt exist');
        return;
    }

    var commentObj = this,
        chartDiv = commentObj.chartDiv,
        binding = comment.binding,
        chartAreaWidth = chartDiv._groups[0][0].clientWidth,
        chartAreaHeight = chartDiv._groups[0][0].clientHeight,
        x = binding.x / binding.xChartArea * chartAreaWidth,
        y = binding.y / binding.yChartArea * chartAreaHeight,
        styleString = '',
        text = '',
        resize = false;

    binding.currentX = binding.x / binding.xChartArea * chartAreaWidth;
    binding.currentY = binding.y / binding.yChartArea * chartAreaHeight;

    if (comment.binding.showAsMarker === 'false') {
        if (comment.binding.width && comment.binding.height) {
            styleString = "style='width: " + comment.binding.width + 'px; height: ' + comment.binding.height + "px'";
        }
        if (comment.commentText.indexOf('<iframe') > -1 || comment.commentText.indexOf('<img') > -1 || comment.commentText.indexOf('<svg') > -1) {
            //contains elents that should resize
            text = "<div class='comment-padding text'" + styleString + "><div class='user-comment'>" + comment.commentText + '</div></div>';
            resize = true;
        } else {
            text = '<div class="text editable editable-text editable-comment-' + id + '">' + comment.commentText + '<div/>';
        }
        chartDiv.append('div').attr('class', 'min-comment').attr('id', 'node' + id).style('opacity', 1).style('position', 'absolute')
        //.style("border", "1px solid black")
        .html(text).style('left', x + 'px').style('top', y + 'px').on('dblclick.comment', function () {
            //Edit text or delete the comment
            commentObj.doubleClick(this, x, y);
        });
        if (resize) {
            var parent = d3.select('.user-comment');
            rescale(parent, parent.node());
        }
    } else {
        chartDiv.select('svg').append('text').attr('class', 'min-comment').attr('id', 'node' + id).attr('fill', '#e6e6e6').attr('x', x).attr('y', y).attr('font-family', 'FontAwesome').attr('stroke', 'darkgray').attr('font-size', '15px').text('\uF0E5').attr('opacity', 1).on('dblclick.comment', function () {
            //Edit text or delete the comment
            commentObj.doubleClick(this, x, y);
        }).on('mouseenter.comment', function () {
            //Show hover over box when mouse enters node
            if (commentObj.showComments === false) {
                var commentText = '',
                    commentHeight = 80,
                    commentWidth = 185,
                    position = void 0;

                for (var j in commentObj.comments.list) {
                    if (Math.round(commentObj.comments.list[j].binding.currentX) === Math.round(this.x.baseVal[0].value)) {
                        if (Math.round(commentObj.comments.list[j].binding.currentY) === Math.round(this.y.baseVal[0].value)) {
                            commentText = commentObj.comments.list[j].commentText;
                            x = commentObj.comments.list[j].binding.currentX;
                            y = commentObj.comments.list[j].binding.currentY;
                        }
                    }
                }
                position = commentObj.overlayDivPosition(commentWidth, commentHeight, x, y);

                chartDiv.append('div').attr('class', 'commentbox-readonly').style('opacity', 1).style('position', 'absolute').html("<textarea readonly rows='4' cols='27' class='textarea' name='comment'>" + commentText + '</textarea>').style('left', position.x + 'px').style('top', position.y + 'px');
            }
        }).on('mouseout.comment', function () {
            //Remove hover over box when mouse moves away
            if (commentObj.showComments === false) {
                chartDiv.select('.commentbox-readonly').remove();
            }
        });
    }
}

/**
* @name rescale
* @desc sets the children of the ele param to 100 percent height and width
* @param {d3node} ele - node to start recursive function
* @param {htmlNode} commentNode - unused parent node that can be used to calcualte percent height and widths
* @return {undefined} - no return
*/
function rescale(ele, commentNode) {
    var node = ele.node(),
        width = 100,
        height = 100;
    //width = node.clientWidth / commentNode.clientWidth * 100;
    //height = node.clientHeight / commentNode.clientHeight * 100;
    //if (width > 100) {
    //width = 100;
    //}

    //if (height > 100) {
    //height = 100;
    //}

    ele.style('width', width + '%');
    ele.style('height', height + '%');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = node.childNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var child = _step.value;

            rescale(d3.select(child), commentNode);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

/**
* @name doubleClick
* @desc click function after the user clicks on an existing comment
* @param {object} commentNode - current comment that the user clicked
* @param {number} x - x position of the click event
* @param {number} y - y position of the click event
* @return {undefined} - no return
*/
function doubleClick(commentNode, x, y) {
    if (this.chartDiv.select('.commentbox-edit')._groups[0][0] || this.getMode() !== 'comment-mode') {
        //dont create new comment
        return;
    }
    var commentObj = this,
        chartDiv = commentObj.chartDiv,
        currentComment = commentNode.id.split('node')[1],
        commentText = commentObj.comments.list[currentComment].commentText,
        commentHeight = 145,
        commentWidth = 200,
        position = commentObj.overlayDivPosition(commentWidth, commentHeight, x, y);

    commentObj.showComments = false;
    chartDiv.selectAll('.commentbox-readonly').remove();
    chartDiv.selectAll('.commentbox-edit').remove();
    chartDiv.selectAll('.commentbox').remove();

    chartDiv.append('div').attr('class', 'commentbox-edit').style('opacity', 1).style('left', position.x + 'px').style('top', position.y + 'px').style('position', 'absolute').html("<div class='title'><b>Edit Comment</b></div>" + "<textarea id='edit' class='comment-textarea' style='width:155px; height: 90px;' name='comment'>" + commentText + '</textarea>' + "<br><input type='checkBox' class='commentbox-display' id ='display'> Display as marker" + "<br><button class='commentbox-close' id ='cancel-edit'><i class='fa fa-close'></i></button>" + "<button class='smss-btn' id ='delete'>Delete</button>" + "<button class='smss-btn' id = 'save'>Save</button>");

    chartDiv.select('.commentbox-edit').select('#display')._groups[0][0].checked = commentObj.comments.list[currentComment].binding.showAsMarker === 'true';

    chartDiv.selectAll('.commentbox-edit').select('#delete').on('click.delete', function () {
        chartDiv.select('.commentbox-edit').remove();
        chartDiv.select('.commentbox-readonly').remove();
        chartDiv.select('#node' + currentComment).attr('display', 'none');
        //redraw comment nodes with new indexes
        commentObj.onSaveCallback(commentObj.comments.list[currentComment], currentComment, 'remove');
    });

    chartDiv.selectAll('.commentbox-edit').select('#save').on('click.save', function () {
        var text = chartDiv.select('.commentbox-edit').select('#edit')._groups[0][0].value,
            showAsMarker = chartDiv.select('.commentbox-edit').select('#display')._groups[0][0].checked;
        commentObj.comments.list[currentComment].commentText = text;
        commentObj.comments.list[currentComment].binding.showAsMarker = showAsMarker ? 'true' : 'false';
        chartDiv.select('.commentbox-readonly').remove();
        chartDiv.select('.commentbox-edit').remove();
        commentObj.onSaveCallback(commentObj.comments.list[currentComment], currentComment, 'edit');
    });

    chartDiv.selectAll('.commentbox-edit').select('#cancel-edit').on('click.cancel-edit', function () {
        chartDiv.select('.commentbox-readonly').remove();
        chartDiv.select('.commentbox-edit').remove();
    });
}

/******************************* Utility functions **********************************************/
/**
* @name overlayDivPosition
* @desc function to determine the placement of the div on the visual
* @param {number} divWidth - width of the comment entry box
* @param {number} divHeight - height of the comment entry box
* @param {number} mouseX - x position of the click event
* @param {number} mouseY - y position of the click event
* @return {object} - position of div
*/
function overlayDivPosition(divWidth, divHeight, mouseX, mouseY) {
    var editObj = this,
        position = {
        x: mouseX,
        y: mouseY + 10
    };
    if (mouseX > parseInt(editObj.chartDiv.style('width'), 10) / 2) {
        position.x = mouseX - divWidth;
    }
    if (mouseY - divHeight - 10 > 0) {
        position.y = mouseY - divHeight - 10;
    }
    return position;
}

module.exports = jvComment;

},{}],6:[function(require,module,exports){
/***  jvEdit ***/
'use strict';

var editTemplate = require('./editOptionsTemplate.js');

/**
* @name jvEdit
* @desc Constructor for JV Edit - creates edits to a jv visualization and executes a callback for the edit options to be saved
* @param {object} configObj - constructor object containing the jvChart and other options
* @return {undefined} - no return
*/
function jvEdit(configObj) {
    var editObj = this;
    editObj.chartDiv = configObj.chartDiv;
    editObj.vizOptions = configObj.vizOptions ? configObj.vizOptions : {};
    editObj.chartDiv.selectAll('.edit-div').remove();
    editObj.editDiv = editObj.chartDiv.append('div').attr('class', 'edit-div');
    editObj.onSaveCallback = configObj.onSaveCallback;
}

jvEdit.prototype.displayEdit = displayEdit;
jvEdit.prototype.changeFontSize = changeFontSize;
jvEdit.prototype.submitEditMode = submitEditMode;
jvEdit.prototype.applyEditMode = applyEditMode;
jvEdit.prototype.applyAllEdits = applyAllEdits;
jvEdit.prototype.removeEdit = removeEdit;
jvEdit.prototype.overlayDivPosition = overlayDivPosition;

/**
* @name displayEdit
* @desc Displays the edit div, grabbing it from the template
* @param {array} mouse - mouse location of the click event, used to place the edit mode div on the visual
* @param {string} options - css class of clicked element, provides the options that are editable by edit mode
* @return {undefined} - no return
*/
function displayEdit(mouse, options) {
    var editObj = this,
        mouseX = mouse[0],
        mouseY = mouse[1],
        optionValues = [],
        itemToChange = '',
        editOptionElement,
        editHeight = parseFloat(editObj.editDiv.style('height')),
        editWidth = parseFloat(editObj.editDiv.style('width')),
        position;

    //return if you click on the same element twice, no need to display a second edit div if the current one is still open
    if (editObj.editOptions === options) {
        return;
    }
    editObj.editDiv.html('');
    editObj.editOptions = options;

    //assign html to editDiv (basically displays the div)
    editObj.editDiv.html(editTemplate);

    //optionValues - an array of strings.
    //String is the id to the element in the editDiv form.
    //This string contains the specific option that is being changed

    //itemToChange
    //String that is the class of the svg element to be changed on the viz itself
    editOptionElement = editObj.editDiv.select('#edit-option-element');

    //if statements to determine which edit options to display
    if (options.indexOf('editable-yAxis') >= 0) {
        editOptionElement.html('&nbsp;for Y Axis');
        editOptionElement.style('visibility', 'visible');
        itemToChange = 'yAxis';
    } else if (options.indexOf('editable-xAxis') >= 0) {
        editOptionElement.html('&nbsp;for X Axis');
        editOptionElement.style('visibility', 'visible');
        itemToChange = 'xAxis';
    } else if (options.indexOf('yLabel') >= 0) {
        editOptionElement.html('&nbsp;for Y Label');
        editOptionElement.style('visibility', 'visible');
        itemToChange = 'yLabel';
    } else if (options.indexOf('xLabel') >= 0) {
        editOptionElement.html('&nbsp;for X Label');
        editOptionElement.style('visibility', 'visible');
        itemToChange = 'xLabel';
    } else if (options.indexOf('legendText') >= 0) {
        editOptionElement.html('&nbsp;for Legend Item');
        editOptionElement.style('visibility', 'visible');
        itemToChange = options.substring(options.indexOf('editable-legend-')).split(' ')[0];
    } else if (options.indexOf('editable-bar') >= 0) {
        editOptionElement.html('&nbsp;for Bar Chart');
        editOptionElement.style('visibility', 'visible');
        editObj.editDiv.select('.editable-bar').style('display', 'block');
        optionValues.push('editable-bar');
        itemToChange = options.substring(options.indexOf('bar-col-')).split(' ')[0];
    } else if (options.indexOf('editable-pie') >= 0) {
        editOptionElement.html('&nbsp;for Pie Slice');
        editOptionElement.style('visibility', 'visible');
        editObj.editDiv.select('.editable-pie').style('display', 'block');
        optionValues.push('editable-pie');
        itemToChange = options.substring(options.indexOf('pie-slice-')).split(' ')[0];
    } else if (options.indexOf('editable-scatter') >= 0) {
        editOptionElement.html('&nbsp;for Scatter Plot');
        editOptionElement.style('visibility', 'visible');
        editObj.editDiv.select('.editable-scatter').style('display', 'block');
        optionValues.push('editable-scatter');
        itemToChange = options.substring(options.indexOf('scatter-circle-')).split(' ')[0];
    } else if (options.indexOf('editable-bubble') >= 0) {
        editOptionElement.html('&nbsp;for Bubble Chart');
        editOptionElement.style('visibility', 'visible');
        editObj.editDiv.select('.editable-bubble').style('display', 'block');
        optionValues.push('editable-bubble');
        itemToChange = options.substring(options.indexOf('bubble-')).split(' ')[0];
    } else if (options.indexOf('editable-box') >= 0) {
        editOptionElement.html('&nbsp;for Box and Whisker Plot');
        editOptionElement.style('visibility', 'visible');
        editObj.editDiv.select('.editable-box').style('display', 'block');
        optionValues.push('editable-box');
        itemToChange = options.substring(options.indexOf('box-')).split(' ')[0];
    } else if (options.indexOf('editable-comment') >= 0) {
        editOptionElement.html('&nbsp;for Comment');
        editOptionElement.style('visibility', 'visible');
        itemToChange = options.substring(options.indexOf('editable-comment-')).split(' ')[0];
    } else if (options.indexOf('editable-svg') >= 0) {
        editOptionElement.html('&nbsp;for All Text');
        editOptionElement.style('visibility', 'visible');
        editObj.editDiv.select('.editable-text-size-buttons').style('display', 'block');
        optionValues.push('editable-text-size');
        itemToChange = 'svg';
    } else {
        console.log('Still need to add option to display edit');
    }

    if (options.indexOf('editable-num') >= 0) {
        editObj.editDiv.select('.editable-num-format').style('display', 'block');
        optionValues.push('editable-num-format');
    }
    if (options.indexOf('editable-text') >= 0) {
        editObj.editDiv.select('.editable-text-color').style('display', 'block');
        optionValues.push('editable-text-color');
        editObj.editDiv.select('.editable-text-size').style('display', 'block');
        optionValues.push('editable-text-size');
    }
    if (options.indexOf('editable-content') >= 0) {
        editObj.editDiv.select('.editable-content').style('display', 'block');
        optionValues.push('editable-content');
    }

    //populate edit div with initial values
    if (editObj.vizOptions[itemToChange]) {
        populateSelectionsEditMode(editObj.editDiv, editObj.vizOptions[itemToChange]);
    }
    editObj.editDiv.style('display', 'block').style('left', 0 + 'px').style('top', 0 + 'px');

    //calculate position of overlay div
    editHeight = parseFloat(editObj.editDiv.style('height'));
    editWidth = parseFloat(editObj.editDiv.style('width'));
    position = editObj.overlayDivPosition(editWidth, editHeight, mouseX, mouseY);

    //show the new edit div
    editObj.editDiv.style('left', position.x + 'px').style('top', position.y + 'px');

    //add submit, default, and exit listeners to the div
    editObj.editDiv.select('#submitEditMode').on('click', function () {
        editObj.submitEditMode(optionValues, itemToChange);
        editObj.removeEdit();
    });
    editObj.editDiv.select('#submitEditModeDefault').on('click', function () {
        editObj.submitEditMode(optionValues, itemToChange, true);
        editObj.removeEdit();
    });
    editObj.editDiv.select('#exitEditMode').on('click', function () {
        editObj.removeEdit();
    });
    editObj.fontSizeIncrement = 0;

    //Click events for increase/decrease font size buttons
    editObj.editDiv.select('#increaseFontSize').on('click', increaseFontSize.bind(editObj));
    editObj.editDiv.select('#decreaseFontSize').on('click', decreaseFontSize.bind(editObj));
}

/**
* @name increaseFontSize
* @desc Increases font size by an increment
* @return {undefined} - no return
*/
function increaseFontSize() {
    var editObj = this,
        fontIncrement = 1,
        maxSize = 28;
    if (editObj.fontSizeIncrement < maxSize) {
        editObj.changeFontSize(fontIncrement);
        editObj.fontSizeIncrement++;
        editObj.vizOptions.text = { 'editable-text-increment': editObj.fontSizeIncrement };
    }
}

/**
* @name decreaseFontSize
* @desc Decreases font size by an increment
* @return {undefined} - no return
*/
function decreaseFontSize() {
    var editObj = this,
        fontDecrement = -1,
        minSize = -12;
    //min size is neg 12 because default size is 12px on our charts
    if (editObj.fontSizeIncrement > minSize) {
        editObj.changeFontSize(fontDecrement);
        editObj.fontSizeIncrement--;
        editObj.vizOptions.text = { 'editable-text-increment': editObj.fontSizeIncrement };
    }
}

/**
* @name changeFontSize
* @desc Increases or decreases font size by a certain increment
* @param {integer} increment - number of increment
* @return {undefined} - no return
*/
function changeFontSize(increment) {
    var editObj = this;
    editObj.chartDiv.selectAll('text').each(function () {
        updateFont(this, increment);
    });
    editObj.chartDiv.selectAll('.text').each(function () {
        updateFont(this, increment);
    });
}

/**
* @name updateFont
* @desc changes the size of the font by a given increment
* @param {htmlNode} thisDiv - node to change font size
* @param {integer} increment - number of increment
* @return {undefined} - no return
*/
function updateFont(thisDiv, increment) {
    var newSize,
        textSize = 12;
    if (thisDiv && thisDiv.getAttribute('font-size')) {
        textSize = thisDiv.getAttribute('font-size');
        newSize = parseInt(textSize, 10) + increment;
        thisDiv.setAttribute('font-size', newSize + 'px');
    } else if (thisDiv) {
        textSize = parseInt(window.getComputedStyle(thisDiv, null).getPropertyValue('font-size'), 10) + increment;
        thisDiv.style.fontSize = textSize + 'px';
    }
}

/**
* @name populateSelectionsEditMode
* @desc Initially populates the editDiv if there are vizOptions
* @param {htmlNode} editDiv - edit mode options div
* @param {object} vizOptions - current user options to apply to the edit div
* @return {undefined} - no return
*/
function populateSelectionsEditMode(editDiv, vizOptions) {
    for (var option in vizOptions) {
        if (vizOptions.hasOwnProperty(option)) {
            var selectedObject = editDiv.select('#' + option)._groups[0][0];
            //default color inputs to gray
            if (vizOptions[option] === 'default') {
                if (selectedObject.type === 'color') {
                    if (selectedObject.id.indexOf('text') > 0) {
                        selectedObject.value = '#000000';
                    } else {
                        selectedObject.value = '#aaaaaa';
                    }
                }
            } else {
                selectedObject.value = vizOptions[option];
            }
        }
    }
}

/**
* @name submitEditMode
* @desc calls save callback on edit mode with edit options
* @param {object} optionValues - new user options to save
* @param {object} possibleItemToChange - item that the user clicked (might not be the actual item to update)
* @param {object} defaultBtnClicked - reset viz option to default
* @return {undefined} - no return
*/
function submitEditMode(optionValues, possibleItemToChange, defaultBtnClicked) {
    var editObj = this,
        optionArray = optionValues,
        selectedEditOptions = {},
        editValue = void 0,
        selectedObj = void 0,
        itemToChange = possibleItemToChange;

    for (var i = 0; i < optionArray.length; i++) {
        if (optionArray[i].indexOf('editable-legend') > 0) {
            //change item to change for legend elements
            itemToChange = optionArray[i];
        }
        selectedObj = editObj.editDiv.select('#' + optionArray[i]);
        //see if selected object exists
        if (selectedObj && selectedObj._groups[0] && selectedObj._groups[0][0]) {
            editValue = selectedObj._groups[0][0].value;
            //get selected option from edit div
            if (optionArray[i] === 'editable-content' && editValue === '') {
                //dont add an empty string to the viz options for editable content
                break;
            }
            selectedEditOptions[optionArray[i]] = editValue;
            if (!selectedEditOptions[optionArray[i]] && optionArray[i].indexOf('content') < 0) {
                selectedEditOptions[optionArray[i]] = 'default';
            }
        }
    }

    if (defaultBtnClicked) {
        if (itemToChange === 'svg') {
            delete editObj.vizOptions.text;
        }
        delete editObj.vizOptions[itemToChange];
    } else {
        editObj.vizOptions[itemToChange] = selectedEditOptions;
    }

    if (itemToChange === 'svg') {
        delete editObj.vizOptions.svg;
    }

    //save vizOptions
    editObj.onSaveCallback(editObj.vizOptions);
}

/**
* @name applyEditMode
* @desc applies individual viz option on the visual
* @param {string} itemToChange - viz option to update
* @param {object} options - viz option properties
* @return {undefined} - no return
*/
function applyEditMode(itemToChange, options) {
    var editObj = this,
        object = editObj.chartDiv.select('.' + itemToChange),
        objectGroups = object._groups,
        objectTagName = objectGroups[0][0] ? objectGroups[0][0].tagName.toLowerCase() : null;

    if (itemToChange === 'text') {
        //do something if it is all the text that is being changed
        object = editObj.chartDiv.selectAll('text');
    }

    //options by tagName
    if (objectTagName === 'g') {
        object = editObj.chartDiv.select('.' + itemToChange).selectAll('text');
    } else if (objectTagName === 'rect') {
        if (options['editable-bar']) {
            object.attr('fill', options['editable-bar']);
        }
        if (options['editable-box']) {
            object.attr('fill', options['editable-box']);
        }
    } else if (objectTagName === 'circle') {
        if (options['editable-scatter']) {
            object.attr('fill', options['editable-scatter']);
        }
        if (options['editable-bubble']) {
            object.attr('fill', options['editable-bubble']);
        }
    } else if (objectTagName === 'path') {
        if (options['editable-pie']) {
            object.attr('fill', options['editable-pie']);
        }
    }

    //standard options
    //If a text increment exists, apply it based on the sign of the variable
    if (options.hasOwnProperty('editable-text-increment')) {
        editObj.changeFontSize(options['editable-text-increment']);
    }

    if (options.hasOwnProperty('editable-text-size')) {
        object.style('font-size', options['editable-text-size'] + 'px');
    }
    if (options.hasOwnProperty('editable-text-color')) {
        object.style('fill', options['editable-text-color']);
        object.style('color', options['editable-text-color']);
    }
    if (options.hasOwnProperty('editable-num-format')) {
        var expression = getFormatExpression(options['editable-num-format']);
        object.transition().text(function (d) {
            if (!isNaN(d) && typeof expression === 'function') {
                return expression(d);
            }
            return d;
        });
    }
    if (options.hasOwnProperty('editable-content')) {
        if (options['editable-content'].length > 0) {
            object.html(options['editable-content']);
        }
    }
    editObj.removeEdit();
}

/**
* @name applyAllEdits
* @desc applies all viz options in the edit mode object
* @return {undefined} - no return
*/
function applyAllEdits() {
    var editObj = this;
    for (var option in editObj.vizOptions) {
        if (editObj.vizOptions.hasOwnProperty(option) && editObj.chartDiv.select(option)) {
            editObj.applyEditMode(option, editObj.vizOptions[option]);
        }
    }
}

/**
* @name removeEdit
* @desc removes edit div from the visual
* @return {undefined} - no return
*/
function removeEdit() {
    var editObj = this;
    if (editObj.editDiv) {
        editObj.editDiv.html('');
        editObj.editDiv.style('display', 'none');
    }
    editObj.editOptions = '';
}

/**
* @name overlayDivPosition
* @desc function to determine the placement of the div on the visual
* @param {number} divWidth - width of the comment entry box
* @param {number} divHeight - height of the comment entry box
* @param {number} mouseX - x position of the click event
* @param {number} mouseY - y position of the click event
* @return {object} - position of div
*/
function overlayDivPosition(divWidth, divHeight, mouseX, mouseY) {
    var editObj = this,
        position = {
        x: mouseX,
        y: mouseY + 10
    };
    if (mouseX > parseInt(editObj.chartDiv.style('width'), 10) / 2) {
        position.x = mouseX - divWidth;
    }
    if (mouseY - divHeight - 10 > 0) {
        position.y = mouseY - divHeight - 10;
    }
    return position;
}

/**
* @name getFormatExpression
* @desc returns the d3 format expression for a given option
* @param {string} option - type of data format
* @return {function} - expression
*/
function getFormatExpression(option) {
    var expression = '',
        p = void 0;
    if (option === 'currency') {
        expression = d3.format('$,');
    } else if (option === 'fixedCurrency') {
        expression = d3.format('($.2f');
    } else if (option === 'percent') {
        p = Math.max(0, d3.precisionFixed(0.05) - 2);
        expression = d3.format('.' + p + '%');
    } else if (option === 'millions') {
        p = d3.precisionPrefix(1e5, 1.3e6);
        expression = d3.formatPrefix('.' + p, 1.3e6);
    } else if (option === 'commas') {
        expression = d3.format(',.0f');
    } else {
        expression = d3.format('');
    }
    return expression;
}

module.exports = jvEdit;

},{"./editOptionsTemplate.js":1}],7:[function(require,module,exports){
/***jvEvents
 * Eventing layer on top of JV Charts to allow custom callbacks to be attached to mouse events
 */
'use strict';

var jvCharts = require('./jvCharts.js'),
    jvComment = require('./jvComment.js'),
    jvEdit = require('./jvEdit.js'),
    jvBrush = require('./jvBrush.js');

jvCharts.prototype.initializeModes = initializeModes;
jvCharts.prototype.createDefaultMode = createDefaultMode;
jvCharts.prototype.createCommentMode = createCommentMode;
jvCharts.prototype.createEditMode = createEditMode;
jvCharts.prototype.createBrushMode = createBrushMode;
jvCharts.prototype.createSelectMode = createSelectMode;
jvCharts.prototype.toggleModes = toggleModes;
jvCharts.prototype.toggleDefaultMode = toggleDefaultMode;
jvCharts.prototype.toggleCommentMode = toggleCommentMode;
jvCharts.prototype.toggleEditMode = toggleEditMode;
jvCharts.prototype.toggleBrushMode = toggleBrushMode;
jvCharts.prototype.toggleSelectMode = toggleSelectMode;
jvCharts.prototype.addBrushEvents = addBrushEvents;

/**
* @name initializeModes
* @desc function that initializes and creates the chart toolbar
* @return {undefined} - no return
*/
function initializeModes() {
    var chart = this,
        callbacks = chart.config.callbacks;

    //check if callbacks are needed
    if (callbacks) {
        for (var mode in callbacks) {
            //loop through all the types of modes to initialize the mode and register the appropriate events
            if (callbacks.hasOwnProperty(mode) && callbacks[mode]) {
                var camelCaseMode = mode.charAt(0).toUpperCase() + mode.slice(1);
                chart[mode] = chart['create' + camelCaseMode]();
            }
        }
        if (chart.editMode) {
            chart.editMode.applyAllEdits();
        }
        chart.toggleModes(chart.mode);
    } else {
        chart.createDefaultMode();
        //user has not defined any other modes, so just use default mode
        chart.toggleDefaultMode('default-mode');
    }
}

/**
* @name createDefaultMode
* @desc function that initializes and creates the default mode
* @return {undefined} - no return
*/
function createDefaultMode() {
    var chart = this;
    if (chart.config.callbacks && chart.config.callbacks.defaultMode.onBrush) {
        chart.brushMode = chart.createBrushMode(chart.config.callbacks.defaultMode.onBrush);
    }
}

/**
* @name createCommentMode
* @desc function that initializes and creates the comment mode
* @return {jvComment} - created comment mode
*/
function createCommentMode() {
    var chart = this;
    return new jvComment({
        chartDiv: chart.chartDiv,
        comments: chart.config.comments || {},
        onSaveCallback: chart.config.callbacks.commentMode.onSave,
        getMode: function getMode() {
            return chart.mode;
        }
    });
}

/**
* @name createEditMode
* @desc function that initializes and creates the edit mode
* @return {jvEdit} - created edit mode object
*/
function createEditMode() {
    var chart = this;
    return new jvEdit({
        chartDiv: chart.chartDiv,
        vizOptions: chart.config.editOptions || {},
        onSaveCallback: chart.config.callbacks.editMode.onSave
    });
}

/**
* @name createBrushMode
* @desc function that initializes and creates the brush mode
* @param {function} callbackParam - function that is an optional callback for brush mode
* @return {jvBrush} - created brush mode object
*/
function createBrushMode(callbackParam) {
    var chart = this,
        callback = callbackParam;
    if (!callback) {
        if (chart.config.callbacks.brushMode && typeof chart.config.callbacks.brushMode.onBrush === 'function') {
            callback = chart.config.callbacks.brushMode.onBrush;
        } else {
            console.log('no brush callback, pass it into the callbacks option');
            return null;
        }
    }
    return new jvBrush({
        chartDiv: chart.chartDiv,
        jvChart: chart,
        onBrushCallback: callback
    });
}

/**
* @name createSelectMode
* @desc function that initializes and creates the select mode
* @return {boolean} - true since the creation of a mode is only called when callbacks for the mode exist
*/
function createSelectMode() {
    return true;
}

/**
* @name toggleModes
* @desc sets the correct events for the specific mode param
* @param {string} mode - specified mode to toggle to
* @return {undefined} - no return
*/
function toggleModes(mode) {
    var chart = this;
    chart.toggleDefaultMode(mode);
    chart.commentMode && chart.toggleCommentMode(mode);
    chart.editMode && chart.toggleEditMode(mode);
    chart.brushMode && chart.toggleBrushMode(mode);
    chart.selectMode && chart.toggleSelectMode(mode);
}

/**
* @name toggleDefaultMode
* @desc updates event listeners for default mode
* @param {string} mode - specified mode to toggle to
* @return {undefined} - no return
*/
function toggleDefaultMode(mode) {
    var chart = this;
    if (mode === 'default-mode') {
        var defaultMode = chart.config.callbacks ? chart.config.callbacks.defaultMode : false,
            entireSvg = chart.chartDiv.select('svg'),
            callbacks = void 0;
        //change cursor and show tooltips
        chart.chartDiv.style('cursor', 'default');
        chart.showToolTip = true;

        //return if no callbacks exist
        if (!defaultMode) {
            return;
        }
        callbacks = {
            onDoubleClick: function onDoubleClick(event, node, mouse) {
                if (typeof defaultMode.onDoubleClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'doubleClick';
                    defaultMode.onDoubleClick(retrunObj);
                }
            },
            onClick: function onClick(event, node, mouse) {
                if (typeof defaultMode.onClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'click';
                    defaultMode.onClick(retrunObj);
                }
            }
        };

        if (defaultMode.onBrush && chart.brushMode) {
            callbacks.mousedown = addBrushMousedown.bind(chart);
            callbacks.mouseup = function () {
                chart.chartDiv.select('svg').on('mousemove', false);
                chart.chartDiv.select('svg').style('cursor', 'default');
                chart.brushMode.removeBrush();
            };
        }
        registerClickEvents(entireSvg, callbacks);
    } else {
        //remove tooltips and any highlights
        chart.showToolTip = false;
        chart.removeHighlight();
    }
}

/**
* @name toggleCommentMode
* @desc updates event listeners for comment mode
* @param {string} mode - specified mode to toggle to
* @return {undefined} - no return
*/
function toggleCommentMode(mode) {
    var chart = this,
        commentObj = chart.commentMode;
    if (mode === 'comment-mode') {
        var entireSvg = chart.chartDiv.select('svg'),
            callbacks = {
            onDoubleClick: function onDoubleClick(event, node, mouse) {
                commentObj.makeComment(node);
                if (typeof chart.config.callbacks.commentMode.onDoubleClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'doubleClick';
                    chart.config.callbacks.commentMode.onDoubleClick(retrunObj);
                }
            },
            onClick: function onClick(event, node, mouse) {
                if (typeof chart.config.callbacks.commentMode.onClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'click';
                    chart.config.callbacks.commentMode.onClick(retrunObj);
                }
            }
        };
        registerClickEvents(entireSvg, callbacks);
        //set cursor for comment mode
        chart.chartDiv.style('cursor', 'pointer');
        //add movementlisteners
        chart.chartDiv.selectAll('.min-comment').on('mousedown', function () {
            //logic to move comments
            commentObj.createMoveListener(d3.select(this));
        }).on('mouseup', function () {
            if (commentObj.moved) {
                commentObj.updatePosition(commentObj);
            }
            commentObj.moved = false;
            chart.chartDiv.on('mousemove', false);
        });
    } else {
        commentObj.removeComment();
    }
}

/**
* @name toggleEditMode
* @desc updates event listeners for edit mode
* @param {string} mode - specified mode to toggle to
* @return {undefined} - no return
*/
function toggleEditMode(mode) {
    var chart = this,
        editObj = chart.editMode,
        entireSvg = editObj.chartDiv.select('svg');
    if (mode === 'edit-mode') {
        editObj.chartDiv.style('cursor', 'default');
        entireSvg.selectAll('.event-rect').attr('display', 'none');

        var callbacks = {
            onDoubleClick: function onDoubleClick(event, node, mouse) {
                if (typeof chart.config.callbacks.editMode.onDoubleClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'doubleClick';
                    chart.config.callbacks.editMode.onDoubleClick(retrunObj);
                }
            },
            onClick: function onClick(event, node, mouse) {
                //edit mode events
                //going to be mouseover to highlight options for whatever piece you hover over
                var classText = d3.select(event.target).attr('class');
                if (classText) {
                    if (classText.indexOf('editable') >= 0) {
                        editObj.displayEdit(mouse, classText);
                    }
                }

                if (typeof chart.config.callbacks.editMode.onClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'click';
                    chart.config.callbacks.editMode.onClick(retrunObj);
                }
            }
        };
        //clear svg listeners
        registerClickEvents(entireSvg);
        //add chart div level listeners
        registerClickEvents(editObj.chartDiv, callbacks);

        editObj.chartDiv.selectAll('.editable').classed('pointer', true);
    } else {
        //clear chart div level listeners
        registerClickEvents(editObj.chartDiv);
        editObj.removeEdit();
        entireSvg.selectAll('.editable').classed('pointer', false);
        entireSvg.selectAll('.event-rect').attr('display', 'block');
    }
}

/**
* @name toggleBrushMode
* @desc updates event listeners for brush mode
* @param {string} mode - specified mode to toggle to
* @return {undefined} - no return
*/
function toggleBrushMode(mode) {
    var chart = this;
    if (mode === 'brush-mode' && chart.config.callbacks.brushMode) {
        chart.addBrushEvents();
    }
}

/**
* @name toggleSelectMode
* @desc updates event listeners for select mode
* @param {string} mode - specified mode to toggle to
* @return {undefined} - no return
*/
function toggleSelectMode(mode) {
    var chart = this;
    if (mode === 'select-mode') {
        var callbacks = {
            onDoubleClick: function onDoubleClick(event, node, mouse) {
                if (typeof chart.config.callbacks.selectMode.onDoubleClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'doubleClick';
                    chart.config.callbacks.selectMode.onDoubleClick(retrunObj);
                }
            },
            onClick: function onClick(event, node, mouse) {
                if (typeof chart.config.callbacks.selectMode.onClick === 'function') {
                    var retrunObj = chart[chart.config.type].getEventData.call(chart, event, mouse);
                    retrunObj.eventType = 'click';
                    chart.config.callbacks.selectMode.onClick(retrunObj);
                }
            }
        };
        registerClickEvents(chart.chartDiv.select('svg'), callbacks);
    }
}

/**
* @name addBrushEvents
* @desc registers events for brush mode
* @return {undefined} - no return
*/
function addBrushEvents() {
    var chart = this,
        entireSvg = chart.chartDiv.select('svg'),
        callbacks = {
        mousedown: addBrushMousedown.bind(chart),
        mouseup: function mouseup() {
            chart.chartDiv.select('svg').on('mousemove', false);
            chart.brushMode.removeBrush();
        }
    };
    registerClickEvents(entireSvg, callbacks);
}

/**
* @name addBrushMousedown
* @desc creates mousedown event for brush mode
* @return {undefined} - no return
*/
function addBrushMousedown() {
    var chart = this,
        brushStarted = false,
        brushContainer = chart.chartDiv.select('.' + chart.config.type + '-container').node(),
        entireSvg = chart.chartDiv.select('svg'),
        timeMouseDown = new Date().getTime();

    entireSvg.on('mousemove', function () {
        var timeMouseMove = new Date().getTime();
        if (timeMouseDown > timeMouseMove - 10) {
            //mouse move happend too quickly, chrome bug
            return;
        }
        if (brushStarted) {
            return;
        }
        var containerBox = void 0,
            x = void 0,
            y = void 0,
            mouse = void 0;
        if (brushContainer === undefined) {
            chart.brushMode.startBrush(d3.event);
            brushStarted = true;
        } else {
            containerBox = brushContainer.getBoundingClientRect();
            mouse = d3.mouse(entireSvg.node());
            x = mouse[0];
            y = mouse[1];

            if (x < containerBox.right && y < containerBox.bottom && x > containerBox.left && y > containerBox.top) {
                chart.brushMode.startBrush(d3.event);
                brushStarted = true;
            }
        }
    });
}

/**
* @name registerClickEvents
* @desc register handler for jv events
* @param {d3element} svg - d3 selected element to bind events on
* @param {object} listeners - callbacks to run for each type of click event
* @return {undefined} - no return
*/
function registerClickEvents(svg) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$onClick = _ref.onClick,
        onClick = _ref$onClick === undefined ? null : _ref$onClick,
        _ref$onDoubleClick = _ref.onDoubleClick,
        onDoubleClick = _ref$onDoubleClick === undefined ? null : _ref$onDoubleClick,
        _ref$mousedown = _ref.mousedown,
        mousedown = _ref$mousedown === undefined ? null : _ref$mousedown,
        _ref$mouseup = _ref.mouseup,
        mouseup = _ref$mouseup === undefined ? null : _ref$mouseup;

    //using default parameters to show available parts of the callbacks object
    var down,
        tolerance = 5,
        wait = null;

    svg.on('mousedown', false);
    svg.on('mouseup', false);
    svg.on('mousemove', false);

    svg.on('mousedown', function () {
        down = d3.mouse(svg.node());
        if (typeof mousedown === 'function') {
            mousedown();
        }
    });

    svg.on('mouseup', function () {
        var _this = this;

        if (typeof mouseup === 'function') {
            mouseup();
        }
        if (!onDoubleClick) {
            if (typeof onClick === 'function') {
                onClick(d3.event, this, d3.mouse(this));
            }
            return;
        }
        if (dist(down, d3.mouse(svg.node())) > tolerance) {
            //drag not click so return
            return;
        }
        if (wait) {
            window.clearTimeout(wait);
            wait = null;
            if (typeof onDoubleClick === 'function') {
                onDoubleClick(d3.event, this, d3.mouse(this));
            }
        } else {
            wait = window.setTimeout(function (e, mouse) {
                return function () {
                    if (typeof onClick === 'function') {
                        onClick(e, _this, mouse);
                    }
                    wait = null;
                };
                //d3.event and d3.mouse both lose their scope in a timeout and no longer return the expected value, so binding is necessary
            }(d3.event, d3.mouse(this)), 250);
        }
    });
}

/**
* @name dist
* @desc euclidean distance to determine if the mouse moved in between clicks for double click
* @param {array} a - point a
* @param {array} b - point b
* @return {number} - distance between a and b
*/
function dist(a, b) {
    if (a && b && Array.isArray(a) && Array.isArray(b)) {
        return Math.sqrt(Math.pow(a[0] - b[0], 2), Math.pow(a[1] - b[1], 2));
    }
    return 0;
}

},{"./jvBrush.js":3,"./jvCharts.js":4,"./jvComment.js":5,"./jvEdit.js":6}],8:[function(require,module,exports){
'use strict';

/***  jvEdit ***/
function jvSelect(configObj) {
    'use strict';

    var selectObj = this;
    selectObj.chartDiv = configObj.chartDiv;
    selectObj.jvChart = configObj.jvChart;
    selectObj.singleClickCallback = configObj.singleClickCallback;
    selectObj.doubleClickCallback = configObj.doubleClickCallback;
}

function singleClick(selectObj, event) {
    if (typeof selectObj.singleClickCallback === 'function') {
        selectObj.singleClickCallback(event);
    }
}
function dblclick(selectObj, event) {
    if (typeof selectObj.doubleClickCallback === 'function') {
        selectObj.doubleClickCallback(event);
    }
}

/********************************************* Select Mode Functions **************************************************/

module.exports = jvSelect;

},{}],9:[function(require,module,exports){
'use strict';

/***  jvTip ***/

function jvTip(configObj) {
    "use strict";

    var tip = this,
        defaultConfig = {
        type: 'simple'
    };

    tip.tipConfig = configObj.tipConfig || defaultConfig;
    tip.chartDiv = configObj.chartDiv;

    //Create initial div
    tip.chartDiv.select('.jv-tooltip').remove();

    tip.chartDiv.append("div").attr("class", "tooltip jv-tooltip").style("pointer-events", "none");
}

jvTip.prototype.showTip = function () {
    var transitionDuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;

    var tip = this;
    var left = 'auto',
        top = 'auto',
        mouse = d3.mouse(tip.chartDiv.select('svg').node());

    //Logic to determine where tooltip will be placed on page
    var leftOfMouse = mouse[0] > tip.chartDiv._groups[0][0].clientWidth / 2,
        topOfMouse = mouse[1] < tip.chartDiv._groups[0][0].clientHeight / 2,
        tooltipHeight = tip.toolTip._groups[0][0].clientHeight === 0 ? 75 : tip.toolTip._groups[0][0].clientHeight,
        tooltipWidth = tip.toolTip._groups[0][0].clientWidth;

    if (leftOfMouse) {
        if (tooltipWidth === 0) {
            tooltipWidth = 250;
        }
        left = mouse[0] - tooltipWidth;
    } else {
        left = mouse[0];
    }
    if (topOfMouse) {
        top = mouse[1];
    } else {
        if (tooltipHeight === 0) {
            tooltipHeight = 75;
        }
        top = mouse[1] - tooltipHeight;
    }

    if (!leftOfMouse && topOfMouse) {
        left = mouse[0] + 13;
    }

    //COOL CURSOR, a function of the height and width of the container
    // var container = tip.chartDiv.select('.bar-container').node().getBoundingClientRect();
    // svgMouse = d3.mouse(tip.chartDiv.select('.bar-container').node());

    // var tooltipHeight = tip.toolTip._groups[0][0].clientHeight === 0 ? 75 : tip.toolTip._groups[0][0].clientHeight;
    // top = mouse[1] - (tooltipHeight * svgMouse[1] / container.height);

    // var tooltipWidth = tip.toolTip._groups[0][0].clientWidth;
    // left = mouse[0] - (tooltipWidth * svgMouse[0] / container.width);

    //STICKY CURSOR IN THE BOTTOM RIGHT
    // top = mouse[1];
    // left = mouse[0];
    //set max left
    // if(left > container.width - tooltipWidth + container.left) {
    //     left = container.width - tooltipWidth + container.left;
    // }

    // //set max top
    // if (top > container.height - tooltipHeight + container.top) {
    //     top = container.height - tooltipHeight + container.top;
    // }


    var t = d3.transition().duration(transitionDuration).ease(d3.easeLinear);

    tip.toolTip.transition(t).style("left", left + 'px').style("top", top + 'px').style("display", "block").style("opacity", 1);
};

jvTip.prototype.hideTip = function () {
    var tip = this;
    var t = d3.transition().duration('100').ease(d3.easeLinear);
    if (tip.toolTip) {
        tip.toolTip.transition(t).style("display", "none");
    }
};

/************************************************  Declare jv tip components *******************************************************************************/
var jvHr = '<hr style=\'margin:3px 0 3px 0;\'/>';

function getValueContent(item, value, colorTile) {
    var valueString = value ? ': ' + value : '';
    var colorTileString = colorTile ? colorTile : '';
    return '<span class=\'jv-tip-content jv-tip-side-margins\'>' + colorTileString + item + valueString + '</span><br/>';
}

function getTitleTemplate(dataObj) {
    return '<div class=\'title jv-top-margin jv-inline\'><b>' + dataObj.title + '</b></div>' + jvHr;
}

function getColorTile(color) {
    if (color) {
        return '<div class=\'d3-tooltip-circle jv-inline jv-tip-side-margins\' style=\'background:' + color + '\'></div>';
    }
    return "<div class='jv-inline jv-tip-side-margins'>";
}

/************************************************* Viz Specific Functions **********************************************************************************/

jvTip.prototype.generateSimpleTip = function (dataObj, dataTable) {
    var tip = this;
    var tooltipHtml = '';

    if (dataObj.hasOwnProperty('title') && dataObj.title === '') {
        dataObj.title = 'Empty';
    }

    if (dataObj.viz === 'clusters' || dataObj.viz === 'circleviewplot' || dataObj.viz === 'scatterplot' || dataObj.viz === 'treemap' || dataObj.viz === 'singleaxis') {
        tooltipHtml = generateSingleColorHTML(dataObj, dataTable);
    } else if (dataObj.viz === 'radial' || dataObj.viz === 'pie') {
        tooltipHtml = generatePieHTML(dataObj, dataTable);
    } else if (dataObj.viz === 'circlepack' || dataObj.viz === 'sunburst') {
        tooltipHtml = generatePackHTML(dataObj, dataTable);
    } else if (dataObj.viz === 'heatmap' || dataObj.viz === 'cloud') {
        tooltipHtml = generateHeatmapHTML(dataObj, dataTable);
    } else if (dataObj.viz === 'sankey') {
        tooltipHtml = generateSankeyHTML(dataObj, dataTable);
    } else if (dataObj.viz === 'bubble') {
        tooltipHtml = generateBubbleHTML(dataObj);
    } else if (dataObj.viz === 'boxwhisker') {
        tooltipHtml = generateBoxHTML(dataObj);
    } else if (dataObj.viz === 'clustergram') {
        tooltipHtml = generateClustergramHTML(dataObj);
    } else {
        tooltipHtml = generateSimpleHTML(dataObj, dataTable);
    }

    //add content to tooltip
    tip.toolTip = tip.chartDiv.select(".tooltip").html(tooltipHtml);

    //paint the tooltip
    tip.showTip(0);

    return tip.tooltip;
};

function generateSimpleHTML(dataObj) {
    var tooltipText;
    tooltipText = '<div><div class=\'title jv-tip-container jv-tip-side-margins jv-top-margin\'><b>' + dataObj.title + '</b></div>' + jvHr;

    for (var item in dataObj.tipData) {
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(item, value, getColorTile(dataObj.color[item]));
    }
    tooltipText += "</div>";
    return tooltipText;
}

function generateSingleColorHTML(dataObj, dataTable) {
    var tooltipText,
        tooltipColor,
        showColorCircle = true,
        colorCircle = "";

    if (!!dataObj.color[dataObj.data[dataTable.series]]) {
        tooltipColor = dataObj.color[dataObj.data[dataTable.series]];
    } else if (!!dataObj.color[dataTable.label] && dataObj.viz !== 'singleaxis') {
        tooltipColor = dataObj.color[dataTable.label];
    } else {
        showColorCircle = false;
    }

    if (showColorCircle) {
        colorCircle = getColorTile(tooltipColor);
    } else {
        colorCircle = getColorTile();
    }

    tooltipText = '<div class=\'jv-inline\'>' + colorCircle + '<div class=\'title jv-tip-side-margins jv-inline jv-top-margin\'><b>' + dataObj.title + '</b></div>' + jvHr;

    for (var item in dataObj.tipData) {
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(item, value);
    }
    tooltipText += "</div>";
    return tooltipText;
}

function generatePackHTML(dataObj) {
    var tooltipText;
    tooltipText = '<div class=\'jv-inline\'>\n        ' + getColorTile(dataObj.data.color) + '\n        ' + getTitleTemplate(dataObj);

    for (var item in dataObj.tipData) {
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(item, value);
    }
    tooltipText += "</div>";
    return tooltipText;
}

function generateBubbleHTML(dataObj) {
    var tooltipText;
    tooltipText = '<div class=\'jv-inline\'>\n        ' + getColorTile(dataObj.data.color) + '\n        ' + getTitleTemplate(dataObj);

    for (var item in dataObj.tipData) {
        if (item === 'color') {
            continue;
        }
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(item, value);
    }
    tooltipText += '</div>';
    return tooltipText;
}

function generateBoxHTML(dataObj) {
    var tooltipText = void 0;
    tooltipText = '<div class="jv-inline">';

    for (var item in dataObj.tipData) {
        if (dataObj.tipData.hasOwnProperty(item)) {
            var value = formatValue(dataObj.tipData[item]);
            tooltipText += getValueContent(item, value);
        }
    }
    tooltipText += '</div>';
    return tooltipText;
}

function generateHeatmapHTML(dataObj) {
    var tooltipText;
    if (dataObj.xAxisCat) {
        tooltipText = '<div class=\'jv-inline\'>\n            ' + getColorTile(dataObj.color) + "<div class='title jv-top-margin jv-inline'><b>" + dataObj.data.xAxisName + "</b></div><hr style='margin:3px 0 3px 0;'/>";

        tooltipText += "<span class='jv-tip-content jv-tip-side-margins'>" + dataObj.xAxisCat + "</span><br/>";
        tooltipText += "</div>";
        return tooltipText;
    } else if (dataObj.yAxisCat) {
        tooltipText = '<div class=\'jv-inline\'>\n            ' + getColorTile(dataObj.color) + "<div class='title jv-top-margin jv-inline'><b>" + dataObj.data.yAxisName + "</b></div><hr style='margin:3px 0 3px 0;'/>";

        tooltipText += "<span class='jv-tip-content jv-tip-side-margins'>" + dataObj.yAxisCat + "</span><br/>";
        tooltipText += "</div>";
        return tooltipText;
    } else {
        tooltipText = '<div class=\'jv-inline\'>\n            ' + getColorTile(dataObj.color) + '\n            ' + getTitleTemplate(dataObj);

        for (var item in dataObj.tipData) {
            var value = formatValue(dataObj.tipData[item]);
            tooltipText += getValueContent(item, value);
        }
        tooltipText += "</div>";
        return tooltipText;
    }
}

function generateClustergramHTML(dataObj) {
    var tooltipText;

    dataObj.title = dataObj.title.replace(/_/g, " ");

    tooltipText = '<div class=\'jv-inline\'>\n    ' + getColorTile(dataObj.color) + '\n    ' + getTitleTemplate(dataObj);

    for (var item in dataObj.tipData) {
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(item, value);
    }
    tooltipText += "</div>";

    return tooltipText;
}

function generatePieHTML(dataObj, dataTable) {
    var tooltipText;
    tooltipText = '<div class=\'jv-inline\'>\n    ' + getColorTile(dataObj.color[dataObj.data.label]) + '\n    ' + getTitleTemplate(dataObj);

    for (var item in dataObj.tipData) {
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(dataTable[item], value);
    }
    tooltipText += "</div>";
    return tooltipText;
}

function generateSankeyHTML(dataObj) {
    var tooltipText;
    tooltipText = '<div class=\'jv-inline\'>' + getTitleTemplate(dataObj);

    for (var item in dataObj.tipData) {
        var value = formatValue(dataObj.tipData[item]);
        tooltipText += getValueContent(dataObj.valueName, value);
    }
    tooltipText += "</div>";
    return tooltipText;
}

function formatValue(val) {
    if (!isNaN(val)) {
        var formatNumber = d3.format(",.0f");
        if (val >= 1000000) {
            //millions
            // var p = d3.precisionPrefix(1e5, 1.3e6);
            // formatNumber = d3.formatPrefix("." + p, 1.3e6);
            formatNumber = d3.format(",.2f");
        } else if (val <= 100) {
            //2 decimals
            formatNumber = d3.format(",.2f");
        }
        return formatNumber(val);
    }
    return val;
}

module.exports = jvTip;

},{}],10:[function(require,module,exports){
'use strict';

var jvCharts = require('./jvCharts.js');

jvCharts.prototype.getDefaultOptions = getDefaultOptions;

function getDefaultOptions() {
    var userOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _vars = {};

    //General Styles/Attributes
    //CONST variables - try to not use in jvCharts as they do not have much context
    _vars.GRAY = "#cccccc";
    _vars.WHITE = '#FFFFFF';
    _vars.BLACK = '#000000';
    _vars.SMALL_STROKE_WIDTH = '1px';
    _vars.light = '#BBBBBB';
    _vars.strokeWidth = "2px";

    //Action Attributes
    _vars.highlightBorderColor = _vars.BLACK;
    _vars.highlightBorderWidth = "2px";

    //Component Specific Styles/Attributes
    _vars.thresholds = 'none'; //if not none, expected to be an array
    _vars.thresholdLegend = false;
    _vars.backgroundColor = 'none';
    _vars.axisColor = _vars.GRAY;
    _vars.axisWidth = _vars.strokeWidth;
    _vars.gridLineStrokeWidth = _vars.SMALL_STROKE_WIDTH;
    _vars.displayValues = false;
    _vars.toggleLegend = false;
    _vars.legendArrowColor = 'c2c2d6';
    _vars.legendMax = 9;
    _vars.gridSize = 12;
    _vars.xReversed = false;
    _vars.yReversed = false;

    //font styles
    _vars.fontSize = '12px';
    _vars.fontColor = _vars.BLACK;
    _vars.xLabelFontSize = 'none';
    _vars.yLabelFontSize = 'none';

    //Heatmap Specific Styles/Attributes
    _vars.color = "#ff0000";
    _vars.toggleLegend = false;
    _vars.buckets = "10";
    _vars.opacity = "10";
    _vars.colorLabel = 'none';
    _vars.min = "0";
    _vars.max = "10";
    _vars.domainArray = "";
    _vars.step = "1";
    _vars.quantiles = true;
    _vars.heatLegendSpacing = 2;
    _vars.heatGridSize = 20;
    _vars.colors = ["#fbf2d2", "#fdedb5", "#fee7a0", "#ffda84", "#ffc665", "#feb44e", "#fea743", "#fd9b3f", "#fd8c3c", "#fd7735", "#fd602f", "#fb4b29", "#f43723", "#ea241e", "#e0161c", "#d60b20", "#c80324", "#b10026", "#870025", "#620023"];
    _vars.clusterColors = ["#00009C", "#003399", "#002FA7", "#2A52BE", "#0000FF", "#8C92AC", "#92A1CF", "#C4C3D0", "#CCCCFF", "#F8F8FF", "#FFFAFA", "#F4C2C2", "#FF6961", "#FF5C5C", "#FF1C00", "#FF0800", "#FF0000", "#CD5C5C", "#E34234", "#D73B3E"];

    //pie specific
    _vars.pieBorder = _vars.WHITE;
    _vars.pieBorderWidth = _vars.SMALL_STROKE_WIDTH;
    _vars.pieTextColor = _vars.WHITE;
    _vars.emptyLegendSquare = _vars.WHITE;

    //line specific
    _vars.lineCurveType = 'Linear';

    //bar specific
    _vars.displayValuesStackAsPercent = false;
    _vars.displayValuesStackTotal = false;
    _vars.displayYAxisLabel = true;

    //scatter specific
    _vars.toggleZ = true;
    _vars.lineGuide = true;

    //single axis specific
    _vars.singleAxisFillHoverColor = 'red';

    Object.assign(_vars, userOptions);
    return _vars;
}

},{"./jvCharts.js":4}],11:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../visuals/jvLine.js');

jvCharts.prototype.area = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.fillArea = fillArea;

/************************************************ Line functions ******************************************************/

/**setLineData
 *  gets line data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    //sort chart data if there is a sort type and label in the _vars
    if (chart._vars.sortType) {
        if (chart._vars.sortLabel && chart._vars.sortType !== 'default') {
            chart.organizeChartData(chart._vars.sortLabel, chart._vars.sortType);
        }
    }

    //remove if we add non linear to area chart
    chart._vars.lineCurveType = 'Linear';

    chart.data.legendData = setBarLineLegendData(chart.data);
    chart.data.xAxisData = chart.setAxisData('x', chart.data);
    chart.data.yAxisData = chart.setAxisData('y', chart.data);

    if (chart._vars.seriesFlipped) {
        chart.setFlippedSeries(chart.data.dataTableKeys);
        chart.flippedData.color = jvCharts.setChartColors(chart._vars.color, chart.flippedData.legendData, chart.colors);
    }

    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

/**setBarLineLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend tex
 */
function setBarLineLegendData(data) {
    var legendArray = [];
    for (var item in data.dataTable) {
        if (data.dataTable.hasOwnProperty(item)) {
            if (item !== 'label' && item.indexOf('tooltip') === -1) {
                legendArray.push(data.dataTable[item]);
            }
        }
    }
    return legendArray;
}
/** paintLineChart
 *
 * The initial starting point for line chart, begins the drawing process. Must already have the data stored in the chart
 * object
 */
function paint() {
    var chart = this;
    //Uses the original data and then manipulates it based on any existing options
    var dataObj = chart.getBarDataFromOptions();

    //assign current data which is used by all bar chart operations
    chart.currentData = dataObj;

    //Overwrite any pre-existing zoom
    chart.config.zoomEvent = null;

    //generate svg dynamically based on legend data
    chart.generateSVG(dataObj.legendData);
    chart.generateXAxis(dataObj.xAxisData);
    chart.generateYAxis(dataObj.yAxisData);
    chart.generateLegend(dataObj.legendData, 'generateLine');

    if (typeof dataObj.xAxisScale.ticks === "function") {
        chart.formatXAxisLabels(dataObj.xAxisScale.ticks().length);
    } else {
        chart.formatXAxisLabels(dataObj.xAxisScale.domain().length);
    }

    chart.generateLine(dataObj);
}

function getEventData(event) {
    var chart = this;
    if (event.target.classList.value.split('bar-col-')[1]) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.label, [event.target.classList.value.split('bar-col-')[1].replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    } else if (event.target.classList.value.indexOf('area-container') > -1) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

/**
 *
 */
function fillArea(lineData) {

    var chart = this,
        svg = chart.svg,
        xAxisData = chart.currentData.xAxisData,
        yAxisData = chart.currentData.yAxisData,
        legendData = chart.currentData.legendData,

    //lineData = chart.currentData.chartData,
    container = chart.config.container,
        colors = chart._vars.color;

    //If a legend element is toggled off, use the new list of headers
    if (chart._vars.hasOwnProperty('legendHeaders')) {
        legendData = chart._vars.legendHeaders;
    }

    //Get the X and Y Scale
    var x = jvCharts.getAxisScale('x', xAxisData, container, chart._vars, 'no-padding');
    var y = jvCharts.getAxisScale('y', yAxisData, container, chart._vars, 'no-padding');

    //If axis are normal
    if (!chart._vars.rotateAxis) {
        var area = d3.area().x(function (d) {
            if (d.x === '') {
                return x('EMPTY_STRING');
            }
            return x(d.x);
        }).y0(container.height).y1(function (d) {
            return y(d.y);
        });
    } else {
        var area = d3.area().y(function (d) {
            return y(d.y);
        }).x1(0).x0(function (d) {
            return x(d.x);
        });
    }

    var data = {};

    for (var i = 0; i < lineData.length; i++) {
        for (var k = 0; k < legendData.length; k++) {
            if (typeof legendData !== "undefined") {
                //Accounting for legend toggles
                if (legendData[k].toggle === false) {
                    //Don't write anything to data
                    continue;
                } else {
                    if (!data[legendData[k]]) {
                        data[legendData[k]] = [];
                    }
                    if (!chart._vars.rotateAxis) {
                        data[legendData[k]].push({
                            'x': lineData[i][xAxisData.label],
                            'y': parseFloat(lineData[i][legendData[k]])
                        });
                    } else {
                        data[legendData[k]].push({
                            'y': lineData[i][yAxisData.label],
                            'x': parseFloat(lineData[i][legendData[k]])
                        });
                    }
                }
            } else {
                //Initial creation of visualization w/o legend options
                if (!data[legendData[k]]) {
                    data[legendData[k]] = [];
                }
                if (!chart._vars.rotateAxis) {
                    data[legendData[k]].push({
                        'x': lineData[i][xAxisData.label],
                        'y': parseFloat(lineData[i][legendData[k]])
                    });
                } else {
                    data[legendData[k]].push({
                        'y': lineData[i][yAxisData.label],
                        'x': parseFloat(lineData[i][legendData[k]])
                    });
                }
            }
        }
    }

    svg.selectAll(".area").remove();

    for (var i in data) {
        svg.append("path").datum(data[i]).attr("class", function (d) {
            if (chart._vars.colorLine == true && chart._vars.thresholds != 'none' && chart._vars.colorChart != false) {
                return "area area-threshold";
            } else {
                return "area";
            }
        }).attr("d", area).attr("fill", jvCharts.getColors(colors, k, i)).attr("opacity", 0.6).attr("transform", function (d, i) {
            if (chart._vars.rotateAxis) {
                var translation = container.height / lineData.length / 2;
                return "translate(0, " + translation + ")";
            } else {
                var translation = container.width / lineData.length / 2;
                return "translate(" + translation + ", 0)";
            }
        }).attr("pointer-events", "none");
    }
}

module.exports = jvCharts;

},{"../visuals/jvLine.js":18}],12:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.bar = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateBarThreshold = generateBarThreshold;
jvCharts.prototype.generateBars = generateBars;

/**paint
 *
 * The initial starting point for bar chart, begins the drawing process. Must already have the data stored in the chart
 * object
 */
function paint() {
    var transitionTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 800;

    var chart = this,

    //Uses the original data and then manipulates it based on any existing options
    dataObj = chart.getBarDataFromOptions();

    if (transitionTime || transitionTime === 0) {
        chart._vars.transitionTime = transitionTime;
    } else if (!chart._vars.transitionTime) {
        chart._vars.transitionTime = 800;
    }

    //assign current data which is used by all bar chart operations
    chart.currentData = dataObj;

    //generate svg dynamically based on legend data
    chart.generateSVG(dataObj.legendData);
    chart.generateXAxis(dataObj.xAxisData);
    chart.generateYAxis(dataObj.yAxisData);
    chart.generateLegend(dataObj.legendData, 'generateBars');
    chart.generateBars(dataObj);

    if (typeof dataObj.xAxisScale.ticks === 'function') {
        chart.formatXAxisLabels(dataObj.xAxisScale.ticks().length);
    } else {
        chart.formatXAxisLabels(dataObj.xAxisScale.domain().length);
    }
}

/**Sets the data for the bar chart prior to painting
 *  @function
 * @params {Object} data - Data passed into the chart
 * @params {Object} dataTable - Shows which data column is associated with each field in visual panel
 * @params {Object} dataTableKeys - Contains the data type for each column of data
 * @params {Object} colors - Colors object used to color the bars
 */
function setData() {
    var chart = this;
    //sort chart data if there is a sort type and label in the _vars
    if (chart._vars.hasOwnProperty('sortType') && chart._vars.sortType) {
        if (chart._vars.sortLabel && chart._vars.sortType !== 'default') {
            chart.organizeChartData(chart._vars.sortLabel, chart._vars.sortType);
        }
    }
    chart.data.legendData = setBarLineLegendData(chart.data);
    chart.data.xAxisData = chart.setAxisData('x', chart.data);
    chart.data.yAxisData = chart.setAxisData('y', chart.data);
    if (chart._vars.seriesFlipped) {
        chart.setFlippedSeries(chart.data.dataTableKeys);
        chart.flippedData.color = jvCharts.setChartColors(chart._vars.color, chart.flippedData.legendData, chart.colors);
    }

    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData(event) {
    var chart = this;
    if (event.target.classList.value.split('bar-col-')[1]) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.label, [event.target.classList.value.split('bar-col-')[1].replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    } else if (event.target.classList.value.indexOf('bar-container') > -1) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

/**setBarLineLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setBarLineLegendData(data) {
    var legendArray = [];
    for (var item in data.dataTable) {
        if (data.dataTable.hasOwnProperty(item)) {
            if (item !== 'label' && item.indexOf('tooltip') === -1) {
                legendArray.push(data.dataTable[item]);
            }
        }
    }
    return legendArray;
}

/************************************************ Bar functions ******************************************************/
function generateBarThreshold() {
    var chart = this,
        svg = chart.svg,
        width = chart.config.container.width,
        height = chart.config.container.height,
        thresholds = chart._vars.thresholds,
        length = thresholds !== 'none' ? Object.keys(thresholds).length : 0,
        x = chart.currentData.xAxisScale,
        y = chart.currentData.yAxisScale;

    if (thresholds !== 'none') {
        for (var i = 0; i < length; i++) {
            var threshold = thresholds[i];
            if (!chart._vars.xAxisThreshold) {
                if (chart._vars.rotateAxis) {
                    if (chart._vars.yMin === 'none') {
                        svg.append('line').style('stroke', threshold.thresholdColor).attr('x1', x(threshold.threshold)).attr('y1', 0).attr('x2', x(threshold.threshold)).attr('y2', height).attr('stroke-dasharray', '3, 3');
                    } else {
                        if (threshold.threshold > chart._vars.yMin) {
                            svg.append('line').style('stroke', threshold.thresholdColor).attr('x1', x(threshold.threshold)).attr('y1', 0).attr('x2', x(threshold.threshold)).attr('y2', height).attr('stroke-dasharray', '3, 3');
                        }
                    }
                } else {
                    if (chart._vars.yMin === 'none') {
                        svg.append('line').style('stroke', threshold.thresholdColor).attr('x1', 0).attr('y1', y(threshold.threshold)).attr('x2', width).attr('y2', y(threshold.threshold)).attr('stroke-dasharray', '3, 3');
                    } else {
                        if (threshold.threshold > chart._vars.yMin) {
                            svg.append('line').style('stroke', threshold.thresholdColor).attr('x1', 0).attr('y1', y(threshold.threshold)).attr('x2', width).attr('y2', y(threshold.threshold)).attr('stroke-dasharray', '3, 3');
                        }
                    }
                }
            }

            if (chart._vars.colorChart == true) {
                var thresholdRects = d3.selectAll('rect.rect-' + i);
                thresholdRects.attr('fill', threshold.thresholdColor);
            }
        }
    }
}

/**generateBars
 *
 * Does the actual painting of bars on the bar chart
 * @params barData
 */

function generateBars(barData) {
    var chart = this,
        svg = chart.svg,


    //Used to draw line that appears when tool tips are visible
    tipLineX = 0,
        tipLineWidth = 0,
        tipLineHeight = 0,
        tipLineY = 0,

    //Add logic to filter bardata
    dataHeaders = barData.legendData,
        bars;

    //Removes any existing bar containers and creates a new one
    svg.selectAll('g.bar-container').remove();

    bars = svg.append('g').attr('class', 'bar-container').selectAll('g');

    if (chart._vars.seriesFlipped && chart._vars.flippedLegendHeaders) {
        dataHeaders = chart._vars.flippedLegendHeaders;
    } else if (chart._vars.legendHeaders) {
        dataHeaders = chart._vars.legendHeaders;
    }

    var barDataNew = jvCharts.getToggledData(barData, dataHeaders);

    generateBarGroups(bars, barDataNew, chart);

    var eventGroups = jvCharts.generateEventGroups(bars, barDataNew, chart);

    //Add listeners

    eventGroups.on('mouseover', function (d, i, j) {
        //Transitions in D3 don't support the 'on' function They only exist on selections. So need to move that event listener above transition and after append
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d, i);

            //Draw tip line
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
            svg.selectAll('.tip-line').remove();

            var mouseItem = d3.select(this);
            tipLineX = mouseItem.node().getBBox().x;
            tipLineWidth = mouseItem.node().getBBox().width;
            tipLineHeight = mouseItem.node().getBBox().height;
            tipLineY = mouseItem.node().getBBox().y;

            //Draw line in center of event-rect
            svg.append('line').attr('class', 'tip-line').attr('x1', function () {
                return chart._vars.rotateAxis ? 0 : tipLineX + tipLineWidth / 2;
            }).attr('x2', function () {
                return chart._vars.rotateAxis ? tipLineWidth : tipLineX + tipLineWidth / 2;
            }).attr('y1', function () {
                return chart._vars.rotateAxis ? tipLineY + tipLineHeight / 2 : 0;
            }).attr('y2', function () {
                return chart._vars.rotateAxis ? tipLineY + tipLineHeight / 2 : tipLineHeight;
            }).attr('fill', 'none').attr('shape-rendering', 'crispEdges').attr('stroke', 'black').attr('stroke-width', '1px');
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip();
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
            svg.selectAll('line.tip-line').remove();
        }
    });

    chart.displayValues();
    chart.generateClipPath();
    chart.generateBarThreshold();
}

/**generateBarGroups
 *
 * Paints the groups of the bars
 * @params chartContainer, barData, chart
 */
function generateBarGroups(chartContainer, barData, chart) {
    var container = chart.config.container,
        xAxisData = chart.currentData.xAxisData,
        yAxisData = chart.currentData.yAxisData,
        colors = chart._vars.color;

    var x = jvCharts.getAxisScale('x', xAxisData, container, chart._vars);
    var y = jvCharts.getAxisScale('y', yAxisData, container, chart._vars);

    var posCalc = jvCharts.getPosCalculations(barData, chart._vars, xAxisData, yAxisData, container, chart);

    var dataToPlot = jvCharts.getPlotData(barData, chart);

    var barGroups;
    if (xAxisData.dataType === 'STRING' || !xAxisData.hasOwnProperty('min')) {
        //Creates bar groups
        barGroups = chartContainer.data(dataToPlot).enter().append('g').attr('class', 'bar-group').attr('transform', function (d, i) {
            //Translate the bar groups by (outer padding * step) and the width of the bars (container.width / barData.length * i)
            return 'translate(' + (x.paddingOuter() * x.step() + x.step() * i) + ',0)';
        });
    } else if (xAxisData.dataType === 'NUMBER') {
        //Creates bar groups
        barGroups = chartContainer.data(dataToPlot).enter().append('g').attr('class', 'bar-group').attr('transform', function (d, i) {
            //Translate the bar groups by (outer padding * step) and the width of the bars (container.width / barData.length * i)
            return 'translate(0,' + (y.paddingOuter() * y.step() + y.step() * i) + ')';
        });
    }

    //Creates bars within bar groups
    var externalCounterForJ = -1;
    var bars = barGroups.selectAll('rect').data(function (d) {
        return d;
    }).enter().append('rect').attr('class', function (d, i, j) {
        if (i === 0) {
            externalCounterForJ++;
        }
        var keys = Object.keys(barData[0]);
        var filteredKeys = [];
        for (var k = 0; k < keys.length; k++) {
            if (keys[k] !== chart.currentData.dataTable.label) {
                filteredKeys.push(keys[k]);
            }
        }
        var label = String(barData[externalCounterForJ][chart.currentData.dataTable.label]).replace(/\s/g, '_').replace(/\./g, '_dot_');
        var legendVal = String(filteredKeys[i]).replace(/\s/g, '_').replace(/\./g, '_dot_');
        var thresholdDir;

        if (chart._vars.xAxisThreshold) {
            thresholdDir = chart.setThreshold(barData[externalCounterForJ][chart.currentData.dataTable.label]);
        } else {
            thresholdDir = chart.setThreshold(d);
        }

        return 'editable editable-bar bar-col-' + label + '-index-' + legendVal + ' highlight-class-' + label + ' rect ' + thresholdDir;
    }).attr('x', function (d, i) {
        return posCalc.startx(d, i);
    }).attr('y', function (d, i) {
        return posCalc.starty(d, i);
    }).attr('width', function (d, i) {
        return posCalc.startwidth(d, i);
    }).attr('height', function (d, i) {
        return posCalc.startheight(d, i);
    }).attr('fill', function (d, i) {
        if (chart._vars.seriesFlipped) {
            return jvCharts.getColors(colors, i, chart._vars.flippedLegendHeaders[i]);
        }
        return jvCharts.getColors(colors, i, chart._vars.legendHeaders[i]);
    }).attr('rx', 0).attr('ry', 0).attr('opacity', 0.9).attr('clip-path', function (d) {
        if (d > 30000000) {
            return 'url(#clip-above)';
        }
        return 'url(#clip-below)';
    });
    if (chart._vars.transitionTime > 0) {
        bars.transition().duration(800).ease(d3.easePolyOut).attr('x', function (d, i, j) {
            return posCalc.x(d, i, j);
        }).attr('y', function (d, i, j) {
            return posCalc.y(d, i, j);
        }).attr('width', function (d, i) {
            return posCalc.width(d, i);
        }).attr('height', function (d, i) {
            return posCalc.height(d, i);
        });
    } else {
        bars.attr('x', function (d, i, j) {
            return posCalc.x(d, i, j);
        }).attr('y', function (d, i, j) {
            return posCalc.y(d, i, j);
        }).attr('width', function (d, i) {
            return posCalc.width(d, i);
        }).attr('height', function (d, i) {
            return posCalc.height(d, i);
        });
    }

    return barGroups; //returns the bar containers
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],13:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.boxwhisker = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateBoxes = generateBoxes;
/**setBoxData
 *  gets cloud data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.xAxisData = chart.setAxisData('x', chart.data, chart._vars);
    chart.data.yAxisData = chart.setAxisData('y', chart.data, chart._vars);
};

/** paintBoxChart
 *
 *  @desc The initial starting point for bar chart, begins the drawing process. Must already have the data stored in the chart object
 */
function paint(transitionTime) {
    var chart = this;
    if (transitionTime || transitionTime === 0) {
        chart._vars.transitionTime = transitionTime;
    } else if (!chart._vars.transitionTime) {
        chart._vars.transitionTime = 800;
    }
    var dataObj = getBoxDataFromOptions(chart);
    var axisData = chart.getBarDataFromOptions();
    //assign current data which is used by all bar chart operations
    if (chart._vars.rotateAxis) {
        chart.currentData = dataObj;
    } else {
        chart.currentData = axisData;
    }
    //Overwrite any pre-existing zoom
    chart.config.zoomEvent = null;
    //generate svg dynamically based on legend data
    chart.generateSVG();
    chart.generateXAxis(axisData.xAxisData);
    chart.generateYAxis(axisData.yAxisData);

    chart.generateBoxes(dataObj);
}

function getEventData() {
    return {};
}

/** getBoxDataFromOptions
 *
 *  @desc Assigns the correct chart data to current data using the chart._vars
 */
function getBoxDataFromOptions(chart) {
    //creating these two data variables to avoid having to reference the chart object everytime
    var csv = chart.data.chartData,
        dataTable = chart.data.dataTable,
        min = Infinity,
        max = -Infinity,
        yAxis = [],
        dataObj = {},
        i = 0,
        data = {},
        yAxisLabel = dataTable.label,
        xAxisLabel = dataTable.value,
        xAxisData,
        yAxisData,
        keys = csv.map(function (d, i) {
        return d[yAxisLabel];
    }),
        keys2 = csv.map(function (d, i) {
        return d[xAxisLabel];
    }),
        unique = keys.filter(function (item, i, ar) {
        return ar.indexOf(item) === i;
    }),
        temp = [];

    for (var k = 0; k < unique.length; k++) {
        var tempData = csv.filter(function (d) {
            return d[yAxisLabel] == unique[k];
        });
        var returnData = tempData.map(function (d) {
            return d[xAxisLabel];
        });
        temp.push([unique[k], returnData]);
    }

    max = Math.max.apply(Math, keys2);
    min = Math.min.apply(Math, keys2);
    yAxis.push(min);
    yAxis.push(max);

    xAxisData = { 'label': yAxisLabel, 'dataType': 'STRING', 'values': unique };
    yAxisData = { 'label': xAxisLabel, 'dataType': 'NUMBER', 'values': yAxis };

    dataObj.chartData = temp;
    dataObj.dataTable = data.dataTable;
    chart._vars.color = data.color;

    dataObj.xAxisData = xAxisData;
    dataObj.yAxisData = yAxisData;
    data = {
        yAxisData: dataObj.yAxisData,
        xAxisData: dataObj.xAxisData
    };

    if (chart._vars.rotateAxis) {
        dataObj.xAxisData = data.yAxisData;
        dataObj.yAxisData = data.xAxisData;
    } else {
        dataObj.xAxisData = data.xAxisData;
        dataObj.yAxisData = data.yAxisData;
    }

    return dataObj;
};

/** generateBars
 *
 * @desc Does the actual painting of bars on the bar chart
 * @params boxData
 */
function generateBoxes(boxData) {
    var chart = this,
        svg = chart.svg,
        options = chart._vars,
        container = chart.config.container,
        height = container.height,
        width = container.width,
        x,
        boxChart,
        margin = { top: 0, right: 50, bottom: 70, left: 50 };

    if (options.rotateAxis) {
        x = d3.scaleBand().domain(boxData.chartData.map(function (d) {
            return d[0];
        })).rangeRound([0, height]).paddingInner(0.7).paddingOuter(0.3);
        boxChart = box().whiskers(iqr(1.5)).height(width).domain([boxData.xAxisData.values[0], boxData.xAxisData.values[1]]).showLabels(options.displayValues).flipped(options.rotateAxis).duration(options.transitionTime).chart(chart);
    } else {
        x = d3.scaleBand().domain(boxData.chartData.map(function (d) {
            return d[0];
        })).rangeRound([0, width]).paddingInner(0.7).paddingOuter(0.3);
        boxChart = box().whiskers(iqr(1.5)).height(height).domain([boxData.yAxisData.values[0], boxData.yAxisData.values[1]]).showLabels(options.displayValues).flipped(options.rotateAxis).duration(options.transitionTime).chart(chart);
    }
    //draw the boxplots
    svg.attr('class', 'box-plot').selectAll('.box').data(boxData.chartData).enter().append('g').attr('class', 'box-container').attr('style', 'pointer-events: all;').attr('transform', function (d) {
        if (options.rotateAxis) {
            return 'translate(' + margin.top + ',' + x(d[0]) + ')';
        }

        return 'translate(' + x(d[0]) + ',' + margin.top + ')';
    }).call(boxChart.width(x.bandwidth()));

    d3.selectAll('rect.box').attr('class', function (d, i) {
        return 'editable editable-box box-' + i + ' highlight-class-' + i + 'box';
    });
    hideLabelsOnOverlap(x, width, svg);
}

/**
 * @name hideLabelsOnOverlap
 * @desc determines if text on graph should be displayed or not
 */
function hideLabelsOnOverlap(x, width, svg) {
    var numSpacesBetween = x.domain().length - 1,
        totalBoxWidth = x.bandwidth() * x.domain().length,
        widthOfSpaces = (width - totalBoxWidth) / numSpacesBetween,
        xAxisLabelLengthLimit = x.bandwidth() + widthOfSpaces,
        ticks = svg.selectAll('.xAxis text');

    ticks.each(function (tick) {
        if (this.getBBox().width > xAxisLabelLengthLimit) {
            svg.selectAll('.xAxis text').attr('style', 'display:none');
            svg.selectAll('text.box').attr('style', 'display:none');
            svg.selectAll('text.whisker').attr('style', 'display:none');
        }
    });
}

/**
 * @name iqr
 * @desc Returns a function to compute the interquartile range.
 */
function iqr(k) {
    return function (d, i) {
        var q1 = d.quartiles[0],
            q3 = d.quartiles[2],
            iqr = (q3 - q1) * k,
            i = -1,
            j = d.length;
        while (d[++i] < q1 - iqr) {}
        while (d[--j] > q3 + iqr) {}
        return [i, j];
    };
}

//Inspired by http://informationandvisualization.de/blog/box-plot
var box = function box() {
    var width = 1,
        height = 1,
        duration = 0,
        domain = null,
        value = Number,
        whiskers = boxWhiskers,
        quartiles = boxQuartiles,
        showLabels = true,
        //whether or not to show text labels
    numBars = 4,
        curBar = 1,
        tickFormat = null,
        chart = {},
        flipped = false;

    //For each small multiple…
    function box(g) {
        g.each(function (data, i) {
            var d = data[1].sort(d3.ascending);
            var g = d3.select(this),
                n = d.length,
                min = d[0],
                max = d[n - 1],
                outlierLabel = data[0];

            //Compute quartiles. Must return exactly 3 elements.
            var quartileData = d.quartiles = quartiles(d);

            //Compute whiskers. Must return exactly 2 elements, or null.
            var whiskerIndices = whiskers && whiskers.call(this, d, i),
                whiskerData = whiskerIndices && whiskerIndices.map(function (i) {
                return d[i];
            });

            //Compute outliers. If no whiskers are specified, all data are 'outliers'.
            //We compute the outliers as indices, so that we can join across transitions!
            var outlierIndices = whiskerIndices ? d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);

            //Compute the new x-scale.
            if (flipped) {
                var x1 = d3.scaleLinear().domain(domain && domain.call(this, d, i) || [min, max]).range([0, height]);
            } else {
                var x1 = d3.scaleLinear().domain(domain && domain.call(this, d, i) || [min, max]).range([height, 0]);
            }

            //Retrieve the old x-scale, if this is an update.
            var x0 = this.__chart__ || d3.scaleLinear().domain([0, Infinity])
            //.domain([0, max])
            .range(x1.range());

            //Stash the new scale.
            this.__chart__ = x1;

            //Note: the box, median, and box tick elements are fixed in number,
            //so we only have to handle enter and update. In contrast, the outliers
            //and other elements are variable, so we need to exit them! Variable
            //elements also fade in and out.

            //Update outliers.
            var outlier = g.selectAll('circle.outlier').data(outlierIndices, Number);

            outlier = outlier.enter().append('g');

            if (flipped) {
                outlier.insert('circle', 'text').attr('class', 'outlier').attr('fill', 'white').attr('r', function () {
                    if (width > 10) {
                        return 5;
                    }

                    return width / 2;
                }).attr('cy', width / 2).attr('cx', function (i) {
                    return x0(d[i]);
                }).style('opacity', 1e-6).transition().duration(duration).attr('cx', function (i) {
                    return x1(d[i]);
                }).style('opacity', 1);

                outlier.append('text').text(function (i) {
                    return d[i];
                }).attr('y', width / 2 + 7).attr('x', function (i) {
                    return x1(d[i]) + 4;
                }).attr('class', 'outlier-label').attr('font-size', '10px').attr('style', function () {
                    if (!showLabels) {
                        return 'display:none;';
                    }

                    return '';
                });
                outlier.exit().transition().duration(duration).attr('cx', function (i) {
                    return x1(d[i]);
                }).style('opacity', 1e-6).remove();
            } else {
                outlier.insert('circle', 'text').attr('class', 'outlier').attr('fill', 'white').attr('r', function () {
                    if (width > 10) {
                        return 5;
                    }

                    return width / 2;
                }).attr('cx', width / 2).attr('cy', function (i) {
                    return x0(d[i]);
                }).style('opacity', 1e-6).transition().duration(duration).attr('cy', function (i) {
                    return x1(d[i]);
                }).style('opacity', 1);

                outlier.append('text').text(function (i) {
                    return d[i];
                }).attr('x', width / 2 + 7).attr('y', function (i) {
                    return x1(d[i]) + 4;
                }).attr('class', 'outlier-label').attr('font-size', '10px').attr('style', function () {
                    if (!showLabels) {
                        return 'display:none;';
                    }

                    return '';
                });

                outlier.transition().duration(duration).attr('cy', function (i) {
                    return x1(d[i]);
                }).style('opacity', 1);

                outlier.exit().transition().duration(duration).attr('cy', function (i) {
                    return x1(d[i]);
                }).style('opacity', 1e-6).remove();
            }

            outlier.on('mouseover', function (i) {
                if (chart.showToolTip) {
                    var _outlier = [d[i]];
                    var _data = { Outlier: _outlier, Label: outlierLabel };
                    var tipData = chart.setTipData(_data, i);

                    chart.tip.generateSimpleTip(tipData, _data);
                    chart.tip.d = d.data;
                    chart.tip.i = i;
                }
            }).on('mousemove', function (i) {
                if (chart.showToolTip) {
                    var _outlier2 = [d[i]];
                    var _data2 = { Outlier: _outlier2, Label: outlierLabel };
                    var tipData = chart.setTipData(_data2, i);

                    chart.tip.generateSimpleTip(tipData, _data2);
                    chart.tip.d = d.data;
                    chart.tip.i = i;
                }
            }).on('mouseout', function () {
                if (chart.showToolTip) {
                    chart.tip.hideTip();
                }
            });

            //set separate tooltips for quartiles and whiskers
            g = g.append('g').attr('class', 'inner-box-container').on('mouseover', function (label) {
                if (chart.showToolTip) {
                    var _data3 = {
                        Quartiles: d.quartiles,
                        Whiskers: whiskerData,
                        Label: label[0]
                    };
                    var tipData = chart.setTipData(_data3, i);

                    chart.tip.generateSimpleTip(tipData, _data3);
                    chart.tip.d = d.data;
                    chart.tip.i = i;
                }
            }).on('mousemove', function (label) {
                if (chart.showToolTip) {
                    var _data4 = {
                        Quartiles: d.quartiles,
                        Whiskers: whiskerData,
                        Label: label[0]
                    };
                    var tipData = chart.setTipData(_data4, i);

                    chart.tip.generateSimpleTip(tipData, _data4);
                    chart.tip.d = d.data;
                    chart.tip.i = i;
                }
            }).on('mouseleave', function () {
                if (chart.showToolTip) {
                    chart.tip.hideTip();
                }
            });

            //Update center line: the vertical line spanning the whiskers.
            var center = g.selectAll('line.center').data(whiskerData ? [whiskerData] : []);
            //vertical line
            if (flipped) {
                center.enter().insert('line', 'rect').attr('class', 'center').attr('y1', width / 2).attr('x1', function (d) {
                    return x0(d[0]);
                }).attr('y2', width / 2).attr('x2', function (d) {
                    return x0(d[1]);
                }).style('opacity', 1e-6).transition().duration(duration).style('opacity', 1).attr('x1', function (d) {
                    return x1(d[0]);
                }).attr('x2', function (d) {
                    return x1(d[1]);
                });

                center.transition().duration(duration).style('opacity', 1).attr('x1', function (d) {
                    return x1(d[0]);
                }).attr('x2', function (d) {
                    return x1(d[1]);
                });

                center.exit().transition().duration(duration).style('opacity', 1e-6).attr('x1', function (d) {
                    return x1(d[0]);
                }).attr('x2', function (d) {
                    return x1(d[1]);
                }).remove();
            } else {
                center.enter().insert('line', 'rect').attr('class', 'center').attr('x1', width / 2).attr('y1', function (d) {
                    return x0(d[0]);
                }).attr('x2', width / 2).attr('y2', function (d) {
                    return x0(d[1]);
                }).style('opacity', 1e-6).transition().duration(duration).style('opacity', 1).attr('y1', function (d) {
                    return x1(d[0]);
                }).attr('y2', function (d) {
                    return x1(d[1]);
                });

                center.transition().duration(duration).style('opacity', 1).attr('y1', function (d) {
                    return x1(d[0]);
                }).attr('y2', function (d) {
                    return x1(d[1]);
                });

                center.exit().transition().duration(duration).style('opacity', 1e-6).attr('y1', function (d) {
                    return x1(d[0]);
                }).attr('y2', function (d) {
                    return x1(d[1]);
                }).remove();
            }

            var hoverArea = g.selectAll('line.hover-area').data(whiskerData ? [whiskerData] : []);
            //vertical line
            if (flipped) {
                hoverArea.enter().insert('line', 'rect').attr('class', 'hover-area').attr('y1', width / 2).attr('x1', function (d) {
                    return x0(d[0]);
                }).attr('y2', width / 2).attr('x2', function (d) {
                    return x0(d[1]);
                }).style('opacity', 0).style('stroke-width', width).transition().duration(duration).style('opacity', 0).attr('x1', function (d) {
                    return x1(d[0]);
                }).attr('x2', function (d) {
                    return x1(d[1]);
                });

                hoverArea.transition().duration(duration).style('opacity', 0).attr('x1', function (d) {
                    return x1(d[0]);
                }).attr('x2', function (d) {
                    return x1(d[1]);
                });

                hoverArea.exit().transition().duration(duration).style('opacity', 0).attr('x1', function (d) {
                    return x1(d[0]);
                }).attr('x2', function (d) {
                    return x1(d[1]);
                }).remove();
            } else {
                hoverArea.enter().insert('line', 'rect').attr('class', 'hover-area').attr('x1', width / 2).attr('y1', function (d) {
                    return x0(d[0]);
                }).attr('x2', width / 2).attr('y2', function (d) {
                    return x0(d[1]);
                }).style('opacity', 0).style('stroke-width', width).transition().duration(duration).style('opacity', 0).attr('y1', function (d) {
                    return x1(d[0]);
                }).attr('y2', function (d) {
                    return x1(d[1]);
                });

                hoverArea.transition().duration(duration).style('opacity', 0).attr('y1', function (d) {
                    return x1(d[0]);
                }).attr('y2', function (d) {
                    return x1(d[1]);
                });

                hoverArea.exit().transition().duration(duration).style('opacity', 0).attr('y1', function (d) {
                    return x1(d[0]);
                }).attr('y2', function (d) {
                    return x1(d[1]);
                }).remove();
            }
            //Update innerquartile box.
            var box = g.selectAll('rect.box').data([quartileData]);
            if (flipped) {
                box.enter().append('rect').attr('fill', 'steelblue').attr('class', 'box').attr('y', 0).attr('x', function (d) {
                    return x0(d[2]) - Math.abs(x0(d[0]) - x0(d[2]));
                }).attr('height', width).attr('width', function (d) {
                    return Math.abs(x0(d[0]) - x0(d[2]));
                }).transition().duration(duration).attr('x', function (d) {
                    return x1(d[2]) - Math.abs(x1(d[0]) - x1(d[2]));
                }).attr('width', function (d) {
                    return Math.abs(x1(d[0]) - x1(d[2]));
                });

                box.transition().duration(duration).attr('x', function (d) {
                    return x1(d[2]) - Math.abs(x1(d[0]) - x1(d[2]));
                }).attr('width', function (d) {
                    return Math.abs(x1(d[0]) - x1(d[2]));
                });
            } else {
                box.enter().append('rect').attr('fill', 'steelblue').attr('class', 'box').attr('x', 0).attr('y', function (d) {
                    return x0(d[2]);
                }).attr('width', width).attr('height', function (d) {
                    return x0(d[0]) - x0(d[2]);
                }).transition().duration(duration).attr('y', function (d) {
                    return x1(d[2]);
                }).attr('height', function (d) {
                    return x1(d[0]) - x1(d[2]);
                });

                box.transition().duration(duration).attr('y', function (d) {
                    return x1(d[2]);
                }).attr('height', function (d) {
                    return x1(d[0]) - x1(d[2]);
                });
            }
            //Update median line.
            var medianLine = g.selectAll('line.median').data([quartileData[1]]);
            if (flipped) {
                medianLine.enter().append('line').attr('class', 'median').attr('y1', 0).attr('x1', x0).attr('y2', width).attr('x2', x0).transition().duration(duration).attr('x1', x1).attr('x2', x1);

                medianLine.transition().duration(duration).attr('x1', x1).attr('x2', x1);
            } else {
                medianLine.enter().append('line').attr('class', 'median').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).transition().duration(duration).attr('y1', x1).attr('y2', x1);

                medianLine.transition().duration(duration).attr('y1', x1).attr('y2', x1);
            }
            //Update whiskers.
            var whisker = g.selectAll('line.whisker').data(whiskerData || []);
            if (flipped) {
                whisker.enter().insert('line', 'circle, text').attr('class', 'whisker').attr('y1', 0).attr('x1', x0).attr('y2', 0 + width).attr('x2', x0).style('opacity', 1e-6).transition().duration(duration).attr('x1', x1).attr('x2', x1).style('opacity', 1);

                whisker.transition().duration(duration).attr('x1', x1).attr('x2', x1).style('opacity', 1);

                whisker.exit().transition().duration(duration).attr('x1', x1).attr('x2', x1).style('opacity', 1e-6).remove();
            } else {
                whisker.enter().insert('line', 'circle, text').attr('class', 'whisker').attr('x1', 0).attr('y1', x0).attr('x2', 0 + width).attr('y2', x0).style('opacity', 1e-6).transition().duration(duration).attr('y1', x1).attr('y2', x1).style('opacity', 1);

                whisker.transition().duration(duration).attr('y1', x1).attr('y2', x1).style('opacity', 1);

                whisker.exit().transition().duration(duration).attr('y1', x1).attr('y2', x1).style('opacity', 1e-6).remove();
            }
            //Compute the tick format.
            var format = tickFormat || x1.tickFormat(8);

            //Update box ticks.
            var boxTick = g.selectAll('text.box').data(quartileData);

            if (flipped) {
                boxTick.enter().append('text').attr('class', 'box').attr('dx', '.3em').attr('dy', function (d, i) {
                    return i & 1 ? 6 : -6;
                }).attr('y', function (d, i) {
                    return i & 1 ? +width : 0;
                }).attr('x', x0).attr('text-anchor', function (d, i) {
                    return i & 1 ? 'start' : 'end';
                }).attr('style', function () {
                    if (!showLabels) {
                        return 'display: none;';
                    }
                }).text(format).transition().duration(duration).attr('x', x1);

                boxTick.transition().duration(duration).text(format).attr('x', x1);
            } else {
                boxTick.enter().append('text').attr('class', 'box').attr('dy', '.3em').attr('dx', function (d, i) {
                    return i & 1 ? 6 : -6;
                }).attr('x', function (d, i) {
                    return i & 1 ? +width : 0;
                }).attr('y', x0).attr('text-anchor', function (d, i) {
                    return i & 1 ? 'start' : 'end';
                }).attr('style', function () {
                    if (!showLabels) {
                        return 'display: none;';
                    }
                }).text(format).transition().duration(duration).attr('y', x1);

                boxTick.transition().duration(duration).text(format).attr('y', x1);
            }
            //Update whisker ticks. These are handled separately from the box
            //ticks because they may or may not exist, and we want don't want
            //to join box ticks pre-transition with whisker ticks post-.
            var whiskerTick = g.selectAll('text.whisker').data(whiskerData || []);

            if (flipped) {
                whiskerTick.enter().append('text').attr('class', 'whisker').attr('dx', '.3em').attr('dy', 6).attr('y', width).attr('x', x0).attr('style', function () {
                    if (!showLabels) {
                        return 'display:none;';
                    }
                }).text(format).style('opacity', 1e-6).transition().duration(duration).attr('x', x1).style('opacity', 1);

                whiskerTick.transition().duration(duration).text(format).attr('x', x1).style('opacity', 1);

                whiskerTick.exit().transition().duration(duration).attr('x', x1).style('opacity', 1e-6).remove();
            } else {
                whiskerTick.enter().append('text').attr('class', 'whisker').attr('dy', '.3em').attr('dx', 6).attr('x', width).attr('y', x0).attr('style', function () {
                    if (!showLabels) {
                        return 'display:none;';
                    }
                }).text(format).style('opacity', 1e-6).transition().duration(duration).attr('y', x1).style('opacity', 1);

                whiskerTick.transition().duration(duration).text(format).attr('y', x1).style('opacity', 1);

                whiskerTick.exit().transition().duration(duration).attr('y', x1).style('opacity', 1e-6).remove();
            }
        });
        //d3.timer.flush();
        d3.timerFlush();
    }

    box.width = function (x) {
        if (!arguments.length) return width;
        width = x;
        return box;
    };

    box.height = function (x) {
        if (!arguments.length) return height;
        height = x;
        return box;
    };

    box.tickFormat = function (x) {
        if (!arguments.length) return tickFormat;
        tickFormat = x;
        return box;
    };

    box.duration = function (x) {
        if (!arguments.length) return duration;
        duration = x;
        return box;
    };

    function constant(x) {
        return function () {
            return x;
        };
    }
    box.domain = function (x) {
        if (!arguments.length) return domain;
        //domain = x == null ? x : d3.functor(x);
        domain = x == null ? x : constant(x);

        return box;
    };

    box.value = function (x) {
        if (!arguments.length) return value;
        value = x;
        return box;
    };

    box.whiskers = function (x) {
        if (!arguments.length) return whiskers;
        whiskers = x;
        return box;
    };

    box.showLabels = function (x) {
        if (!arguments.length) return showLabels;
        showLabels = x;
        return box;
    };

    box.flipped = function (x) {
        if (!arguments.length) return flipped;
        flipped = x;
        return box;
    };

    box.chart = function (x) {
        if (!arguments.length) return chart;
        chart = x;
        return box;
    };

    box.quartiles = function (x) {
        if (!arguments.length) return quartiles;
        quartiles = x;
        return box;
    };

    return box;
};

function boxWhiskers(d) {
    return [0, d.length - 1];
}

function boxQuartiles(d) {
    return [d3.quantile(d, 0.25), d3.quantile(d, 0.5), d3.quantile(d, 0.75)];
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],14:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.bubble = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateBubble = generateBubble;

/************************************************ Bubble functions ******************************************************/

function paint(transitionTime) {
    var chart = this,
        bubbleMargins = {
        top: 15,
        right: 15,
        left: 15,
        bottom: 15
    };
    if (transitionTime || transitionTime === 0) {
        chart._vars.transitionTime = transitionTime;
    } else if (!chart._vars.transitionTime) {
        chart._vars.transitionTime = 800;
    }
    if (!chart.smallerFontRepaint) {
        chart._vars.fontSizeMax = 80;
        chart.currentData = chart.data;
    } else {
        chart.currentData = JSON.parse(JSON.stringify(chart.data));
    }

    chart._vars.color = chart.data.color;

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, bubbleMargins);
    chart.generateVerticalLegend('generateBubble');
    chart.generateBubble(chart.currentData);
}

/**setData
 *  gets Bubble data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    //define color object for chartData
    chart.data.legendData = setBubbleLegendData(chart.data);
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData() {
    return {};
}

/**setBubbleLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setBubbleLegendData(data) {
    var legendArray = [],
        item = data.dataTable.label;

    for (var value in data.chartData) {
        if (data.chartData.hasOwnProperty(value)) {
            var legendElement = data.chartData[value][item];
            if (legendArray.indexOf(legendElement) === -1) {
                legendArray.push(legendElement);
            }
        }
    }

    return legendArray;
}

/** generateBubble
 *
 * paints the bubble  on the chart
 * @params bubble Data
 */
function generateBubble(bubbleData) {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container,
        width = container.width,
        height = container.height,
        pack = d3.pack().size([width, height]).padding(1.5),
        legendData = chart.data.legendData,
        valueKey = chart.data.dataTable.value,
        labelKey = chart.data.dataTable.label,
        colors = chart._vars.color;

    if (!chart._vars.legendHeaders) {
        chart._vars.legendHeaders = legendData;
    }
    var dataHeaders = chart._vars.legendHeaders;
    if (!chart._vars.legendHeaders) {
        chart._vars.legendHeaders = legendData;
    }
    var bubbleDataNew = jvCharts.getToggledData(bubbleData, dataHeaders),
        legendElementToggleArray = jvCharts.getLegendElementToggleArray(dataHeaders, legendData);
    if (legendElementToggleArray) {
        for (var j = 0; j < bubbleDataNew.length; j++) {
            for (var i = 0; i < legendElementToggleArray.length; i++) {
                if (legendElementToggleArray[i].element === bubbleDataNew[j][labelKey] && legendElementToggleArray[i].toggle === false) {
                    bubbleDataNew.splice(j, 1);
                }
            }
        }
    }
    svg.selectAll('.bubble').remove();
    //assigns the data to a hierarchy using parent-child relationships
    var root = d3.hierarchy({ children: bubbleDataNew }).sum(function (d) {
        return d[valueKey];
    }),
        bubble = svg.selectAll('.bubble').data(pack(root).leaves()).enter().append('g').attr('class', 'bubble').attr('transform', function (d) {
        return 'translate(' + d.x + ',' + d.y + ')';
    });

    bubble.append('circle').attr('fill', function (d, i) {
        var name = legendData.indexOf(d.data[labelKey]);
        return jvCharts.getColors(colors, name, d.data[labelKey]);
    }).attr('class', function (d, i) {
        return 'editable editable-bubble bubble-' + i + ' highlight-class-' + i;
    }).attr('r', function (d) {
        return d.r;
    }).on('mouseover', function (d, i) {
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d.data, i);
            //Draw tip line
            tipData.data.color = jvCharts.getColors(colors, tipData.index, d.data[labelKey]);
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d.data;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(0);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d.data, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
        }
    });

    bubble.append('text').attr('class', 'bubble-text').text(function (d) {
        return d.data[labelKey];
    }).attr('fill', 'white')
    //hide text if its too wide
    .attr('style', function (d) {
        if (this.clientWidth > d.r * 2) {
            return 'display: none';
        }
    })
    //center the text on the bubble
    .attr('transform', function (d, i) {
        var diameter = d.r * 2,
            textWidth = this.clientWidth,
            emptySpace = diameter - textWidth;

        if (emptySpace < 0) {
            return '';
        } else {
            return 'translate(-' + (d.r - emptySpace / 2) + ', 0)';
        }
    }).on('mouseover', function (d, i) {
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d.data, i);

            //Draw tip line
            tipData.data.color = jvCharts.getColors(colors, tipData.index, d.data[labelKey]);
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d.data;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(0);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d.data, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
        }
    });

    bubble.append('text').text(function (d) {
        return d.data[valueKey];
    }).attr('fill', 'white')
    //hide text if its too wide
    .attr('style', function (d) {
        if (this.clientWidth > d.r * 2) {
            return 'display: none';
        }

        return '';
    })
    //center the text on the bubble
    .attr('transform', function (d, i) {
        var diameter = d.r * 2,
            textWidth = this.clientWidth,
            emptySpace = diameter - textWidth;

        if (emptySpace < 0) {
            return '';
        }

        return 'translate(-' + (d.r - emptySpace / 2) + ',' + 15 + ')';
    }).on('mouseover', function (d, i) {
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d.data, i);

            //Draw tip line
            tipData.data.color = jvCharts.getColors(colors, tipData.index, d.data[labelKey]);
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d.data;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(0);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d.data, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
        }
    });
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],15:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.clustergram = {
    paint: paint,
    setData: setData,
    getEventData: null
};

jvCharts.prototype.generateClustergram = generateClustergram;

/************************************************ Clustergram functions ******************************************************/

/**setClustergramData
 *  gets heatmap data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;

    var leftTreeData = chart.data.chartData[0];
    var rightTreeData = chart.data.chartData[1];

    chart.leftLabels = {};
    chart.leftLabels.values = [];
    for (var k = 0; k < leftTreeData.children.length; k++) {
        if (leftTreeData.children[k].name) {
            chart.leftLabels.values.push(leftTreeData.children[k].name);
        }
    }

    chart.rightLabels = {};
    chart.rightLabels.values = [];
    for (var k = 0; k < rightTreeData.children.length; k++) {
        if (rightTreeData.children[k].name) {
            chart.rightLabels.values.push(rightTreeData.children[k].name);
        }
    }

    //define color object for chartData
}

function paint() {
    var chart = this;
    chart._vars.color = chart.data.color;
    chart.currentData = chart.data; //Might have to move into method bc of reference/value relationship
    var customMargin = {
        top: 20,
        right: 40,
        left: 0,
        bottom: 20
    };

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, customMargin);
    //chart.generateLegend(chart.currentData.legendData, 'generateClustergram');
    chart.generateClustergram();
}

/**generateClustergram
 *
 * paints the Clustergram on the chart
 * @params ClustergramData
 */
function generateClustergram() {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container;

    var leftTreeData = chart.data.chartData[0];
    var rightTreeData = chart.data.chartData[1];
    var gridData = chart.data.chartData[2];

    chart.data.yAxisData = [];
    chart.data.xAxisData = [];

    var size = gridData.length * 10;
    if (container.width > container.height) {
        if (size < container.width) {
            size = container.width;
        }
    } else {
        if (size < container.height) {
            size = container.height;
        }
    }

    //remove svg elements
    svg.selectAll("*").remove();

    // svg.append("rect")
    //     .attr("width", size)
    //     .attr("height", size)
    //     .style("fill", "none")
    //     .style("pointer-events", "all")
    //     .call(d3.zoom()
    //         .scaleExtent([1, 8])
    //         .on("zoom", zoomed));

    var vis = svg.append('g').attr('transform', 'translate(' + 0 + ',' + 0 + ')').attr('class', 'heatmap'),
        leftG = vis.append("g").attr("id", "left-tree"),
        bottomG = vis.append("g").attr("id", "bottom-tree"),
        heatG = vis.append("g").attr('class', 'clustergram-container').attr("id", "heat");

    var div = d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);

    //calc new width and height
    var newWidth = size / 4;
    var newHeight = size / 4;

    var leftTree = d3.cluster().size([newHeight, newWidth]);

    var root = d3.hierarchy(leftTreeData);
    leftTree(root);

    var className = "";
    var leftLink = leftG.selectAll(".cluster-link").data(root.descendants().slice(1)).enter().append("path").attr("class", function (d) {
        return "cluster-link " + className;
    }).style("fill", "none").style("stroke", "black").attr("d", function (d) {
        return "M" + d.y / 4 + "," + d.x + "V" + d.parent.x + "H" + d.parent.y / 4;
    });

    //childCount
    var leftChildCount = 0;
    var leftNode = leftG.selectAll(".cluster-node").data(root.descendants()).enter().append("g").attr("class", function (d) {
        return "cluster-node" + (d.children ? " cluster-node--internal" : " cluster-node--leaf");
    }).attr("transform", function (d) {
        return "translate(" + d.y / 4 + "," + d.x + ")";
    });

    leftNode.append("line").style("stroke", "black").attr("x1", function (d) {
        return d.children ? 0 : 0;
    }).attr("x2", function (d) {
        return d.children ? 0 : 15;
    });

    leftNode.append("text").attr("dy", 3).attr("x", function (d) {
        return d.children ? -8 : 0;
    }).style("text-anchor", function (d) {
        return "end";
    }).text(function (d) {
        if (!d.children) {
            chart.data.yAxisData.push(findPath(d));
            leftChildCount++;
        }
        // return d.data.name;
        if (d.data.name === "root") {
            return "";
        }
        return d.children ? d.data.name.replace(/_/g, ' ') : "";
    });

    //top Tree
    var topTree = d3.cluster().size([newWidth, newHeight]);

    var root = d3.hierarchy(rightTreeData);
    topTree(root);

    var topLink = bottomG.selectAll(".cluster-link").data(root.descendants().slice(1)).enter().append("path").attr("class", "cluster-link").style("fill", "none").style("stroke", "black").attr("d", function (d) {
        return "M" + d.x + "," + d.y / 4 + "V" + d.parent.y / 4 + "H" + d.parent.x;
    });

    //childCount
    var rightChildCount = 0;
    var rightNode = bottomG.selectAll(".cluster-node").data(root.descendants()).enter().append("g").attr("class", function (d) {
        return "cluster-node" + (d.children ? " cluster-node--internal" : " cluster-node--leaf");
    }).attr("transform", function (d) {
        return "translate(" + d.x + "," + d.y / 4 + ")rotate(30)";
    });

    rightNode.append("text").attr("dy", 8).style("text-anchor", function (d) {
        return d.children ? "end" : "start";
    }).attr("y", function (d) {
        return d.children ? -8 : 8;
    }).text(function (d) {
        if (!d.children) {
            chart.data.xAxisData.push(findPath(d));
            rightChildCount++;
        }
        if (d.data.name === "root") {
            return "";
        }
        return d.children ? d.data.name.replace(/_/g, ' ') : "";
    });

    var heatScores = [];
    for (var i = 0; i < gridData.length; i++) {
        var cell = gridData[i];
        heatScores.push(cell.value);
    }

    //heat variables
    var color = d3.scaleThreshold().domain(heatScores).range(["#fbf2d2", "#fee7a0", "#ffc665", "#fea743", "#fd8c3c", "#fb4b29", "#ea241e", "#d60b20", "#b10026", "#620023"]);

    var gridHeight = newHeight / leftChildCount;
    var gridWidth = newWidth / rightChildCount;

    chart._vars.clustergramGridWidth = gridWidth;
    chart._vars.clustergramGridHeight = gridHeight;

    //grid
    var heat = heatG.selectAll(".heat").data(gridData).enter().append("rect").attr("class", function (d) {
        return "rect";
    }).attr("x", function (d) {
        return d.x_index * gridWidth;
    }).attr("y", function (d) {
        return d.y_index * gridHeight;
    }).attr("width", function (d) {
        return gridWidth;
    }).attr("height", function (d) {
        return gridHeight;
    }).attr("stroke", function (d) {
        return "#E6E6E6";
    }).attr("stroke-width", function (d) {
        return "1px";
    }).style("fill", function (d) {
        return color(d.value);
    }).on("mouseover", function (d) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                tipData.color = color(d.value);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable, d3.event);
            }
        }
    }).on('mouseout', function (d) {
        chart.tip.hideTip();
    });

    chart.zoomed = function () {
        svg.attr("transform", d3.event.transform);
    };

    chart.chartDiv.select(".editable-svg").call(d3.zoom().scaleExtent([1 / 2, 8]).on("zoom", chart.zoomed));

    // align G tags
    chart._vars.leftTreeWidth = leftG.node().getBBox().width;
    chart._vars.topTreeHeight = bottomG.node().getBBox().height;
    var heatWidth = heatG.node().getBBox().width;
    var heatHeight = heatG.node().getBBox().height;
    leftG.attr("transform", "translate(" + 0 + "," + chart._vars.topTreeHeight + ")");
    bottomG.attr("transform", "translate(" + chart._vars.leftTreeWidth + "," + 0 + ")");
    heatG.attr("transform", "translate(" + chart._vars.leftTreeWidth + "," + chart._vars.topTreeHeight + ")");

    chart.config.container.height = heatHeight, chart.config.container.width = heatWidth;

    function findPath(child) {
        var str = "";
        while (child.parent) {
            str += child.data.name + ".";
            child = child.parent;
        }
        return str.slice(0, -1);
    }
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],16:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.gantt = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateGanttBars = generateGanttBars;
jvCharts.prototype.setGanttLegendData = setGanttLegendData;
jvCharts.prototype.setGanttAxisData = setGanttAxisData;

/************************************************ Gantt functions ******************************************************/

/**
*
* @param data
* @param dataTable
* @param colors
*/
function setData() {
    var chart = this;
    chart.data.legendData = chart.setGanttLegendData(chart.data);
    chart.data.xAxisData = chart.setGanttAxisData(chart, 'x');
    chart.data.yAxisData = chart.setGanttAxisData(chart, 'y');
    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData(event) {
    var chart = this;
    var ele = event.target.classList.value.split('bar-col-')[1];
    if (ele) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.group, [ele.replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    }
    return {};
}

function setGanttLegendData(data) {
    var legendArray = [];
    for (var i = 1; i <= Object.keys(data.dataTable).length; i++) {
        if (data.dataTable.hasOwnProperty(["start " + i])) {
            //check to make sure it has a matching end date
            if (data.dataTable.hasOwnProperty(["end " + i])) {
                legendArray.push(data.dataTable["start " + i]);
            }
        }
    }
    return legendArray;
}

function setGanttAxisData(chart, axis) {
    var axisData = [],
        data = chart.data,
        chartData = data.chartData,
        dataType;

    if (axis === 'x') {
        var label = data.dataTable.group;
        dataType = 'DATE';

        var numBars = data.legendData.length;
        //Loop through dataTable and assign labels based on how many groups there are
        var valueContainer = [];
        valueContainer.push(data.dataTable["start 1"]);
        valueContainer.push(data.dataTable["end 1"]);
        for (var i = 1; i < numBars; i++) {
            valueContainer.push(data.dataTable["start " + (i + 1)]);
            valueContainer.push(data.dataTable["end " + (i + 1)]);
        }

        //Get all the start and end dates and add them to axis data
        for (var i = 0; i < valueContainer.length; i++) {
            for (var ii = 0; ii < chartData.length; ii++) {
                if (chartData[ii][valueContainer[i]] != null) {
                    axisData.push(chartData[ii][valueContainer[i]]);
                }
            }
        }

        //Add any axis formatting to this object, need to use when painting
        chart._vars.xAxisFormatting = {};
    } else {
        dataType = "STRING";
        var label = data.dataTable.group;

        //Add any axis formatting to this object, need to use when painting
        chart._vars.yAxisFormatting = {};

        for (var i = 0; i < chartData.length; i++) {
            axisData.push(chartData[i][label]);
        }
    }

    return {
        'label': label,
        'values': axisData,
        'dataType': dataType
    };
}

function paint() {
    var chart = this;

    chart._vars.color = chart.data.color;

    chart.currentData = chart.data;

    chart.generateSVG(chart.currentData.legendData);
    chart.generateXAxis(chart.currentData.xAxisData);
    chart.generateYAxis(chart.currentData.yAxisData);
    chart.generateLegend(chart.currentData.legendData, 'generateGanttBars');
    chart.drawGridlines(chart.currentData.xAxisData);
    chart.generateGanttBars(chart.currentData);
    if (typeof chart.currentData.xAxisScale.ticks === "function") {
        chart.formatXAxisLabels(chart.currentData.xAxisScale.ticks().length);
    } else {
        chart.formatXAxisLabels(chart.currentData.xAxisScale.domain().length);
    }
}

function generateGanttBars(ganttData) {
    var chart = this,
        svg = chart.svg,
        colors = ganttData.color,
        container = chart.config.container,
        yAxisData = ganttData.yAxisData;

    //Remove existing bars from page
    svg.selectAll("g.gantt-container").remove();
    var bars = svg.append("g").attr("class", "gantt-container"),
        dataHeaders = chart._vars.legendHeaders ? chart._vars.legendHeaders : ganttData.legendData,
        ganttDataNew = jvCharts.getToggledData(ganttData, dataHeaders),
        x = jvCharts.getAxisScale('x', ganttData.xAxisData, container, chart._vars),
        y = jvCharts.getAxisScale('y', ganttData.yAxisData, container, chart._vars),
        sampleData = ganttDataNew;

    chart._vars.rotateAxis = true;

    var numBars = ganttData.legendData.length;
    var ganttBars = [];
    //create array of start dates and end dates to iterate through
    var startDates = [];
    var endDates = [];
    for (var i = 1; i <= numBars; i++) {
        startDates.push(chart.currentData.dataTable["start " + i]);
        endDates.push(chart.currentData.dataTable["end " + i]);
    }

    for (var ii = 0; ii < numBars; ii++) {
        var externalCounterForJ = -1;
        ganttBars[ii] = bars.selectAll(".gantt-bar" + ii).data(sampleData).enter().append("rect").attr('class', function (d, i, j) {
            externalCounterForJ++;
            var label = String(sampleData[externalCounterForJ][chart.currentData.dataTable.group]).replace(/\s/g, '_').replace(/\./g, '_dot_');

            return 'gantt-bar' + ii + ' editable editable-bar bar-col-' + label + '-index-' + ii + ' highlight-class-' + label + ' rect ';
        }).attr("width", 0).attr("height", y.bandwidth() / numBars).attr("x", function (d, i) {
            if (d[startDates[ii]]) {
                return x(new Date(d[startDates[ii]]));
            }
            return 0;
        }).attr("y", function (d, i) {
            return y(d[yAxisData.label]) + y.bandwidth() / numBars * ii;
        }).attr("rx", 3).attr("ry", 3).attr("fill", function (d, i, j) {
            var typeVal = chart.currentData.dataTable["Type" + (ii + 1)];
            if (chart._vars.legendHeaders) {
                var color = jvCharts.getColors(colors, 0, chart._vars.legendHeaders[ii]);
            } else {
                var color = jvCharts.getColors(colors, 0, chart.currentData.legendData[ii]);
            }
            return color;
        });

        ganttBars[ii].transition().duration(400).delay(100).attr("width", function (d, i) {
            var width = x(new Date(d[endDates[ii]])) - x(new Date(d[startDates[ii]])); //(x(d.StartDate) - x(d.EndDate));
            if (width >= 0) {
                return width;
            } else {
                return 0;
            }
        });
    }
    var externalCounterForJJ = -1;
    var dataToPlot = jvCharts.getPlotData(ganttDataNew, chart);
    var eventGroups = bars.selectAll(".event-rect").data(dataToPlot).enter().append('rect').attr("class", "event-rect").attr('class', function (d, i, j) {
        externalCounterForJJ++;
        var label = String(sampleData[externalCounterForJJ][chart.currentData.dataTable.group]).replace(/\s/g, '_').replace(/\./g, '_dot_');
        return 'event-rect bar-col-' + label;
    }).attr("x", 0).attr("y", function (d, i) {
        return container.height / ganttDataNew.length * i;
    }).attr("width", container.width).attr("height", function (d, i) {
        return container.height / ganttDataNew.length;
    }).attr("fill", "transparent").attr("transform", "translate(0,0)");
    eventGroups.on("mouseover", function (d, i, j) {
        // Transitions in D3 don't support the 'on' function They only exist on selections. So need to move that event listener above transition and after append
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d, i);
            //Draw tip
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on("mousemove", function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on("mouseout", function (d) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
        }
    });

    var currentDate = new Date();
    var dateData = [currentDate];
    //Draws a line representing the current date
    svg.selectAll(".currentDateLine").data(dateData).enter().append("line").attr("x1", function (d, i) {
        return x(d);
    }).attr("x2", function (d, i) {
        return x(d);
    }).attr("y1", function (d, i) {
        return "0px";
    }).attr("y2", function (d, i) {
        return chart.config.container.height;
    }).attr("class", "currentDateLine").attr("stroke", chart._vars.axisColor).attr("stroke-width", chart._vars.STROKE_WIDTH).attr("stroke-dasharray", "3, 3");

    svg.selectAll(".currentDateLabel").data(dateData).enter().append("text").text(function () {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;
        return today;
    }).attr("x", function (d, i) {
        return x(d);
    }).attr("y", function (d, i) {
        return "-10px";
    }).attr("text-anchor", "middle").attr('fill', chart._vars.fontColor);
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],17:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.heatmap = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateHeatMap = generateHeatMap;

/************************************************ HeatMap functions ******************************************************/

function quantized(chart, min, max) {
    var bucketCount = chart._vars.buckets,
        sectionValue = (max - min) / bucketCount,
        quantizedArray = [];
    for (var i = 0; i < bucketCount; i++) {
        quantizedArray[i] = min + i * sectionValue;
    }
    return quantizedArray;
}

/**setData
 *  gets heatmap data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this,
        axisNames = setHeatAxisNames(chart.data);
    chart.data.xAxisData = axisNames.xAxisData;
    chart.data.yAxisData = axisNames.yAxisData;
    chart.data.processedData = setProcessedData(chart, chart.data, chart.data.xAxisData.values, chart.data.yAxisData.values);
    //define color object for chartData
    chart._vars.color = jvCharts.setChartColors(chart._vars.color, chart.data.xAxisData.values, chart.colors);
    chart.data.heatData = setHeatmapLegendData(chart, chart.data);
}

function getEventData(event, mouse) {
    var chart = this,

    //determine if the click event happens inside the container
    brushContainer = chart.chartDiv.select('.' + chart.config.type + '-container').node(),
        containerBox = brushContainer.getBoundingClientRect(),
        x = mouse[0],
        y = mouse[1],
        insideContainer = false;

    if (x < containerBox.right && y < containerBox.bottom && x > containerBox.left && y > containerBox.top) {
        insideContainer = true;
    }

    if (insideContainer && event.target.__data__) {
        var _data;

        var data = event.target.__data__;
        return {
            data: (_data = {}, _defineProperty(_data, chart.currentData.dataTable.heat, [data.value]), _defineProperty(_data, chart.currentData.dataTable.x, [data.xAxisName]), _defineProperty(_data, chart.currentData.dataTable.y, [data.yAxisName]), _data),
            node: event.target
        };
    } else if (insideContainer) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

function setHeatmapLegendData(chart, data) {
    var heatData = void 0;

    chart._vars.colors = organizeColors(chart);
    data.heatScores.sort(function (a, b) {
        return a - b;
    });

    chart.data.colorScale = d3.scaleQuantile().domain(data.heatScores).range(chart._vars.colors);

    if (chart._vars.quantiles === true) {
        var temp = chart.data.colorScale.quantiles();
        if (temp[0] === 0) {
            heatData = chart.data.colorScale.quantiles();
        } else {
            heatData = [0].concat(chart.data.colorScale.quantiles());
        }
    } else {
        heatData = quantized(chart, data.heatScores[0], data.heatScores[data.heatScores.length - 1]);
    }

    return heatData;
}

function organizeColors(chart) {
    var colorSelectedBucket = [],
        sValue = chart._vars.buckets,
        newColors = [],
        bucketMapper = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        bucketCount = bucketMapper[sValue - 1],
        colors = void 0;

    for (var c in chart._vars.colors) {
        if (chart._vars.colors.hasOwnProperty(c)) {
            colorSelectedBucket.push(chart._vars.colors[c]);
        }
    }

    for (var i = 0; i < bucketCount; i++) {
        if (i >= bucketCount / 2) {
            newColors[i] = colorSelectedBucket[Math.round((i + 1) / bucketCount * 20) - 1];
        } else {
            newColors[i] = colorSelectedBucket[Math.round(i / bucketCount * 20)];
        }
    }

    colors = newColors.slice(0);
    return colors;
}

function setHeatAxisNames(data) {
    var chartData = data.chartData,
        xAxisName = data.dataTable.x,
        yAxisName = data.dataTable.y,
        xAxisArray = [],
        yAxisArray = [],
        returnObj = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = data.dataTableKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (key.vizType === 'x') {
                returnObj.xAxisData = {};
                returnObj.xAxisData.dataType = key.type;
                returnObj.xAxisData.label = data.dataTable.x;
            } else if (key.vizType === 'y') {
                returnObj.yAxisData = {};
                returnObj.yAxisData.dataType = key.type;
                returnObj.yAxisData.label = data.dataTable.y;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = chartData[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var ele = _step2.value;

            if (xAxisArray.indexOf(ele[xAxisName]) === -1) {
                xAxisArray.push(ele[xAxisName]);
                //TODO make into 1 function for min max... waste of space
                if (returnObj.xAxisData.dataType === 'NUMBER') {
                    //push min and max info
                    if (!returnObj.xAxisData.min) {
                        returnObj.xAxisData.min = ele[xAxisName];
                    } else if (ele[xAxisName] < returnObj.xAxisData.min) {
                        returnObj.xAxisData.min = ele[xAxisName];
                    }

                    if (!returnObj.xAxisData.max) {
                        returnObj.xAxisData.max = ele[xAxisName];
                    } else if (ele[xAxisName] < returnObj.xAxisData.max) {
                        returnObj.xAxisData.max = ele[xAxisName];
                    }
                }
            }
            if (yAxisArray.indexOf(ele[yAxisName]) === -1) {
                yAxisArray.push(ele[yAxisName]);
                if (returnObj.yAxisData.dataType === 'NUMBER') {
                    //push min and max info
                    if (!returnObj.yAxisData.min) {
                        returnObj.yAxisData.min = ele[yAxisName];
                    } else if (ele[yAxisName] < returnObj.yAxisData.min) {
                        returnObj.yAxisData.min = ele[yAxisName];
                    }

                    if (!returnObj.yAxisData.max) {
                        returnObj.yAxisData.max = ele[yAxisName];
                    } else if (ele[yAxisName] < returnObj.yAxisData.max) {
                        returnObj.yAxisData.max = ele[yAxisName];
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    returnObj.xAxisData.values = xAxisArray;
    returnObj.yAxisData.values = yAxisArray;

    return returnObj;
}

function setProcessedData(chart, data, xAxisArray, yAxisArray) {
    var chartData = data.chartData,
        xAxisName = data.dataTable.x,
        yAxisName = data.dataTable.y,
        heat = data.dataTable.heat,
        dataArray = [],
        keys;

    data.heatScores = [];
    /*Assign each name a number and place matrix coordinates inside of dataArray */
    for (var i = 0; i < chartData.length; i++) {
        dataArray.push({
            value: chartData[i][heat],
            xAxisName: chartData[i][xAxisName],
            yAxisName: chartData[i][yAxisName]
        });

        keys = Object.keys(data.dataTable);
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var key = _step3.value;

                if (key.indexOf('tooltip') > -1) {
                    dataArray[i][key] = chartData[i][data.dataTable[key]];
                }
            }

            //This array stores the values as numbers
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        data.heatScores.push(chartData[i][heat]);
        for (var j = 0; j < xAxisArray.length; j++) {
            if (xAxisArray[j] === dataArray[i].xAxisName) {
                dataArray[i].xAxis = j;
                break;
            }
        }
        for (var _j = 0; _j < yAxisArray.length; _j++) {
            if (yAxisArray[_j] === dataArray[i].yAxisName) {
                dataArray[i].yAxis = _j;
                break;
            }
        }
    }

    return dataArray;
}

function paint() {
    var chart = this,
        customMargin = {
        top: 0,
        right: 40,
        left: 0,
        bottom: 20
    };

    chart._vars.color = chart.data.color;
    chart.currentData = chart.data; //Might have to move into method bc of reference/value relationship

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, customMargin);
    //chart.generateLegend(chart.currentData.legendData, 'generateHeatMap');
    chart.generateHeatMap();
}

/**generateHeatMap
 *
 * paints the HeatMap on the chart
 * @params HeatMapData
 */
function generateHeatMap() {
    var chart = this,
        svg = chart.svg,
        colors = chart._vars.colors,
        quantiles = chart._vars.quantiles,
        data = chart.data.processedData,
        toggleLegend = !chart._vars.toggleLegend,
        heatMapData = chart.currentData,
        gridSize = chart._vars.heatGridSize,
        legendSpacing = chart._vars.heatLegendSpacing,
        vis,
        yAxisTitle;

    d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);
    vis = svg.append('g').attr('transform', 'translate(0,0)').attr('class', 'heatmap');

    yAxisTitle = vis.selectAll('.heatmap').data([heatMapData.dataTable.y]);

    yAxisTitle.enter().append('text').attr('class', 'axisLabels bold').attr('x', -21).attr('y', -5).attr('text-anchor', 'end').attr('transform', function () {
        return 'translate(-' + (chart._vars.heatmapYmargin + 10) + ',' + 0 + ')rotate(-90)';
    }).text(function (d) {
        return d;
    });

    yAxisTitle.exit().remove();
    var formatType = jvCharts.jvFormatValueType(chart.currentData.yAxisData.values, chart.currentData.yAxisData.dataType);

    var yAxisSection = vis.append('svg:g').attr('class', 'yAxisSection');

    var yAxis = yAxisSection.selectAll('.xAxis').data(heatMapData.yAxisData.values).enter().append('svg:g');

    yAxis.append('text').text(function (d) {
        var str = jvCharts.jvFormatValue(d, formatType);
        if (str.length > 15) {
            return str.substring(0, 14) + '...';
        }
        return str;
    }).attr('x', 0).attr('y', function (d, i) {
        return i * gridSize;
    }).style('text-anchor', 'end').style('font-size', chart._vars.fontSize).attr('transform', 'translate(-6,' + gridSize / 1.5 + ')').attr('class', 'rowLabel pointer').on('click', function (d) {
        //removing styling
        d3.selectAll('.rowLabel').classed('text-highlight', false);
        d3.selectAll('.colLabel').classed('text-highlight', false);
        d3.selectAll('.heat').classed('rect-highlight', false);
        d3.selectAll('.heat').classed('rect-border', false);

        var paintBool = true;
        if (d === chart._vars.selectedX) {
            chart._vars.selectedX = '';
            paintBool = false;
        } else {
            chart._vars.selectedX = d;
        }

        //fade all rects except in this row
        d3.selectAll('.heat').classed('rect-highlight', function (r) {
            for (var i = 0; i < chart.currentData.yAxisData.values.length; i++) {
                if (chart.currentData.yAxisData.values[i] === d && d) {
                    if (r.yAxis !== i && paintBool) {
                        return true;
                    }
                }
            }
            return false;
        });
    });

    yAxis.append('title').text(function (d) {
        return d;
    });

    var xAxisTitle = vis.selectAll('.xAxisTitle').data([heatMapData.dataTable.x]);

    xAxisTitle.enter().append('text').attr('class', 'axisLabels bold').attr('x', 6).attr('y', 9).attr('transform', 'translate(0, -' + (chart._vars.heatmapXmargin - 10) + ')').text(function (d) {
        return d;
    });

    xAxisTitle.exit().remove();

    var xAxisSection = vis.append('svg:g').attr('class', 'xAxisSection');

    var xAxis = xAxisSection.selectAll('.xAxis').data(heatMapData.xAxisData.values).enter().append('svg:g');

    formatType = jvCharts.jvFormatValueType(chart.currentData.xAxisData.values, chart.currentData.xAxisData.dataType);

    xAxis.append('text').text(function (d) {
        var str = jvCharts.jvFormatValue(d, formatType);
        if (str.length > 15) {
            return str.substring(0, 14) + '...';
        }
        return str;
    }).style('text-anchor', 'start').attr('x', 6).attr('y', 7).attr('class', 'colLabel pointer').attr('transform', function (d, i) {
        return 'translate(' + i * gridSize + ', -6)rotate(-45)';
    }).attr('title', function (d) {
        return d;
    }).style('font-size', chart._vars.fontSize).on('click', function (d) {
        //removing styling
        d3.selectAll('.rowLabel').classed('text-highlight', false);
        d3.selectAll('.colLabel').classed('text-highlight', false);
        d3.selectAll('.heat').classed('rect-highlight', false);
        d3.selectAll('.heat').classed('rect-border', false);

        var paintBool = true;
        if (d === chart._vars.selectedX) {
            chart._vars.selectedX = '';
            paintBool = false;
        } else {
            chart._vars.selectedX = d;
        }
        //fade all rects except in this column
        d3.selectAll('.heat').classed('rect-highlight', function (r) {
            for (var i = 0; i < chart.currentData.xAxisData.values.length; i++) {
                if (chart.currentData.xAxisData.values[i] === d) {
                    if (r.xAxis !== i && paintBool) {
                        return true;
                    }
                }
            }
            return false;
        });
    });

    xAxis.append('title').text(function (d) {
        return d;
    });

    var width = heatMapData.xAxisData.values.length * gridSize;
    var height = heatMapData.yAxisData.values.length * gridSize;
    var formatValueType = jvCharts.jvFormatValueType(chart.data.heatData);

    //vertical lines
    var vLine = vis.append('svg:g').attr('class', 'vLineSection');

    vLine.selectAll('.vLineSection').data(d3.range(heatMapData.xAxisData.values.length + 1)).enter().append('line').attr('x1', function (d) {
        return d * gridSize;
    }).attr('x2', function (d) {
        return d * gridSize;
    }).attr('y1', 0).attr('y2', height).style('stroke', chart._vars.axisColor);

    //horizontal lines
    var hLine = vis.append('svg:g').attr('class', 'heatmap-container');

    hLine.selectAll('.heatmap-container').data(d3.range(heatMapData.yAxisData.values.length + 1)).enter().append('line').attr('x1', 0).attr('x2', width).attr('y1', function (d) {
        return d * gridSize;
    }).attr('y2', function (d) {
        return d * gridSize;
    }).style('stroke', chart._vars.axisColor);

    var heatMap = vis.append('svg:g').attr('class', 'heatSection');

    heatMap.selectAll('.heatSection').data(data).enter().append('rect').attr('x', function (d) {
        return d.xAxis * gridSize;
    }).attr('y', function (d) {
        return d.yAxis * gridSize;
    }).attr('rx', 2).attr('ry', 2).attr('class', 'heat').attr('width', gridSize - 1).attr('height', gridSize - 1).style('fill', function (d) {
        if (quantiles === true) {
            if (chart._vars.domainArray.length === 0 || d.value >= chart._vars.domainArray[0] && d.value <= chart._vars.domainArray[1]) {
                return chart.data.colorScale(d.value);
            }
            return 'white';
        }
        if (chart._vars.domainArray.length === 0 || d.value >= chart._vars.domainArray[0] && d.value <= chart._vars.domainArray[1]) {
            return getQuantizedColor(chart.data.heatData, d.value);
        }
        return 'white';
    }).on('mouseover', function (d, i) {
        //Get tip data
        var tipData = chart.setTipData(d, i);
        tipData.color = chart.data.colorScale(d.value);

        //Draw tip
        chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
        chart.tip.d = d;
        chart.tip.i = i;
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function () {
        chart.tip.hideTip();
    }).on('dblclick', function (d) {
        chart.clicked = !chart.clicked;
        if (chart.clicked) {
            //border around selected rect
            d3.select(this).classed('rect-border', true);
            //Fade row labels
            d3.selectAll('.rowLabel').classed('text-highlight', function (r, ri) {
                return ri != d.yAxis;
            });
            //fade column labels
            d3.selectAll('.colLabel').classed('text-highlight', function (r, ri) {
                return ri != d.xAxis;
            });
            //fade all rects except selected
            d3.selectAll('.heat').classed('rect-highlight', function (r) {
                return r.yAxis != d.yAxis || r.xAxis != d.xAxis;
            });
        } else {
            //removing styling
            d3.selectAll('.rowLabel').classed('text-highlight', false);
            d3.selectAll('.colLabel').classed('text-highlight', false);
            d3.selectAll('.heat').classed('rect-highlight', false);
            d3.selectAll('.heat').classed('rect-border', false);
        }
    });

    chart.chartDiv.select('svg.heatLegend').remove();

    if (toggleLegend) {
        var legendContainer = chart.chartDiv.append('svg').style('top', chart.config.margin.top + 'px').style('background', chart._vars.backgroundColor).attr('class', 'heatLegend').attr('width', chart.config.heatWidth);

        var legend = legendContainer.selectAll('.legend').data(chart.data.heatData).enter().append('g').attr('transform', function (d, i) {
            return 'translate(0, ' + gridSize * i + ' )';
        });

        legend.append('rect').attr('class', 'legend').attr('width', gridSize).attr('height', gridSize).style('fill', function (d, i) {
            return colors[i];
        }).on('click', function () {
            return d3.selectAll('.heat').classed('rect-highlight', false);
        })
        //removing styling
        //fade all rects except selected
        .on('dblclick', function (d) {
            return d3.selectAll('.heat').classed('rect-highlight', function (r) {
                return r.value < d;
            });
        });

        legend.append('text').attr('class', 'legendText').attr('x', gridSize + legendSpacing).attr('y', gridSize - legendSpacing).text(function (d) {
            if (isNaN(d)) {
                return d;
            }
            return jvCharts.jvFormatValue(d, formatValueType);
        }).style('fill', chart._vars.black);
    }

    function getQuantizedColor(quantizedArray, value) {
        for (var i = 1; i < quantizedArray.length; i++) {
            if (value < quantizedArray[i]) {
                return colors[i - 1];
            }
        }
        return colors[quantizedArray.length - 1];
    }
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],18:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.line = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateLine = generateLine;
jvCharts.prototype.setLineThresholdData = setLineThresholdData;

/************************************************ Line functions ******************************************************/

/**setLineData
 *  gets line data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    //sort chart data if there is a sort type and label in the _vars
    if (chart._vars.sortType) {
        if (chart._vars.sortLabel && chart._vars.sortType !== 'default') {
            chart.organizeChartData(chart._vars.sortLabel, chart._vars.sortType);
        }
    }
    chart.data.legendData = setBarLineLegendData(chart.data);
    chart.data.xAxisData = chart.setAxisData('x', chart.data);
    chart.data.yAxisData = chart.setAxisData('y', chart.data);

    if (chart._vars.seriesFlipped) {
        chart.setFlippedSeries(chart.data.dataTableKeys);
        chart.flippedData.color = jvCharts.setChartColors(chart._vars.color, chart.flippedData.legendData, chart.colors);
    }

    if (chart.data.dataTable.hasOwnProperty('series')) {
        chart.data.chartData = setSeriesData(chart.data.chartData, chart.data.dataTable, chart.data.legendData);
    }

    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData(event) {
    var chart = this;
    if (event.target.classList.value.split('bar-col-')[1]) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.label, [event.target.classList.value.split('bar-col-')[1].replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    } else if (event.target.classList.value.indexOf('line-container') > -1) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

/**
 * @name setSeriesData
 * @desc Sets chartData to contain a series data if the series field exists in visual panel
 */
function setSeriesData(data, dataTable, legendDataArray) {
    var newChartData = [];
    //Get unique label list
    var labelList = [];
    for (var i = 0; i < data.length; i++) {
        var add = true;
        for (var j = 0; j < labelList.length; j++) {
            if (data[i][dataTable.label] === labelList[j]) {
                add = false;
                break;
            }
        }
        if (add) {
            labelList.push(data[i][dataTable.label]);
        }
    }
    //Iterate over label list
    var newData = [];
    for (var _i = 0; _i < labelList.length; _i++) {
        var dataObj = {};
        dataObj[dataTable.label] = labelList[_i];
        for (var _j = 0; _j < data.length; _j++) {
            if (data[_j][dataTable.label] === labelList[_i]) {
                var newEntry = data[_j][dataTable.series] + ' ' + dataTable['value 1'];
                dataObj[newEntry] = data[_j][dataTable['value 1']];
            }
        }
        newData.push(dataObj);
    }
    return newData;
}

/**setBarLineLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend tex
 */
function setBarLineLegendData(data) {
    var legendArray = [];

    if (data.dataTable.hasOwnProperty('series')) {
        for (var i = 0; i < data.chartData.length; i++) {
            var addToLegend = true;
            for (var j = 0; j < legendArray.length; j++) {
                var entry = data.chartData[i][data.dataTable.series] + ' ' + data.dataTable['value 1'];
                if (entry === legendArray[j]) {
                    addToLegend = false;
                    break;
                }
            }
            if (addToLegend) {
                var newEntry = data.chartData[i][data.dataTable.series] + ' ' + data.dataTable['value 1'];
                legendArray.push(newEntry);
            }
        }
    } else {
        for (var item in data.dataTable) {
            if (data.dataTable.hasOwnProperty(item)) {
                if (item !== 'label' && item.indexOf('tooltip') === -1) {
                    legendArray.push(data.dataTable[item]);
                }
            }
        }
    }

    return legendArray;
}
/**paintLineChart
 *
 * The initial starting point for line chart, begins the drawing process. Must already have the data stored in the chart
 * object
 */
function paint() {
    var chart = this;
    //Uses the original data and then manipulates it based on any existing options
    var dataObj = chart.getBarDataFromOptions();

    //assign current data which is used by all bar chart operations
    chart.currentData = dataObj;

    //generate svg dynamically based on legend data
    chart.generateSVG(dataObj.legendData);
    chart.generateXAxis(dataObj.xAxisData);
    chart.generateYAxis(dataObj.yAxisData);
    chart.generateLegend(dataObj.legendData, 'generateLine');
    if (chart._vars.rotateAxis) {
        chart.formatXAxisLabels(dataObj.xAxisScale.ticks().length);
    } else {
        chart.formatXAxisLabels(dataObj.xAxisScale.domain().length);
    }

    chart.generateLine(dataObj);
}

/**generateLine
 *
 * Paints the lines
 * @params lineData
 */
function generateLine(lineData) {
    var chart = this,
        svg = chart.svg;

    svg.selectAll('g.' + chart.config.type + '-container').remove();
    var lines = svg.append('g').attr('class', chart.config.type + '-container').selectAll('g');

    var dataHeaders = lineData.legendData;

    if (chart._vars.seriesFlipped && chart._vars.flippedLegendHeaders) {
        dataHeaders = chart._vars.flippedLegendHeaders;
    } else if (chart._vars.legendHeaders) {
        dataHeaders = chart._vars.legendHeaders;
    }

    var lineDataNew = jvCharts.getToggledData(lineData, dataHeaders);

    //If it's an area chart, add the area
    if (chart.config.type === 'area') {
        chart.fillArea(lineDataNew);
    }

    generateLineGroups(lines, lineDataNew, chart);
    var eventGroups = jvCharts.generateEventGroups(lines, lineDataNew, chart);

    eventGroups.on('mouseover', function (d, i, j) {
        //Transitions in D3 don't support the 'on' function They only exist on selections. So need to move that event listener above transition and after append
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d, i);

            //Draw tip
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        chart.tip.hideTip();
        svg.selectAll('.tip-line').remove();
    });

    chart.displayValues();
    chart.generateClipPath();
    chart.generateLineThreshold();

    return lines;
}

/**generateLineGroups
 *
 * Paints the groups of the lines
 * @params chartContainer, barData, chart
 */
function generateLineGroups(lineContainer, lineData, chart) {
    var container = chart.config.container,
        xAxisData = chart.currentData.xAxisData,
        yAxisData = chart.currentData.yAxisData,
        legendData = chart.currentData.legendData,
        colors = chart._vars.color,
        lines,
        lineLength = lineData.length,
        legendLength = legendData.length;

    //Get Position Calculations
    var x = jvCharts.getAxisScale('x', xAxisData, container, chart._vars, 'no-padding');
    var y = jvCharts.getAxisScale('y', yAxisData, container, chart._vars, 'no-padding');

    var xTranslate, yTranslate;

    if (chart._vars.rotateAxis === true) {
        xTranslate = function xTranslate(d, i) {
            if (d === '') {
                return x('EMPTY_STRING');
            }
            return x(d);
        };
        yTranslate = function yTranslate(d, i) {
            return y(lineData[i][yAxisData.label]) + container.height / lineLength / 2; //+ container.height / (lineLength) / 2  - y.paddingInner());
        };
    } else {
        xTranslate = function xTranslate(d, i) {
            if (lineData[i][xAxisData.label] === '') {
                lineData[i][xAxisData.label] = 'EMPTY_STRING';
            }
            return x(lineData[i][xAxisData.label]) + container.width / lineLength / 2; //+ container.width / (lineLength) / 2 - x.paddingInner());
        };
        yTranslate = function yTranslate(d, i) {
            return y(d);
        };
    }

    //Append lines and circles

    var uniqueXAxisData = [];
    for (var i = 0; i < chart.data.xAxisData.values.length; i++) {
        var add = true;
        for (var j = 0; j < uniqueXAxisData.length; j++) {
            if (chart.data.xAxisData.values[i] === uniqueXAxisData[j]) {
                add = false;
                break;
            }
        }
        if (add) {
            uniqueXAxisData.push(chart.data.xAxisData.values[i]);
        }
    }

    var data = {};
    for (var _i2 = 0; _i2 < lineLength; _i2++) {
        for (var _k = 0; _k < legendLength; _k++) {
            if (typeof chart._vars.legendOptions !== 'undefined') {
                //Accounting for legend toggles
                if (chart._vars.legendOptions[_k].toggle === false) {
                    //Don't write anything to data
                    continue;
                } else {
                    //Write something to data
                    if (!data[legendData[_k]]) {
                        data[legendData[_k]] = [];
                    }
                    data[legendData[_k]].push(parseFloat(lineData[_i2][legendData[_k]]));
                }
            } else {
                //Initial creation of visualization w/o legend options
                if (!data[legendData[_k]]) {
                    data[legendData[_k]] = [];
                }
                if (data[legendData[_k]].length < lineLength) {
                    data[legendData[_k]].push(parseFloat(lineData[_i2][legendData[_k]]));
                }
            }
        }
    }

    chart.svg.selectAll('.lines').remove();
    chart.svg.selectAll('.line').remove();
    chart.svg.selectAll('.circle').remove();
    chart.svg.selectAll('#line-gradient').remove();

    lines = chart.svg.selectAll('.' + chart.config.type + '-container');

    //curves object
    var curves = {
        'Linear': d3.curveLinear,
        'Step': d3.curveStep,
        'Step Before': d3.curveStepBefore,
        'Step After': d3.curveStepAfter,
        'Basis': d3.curveBasis,
        'Cardinal': d3.curveCardinal,
        'Monotone X': d3.curveMonotoneX,
        'Catmull Rom': d3.curveCatmullRom
    };

    var valueline = {};
    var circles = {};
    var index = 0;
    var lineColors = [];
    var thresholding = false;
    for (var k in data) {
        //Create path generator for each series
        if (data.hasOwnProperty(k)) {
            if (data[k] === '') {
                data[k] = 'EMPTY_STRING';
            }

            valueline[k] = d3.line() //line drawing function
            .curve(curves[chart._vars.lineCurveType]).defined(function (d) {
                return !isNaN(d);
            }).x(function (d, i) {
                if (isNaN(d)) {
                    return;
                }
                return xTranslate(d, i);
            }).y(function (d, i) {
                if (isNaN(d)) {
                    return;
                }
                return yTranslate(d, i);
            });

            //Add lines to the chart.config.type + '-container'
            lines.append('g').attr('class', 'line ' + k).append('path') //draws the line
            .attr('stroke', function (d, i, j) {
                var colorObj = jvCharts.getColors(colors, i, k);
                lineColors.push(colorObj);
                return colorObj;
            }) //fills the bar with color
            .attr('stroke-width', '2').attr('fill', 'none').attr('d', function (d, i) {
                return valueline[k](data[k]);
            });

            //Color Thresholding for each tier
            if (chart._vars.thresholds != 'none' && chart._vars.colorChart != false) {
                if (chart._vars.colorLine) {
                    var thresholdPercents = [];
                    var thresholdLength = Object.keys(chart._vars.thresholds).length;
                    if (chart._vars.rotateAxis) {
                        var zero = { percent: 0, color: lineColors[index] };
                        thresholdPercents.push(zero);

                        for (var z = 0; z < thresholdLength; z++) {
                            var pCent = chart._vars.thresholds[z].threshold * 100 / (xAxisData.max - xAxisData.min);
                            var temp = { percent: pCent, color: chart._vars.thresholds[z].thresholdColor };
                            thresholdPercents.push(temp);
                        }
                    } else {
                        var zero = { percent: 0, color: lineColors[index] };
                        thresholdPercents.push(zero);

                        for (var _z = 0; _z < thresholdLength; _z++) {
                            var pCent = chart._vars.thresholds[_z].threshold * 100 / (yAxisData.max - yAxisData.min);
                            var temp = { percent: pCent, color: chart._vars.thresholds[_z].thresholdColor };
                            thresholdPercents.push(temp);
                        }
                    }

                    var thresholdData = chart.setLineThresholdData(chart, thresholdPercents, lineColors[index]);

                    lines.selectAll('path').attr('class', 'line-threshold');

                    if (chart._vars.rotateAxis) {
                        chart.svg.append('linearGradient').attr('id', 'line-gradient').attr('gradientUnits', 'userSpaceOnUse').attr('x1', xTranslate(xAxisData.min)).attr('y1', 0).attr('x2', xTranslate(xAxisData.max)).attr('y2', 0).selectAll('stop').data(thresholdData).enter().append('stop').attr('offset', function (d) {
                            return d.offset;
                        }).attr('stop-color', function (d) {
                            return d.color;
                        });
                    } else {
                        chart.svg.append('linearGradient').attr('id', 'line-gradient').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', yTranslate(yAxisData.min)).attr('x2', 0).attr('y2', yTranslate(yAxisData.max)).selectAll('stop').data(thresholdData).enter().append('stop').attr('offset', function (d) {
                            return d.offset;
                        }).attr('stop-color', function (d) {
                            return d.color;
                        });
                    }
                }
                thresholding = true;
            }

            //Add circles at joints in the lines
            circles[k] = lines.append('g').attr('class', 'circle ' + k).selectAll('circle').data(data[k]).enter().append('circle') //Circles for the joints in the line
            .attr('class', function (d, i) {
                return 'circle-' + chart.currentData.chartData[i][chart.currentData.dataTable.label] + ' highlight-class-' + i;
            }).attr('cx', function (d, i) {
                if (isNaN(d)) {
                    return null;
                }
                return xTranslate(d, i);
            }).attr('cy', function (d, i) {
                if (isNaN(d)) {
                    return null;
                }
                return yTranslate(d, i);
            }).attr('fill', function (d, i, j) {
                if (isNaN(d)) {
                    return null;
                } else if (thresholding == true) {
                    var length = Object.keys(chart._vars.thresholds).length - 1;
                    if (chart._vars.rotateAxis) {
                        for (var z = length; z > -1; z--) {
                            var threshold = chart._vars.thresholds[z];
                            if (d >= threshold.threshold) {
                                return threshold.thresholdColor;
                            }
                        }
                    } else {
                        for (var z = length; z > -1; z--) {
                            var threshold = chart._vars.thresholds[z];
                            if (d >= threshold.threshold) {
                                return threshold.thresholdColor;
                            }
                        }
                    }
                }

                return jvCharts.getColors(colors, i, k);
            }).attr('opacity', function (d, i, j) {
                if (isNaN(d)) {
                    return 0;
                }
                return 1;
            }).attr('r', 2.5);

            index++;
        }
    }

    //Return line groups
    return lines.selectAll('.circle');
}

function setLineThresholdData(chart, thresholds) {
    var data = [];
    var thresholdLength = thresholds.length;
    for (var k = 0; k < thresholdLength; k++) {
        var gradientOne = { offset: thresholds[k].percent + '%', color: thresholds[k].color };
        data.push(gradientOne);

        if (k + 1 < thresholdLength) {
            var gradientTwo = { offset: thresholds[k + 1].percent + '%', color: thresholds[k].color };
            data.push(gradientTwo);
        }

        if (k == thresholdLength - 1) {
            var last = { offset: '100%', color: thresholds[k].color };
            data.push(last);
        }
    }

    return data;
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],19:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.circlepack = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generatePack = generatePack;

/************************************************ Pack functions ******************************************************/

/**setPackChartData
 *  gets pack data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.legendData = setPackLegendData(chart.data.dataTable);
    //define color object for chartData
    chart.data.color = chart.colors;
}

function getEventData() {
    return {};
}

/**setPackLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setPackLegendData(dataTable) {
    var legendArray = [];
    var label = '';
    for (var key in dataTable) {
        if (dataTable.hasOwnProperty(key)) {
            if (key === 'value') {
                label = dataTable[key];
            } else {
                if (key !== 'tooltip 1') {
                    legendArray.push(dataTable[key]);
                }
            }
        }
    }
    legendArray.unshift(label);
    return legendArray;
}

function paint() {
    var chart = this;
    chart._vars.color = chart.data.color;

    chart.currentData = chart.data; //Might have to move into method bc of reference/value relationship

    var packMargins = {
        top: 30,
        right: 20,
        bottom: 15,
        left: 20
    };

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, packMargins);
    chart.generateVerticalLegend('generatePack');
    chart.generatePack(chart.currentData);
};

/** generatePack
 *
 * paints the pack on the chart
 * @params packData
 */
function generatePack() {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container,
        w = container.width,
        h = container.height,
        r = Math.min(h / 2, w / 3),
        margin = 20,
        diameter = r * 2;

    chart.children = chart.data.chartData;

    var color = d3.scaleOrdinal().range(chart.data.color.map(function (c) {
        c = d3.rgb(c);c.opacity = 0.8;return c;
    }));

    //  assigns the data to a hierarchy using parent-child relationships
    var root = d3.hierarchy(chart.children, function (d) {
        return d.children;
    });

    var pack = d3.pack().size([container.width, container.height]).padding(2);

    pack(root.sum(function (d) {
        return d.hasOwnProperty('children') ? 0 : d.name;
    }).sort(function (a, b) {
        return b.height - a.height || b.value - a.value;
    })).descendants();

    svg.selectAll(".pack").remove();

    var vis = svg.append("g").attr("class", "pack").attr("transform", "translate(" + w / 2 + "," + r + ")");

    var circle = vis.selectAll("circle").data(root.descendants()).enter().append("circle").attr("class", function (d) {
        return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root";
    }).style("fill", function (d) {
        d.color = color(d.depth);
        return d.children ? color(d.depth) : null;
    }).on("click", function (d) {
        if (focus !== d) {
            zoom(d), d3.event.stopPropagation();
        }
    }).on("mouseover", function (d, i) {
        //Get tip data
        // var tData = chart.data.tipData.get(d.data.name);
        // tData.name = d.data.name;
        // tData.color = d.color;
        var tipData = chart.setTipData(d, i);
        //Draw tip line
        chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
        chart.tip.d = d;
        chart.tip.i = i;
    }).on("mousemove", function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on("mouseout", function (d) {
        chart.tip.hideTip();
    });

    // var text = vis.selectAll("text")
    //     .data(root.descendants())
    //     .enter().append("text")
    //     .attr("class", "label")
    //     .style("display", function(d) {
    //         return d.parent === root ? "inline" : "none";
    //     });

    var node = svg.selectAll("circle,text");

    d3.select("body").on("click", function () {
        zoom(root);
    });

    zoomTo([root.x, root.y, root.r * 2 + margin]);

    function zoom(d) {
        var focus = d;

        d3.transition().duration(d3.event.altKey ? 7500 : 750).tween("zoom", function (d) {
            var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
            return function (t) {
                zoomTo(i(t));
            };
        });

        // transition.selectAll("text")
        //     .filter(function(d) {
        //         return d.parent === focus || this.style.display === "inline";
        //     })
        //     .style("fill-opacity", function(d) {
        //         return d.parent === focus ? 1 : 0;
        //     })
        //     .style("display", function(d) {
        //         return d.parent === focus ? "inline" : "none";
        //     })
        //     .each("start", function(d) {
        //         if (d.parent === focus) {
        //            this.style.display = "inline";
        //         }
        //     })
        //     .each("end", function(d) {
        //         if (d.parent !== focus) {
        //           this.style.display = "none";
        //         }
        //     });
    }
    var view;
    function zoomTo(v) {
        var k = diameter / v[2];

        //set global zoom
        view = v;

        node.attr("transform", function (d) {
            if (d && d.x && d.y) {
                return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")";
            }
        });

        circle.attr("r", function (d) {
            return d.r * k;
        });
    }
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],20:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.pie = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generatePie = generatePie;

/************************************************ Pie Data functions ******************************************************/

/**setPieData
 *  gets pie data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.legendData = setPieLegendData(chart.data);
    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData(event) {
    var chart = this,
        ele = event.target.classList.value.split('pie-data-')[1];
    if (ele) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.label, [ele.replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    } else if (event.target.classList.value.indexOf('pie-container') > -1) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

/**setPieLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setPieLegendData(data) {
    var legendArray = [];
    for (var i = data.chartData.length - 1; i >= 0; i--) {
        legendArray.push(data.chartData[i][data.dataTable.label]);
    }
    return legendArray;
}

function paint() {
    var chart = this;
    var customMargins = {
        top: 40,
        right: 20,
        bottom: 20,
        left: 20
    };

    chart.currentData = chart.data;
    chart._vars.color = chart.data.color;
    chart.legendData = chart.data.legendData;
    chart.generateSVG(chart.data.legendData, customMargins);

    //If the container size is small, don't generate a legend
    if (chart.config.container.width > 550) {
        chart.generateVerticalLegend('generatePie');
    }

    chart.generatePie(chart.currentData);
}

/**generatePie
 *
 * creates and draws a pie chart on the svg element
 * @params svg, pieData, _vars, container
 * @returns {{}}
 */
function generatePie(currentData) {
    var chart = this,
        svg = chart.svg,
        pieData = currentData.chartData,
        container = chart.config.container,
        legendData = chart.currentData.legendData;

    //define variables to change attr's
    svg.select('g.pie-container').remove();

    var colors = chart._vars.color;

    var w = container.width;
    var h = container.height;
    var r = Math.min(h / 2, w / 3);

    var data = [];
    var total = 0;

    for (var i = 0; i < pieData.length; i++) {
        var obj = {};
        for (var _j in chart.data.dataTable) {
            obj[_j] = pieData[i][chart.data.dataTable[_j]];
        }
        data[i] = obj;
    }

    var pieDataNew = data; //copy of pie data


    if (!chart._vars.legendHeaders) {
        chart._vars.legendHeaders = legendData;
    }

    var dataHeaders = chart._vars.legendHeaders;

    var legendElementToggleArray = jvCharts.getLegendElementToggleArray(dataHeaders, legendData);

    if (legendElementToggleArray) {
        for (var j = 0; j < pieDataNew.length; j++) {
            for (var i = 0; i < legendElementToggleArray.length; i++) {
                if (legendElementToggleArray[i].element === pieDataNew[j].label && legendElementToggleArray[i].toggle === false) {
                    //pieDataNew.splice(j,1);
                    pieDataNew[j].value = 0;
                }
            }
        }
    }

    for (var i = 0; i < pieDataNew.length; i++) {
        total += parseFloat(pieDataNew[i].value);
    }

    var vis = svg.append('g').data([pieDataNew]).attr('class', 'pie-container').attr('height', 200).attr('transform', 'translate(' + w / 2 + ',' + r + ')');

    var pie = d3.pie().value(function (d) {
        return d.value;
    });

    //declare an arc generator function
    var arc = d3.arc().innerRadius(0) //Normal pie chart when this = 0, can be changed to create donut chart
    .outerRadius(r);

    // var arcOver = d3.arc()
    //     .innerRadius(0)
    //     .outerRadius(r + 15);

    //select paths, use arc generator to draw
    var arcs = vis.selectAll('g.slice').data(pie).enter().append('g').attr('class', 'slice');

    arcs.append('path').attr('fill', function (d, i) {
        return jvCharts.getColors(colors, i, d.data.label);
    }).attr('d', function (d) {
        return arc(d);
    }).attr('class', function (d, i) {
        var label = d.data.label.replace(/\s/g, '_').replace(/\./g, '_dot_');
        return 'editable editable-pie pie-slice-' + i + ' highlight-class-' + i + ' pie-data-' + label;
    }).attr('stroke', chart._vars.pieBorder).attr('stroke-width', chart._vars.pieBorderWidth).on('mouseover', function (d, i, j) {
        if (chart.showToolTip) {
            //Get tip data
            var tipData = chart.setTipData(d.data, i);
            // Draw tip line
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        chart.tip.hideTip();
    });

    arcs.append('svg:text').attr('class', 'sliceLabel').attr('transform', function (d) {
        var test = arc.centroid(d);
        test[0] = test[0] * 1.6;
        test[1] = test[1] * 1.6;
        return 'translate(' + test + ')';
    }).attr('dy', '.35em').attr('text-anchor', 'middle').text(function (d, i) {
        var percent = pieDataNew[i].value / total * 100;
        percent = d3.format('.1f')(percent);
        if (percent > 5) {
            return percent + '%';
        }
    }).attr('font-size', chart._vars.fontSize).attr('fill', chart._vars.pieTextColor).attr('pointer-events', 'none');
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],21:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.radial = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateRadial = generateRadial;

/************************************************ Radial Data functions ******************************************************/
/**setRadialChartData
 *  gets bar data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.legendData = setRadialLegendData(chart.data);
    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function paint() {
    var chart = this;
    chart._vars.color = chart.data.color;

    chart.currentData = chart.data; //Might have to move into method bc of reference/value relationship

    var radialMargins = {
        top: 40,
        right: 20,
        bottom: 20,
        left: 20
    };

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, radialMargins);
    chart.generateVerticalLegend('generateRadial');
    chart.generateRadial();
}

function getEventData(event) {
    var chart = this,
        ele = event.target.classList.value.split('radial-data-')[1];
    if (ele) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.label, [ele.replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    } else if (event.target.classList.value.indexOf('radial-container') > -1) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

/**setRadialLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setRadialLegendData(data) {
    var legendArray = [];
    for (var i = 0; i < data.chartData.length; i++) {
        if (legendArray.indexOf(data.chartData[i][data.dataTable.label]) == -1) {
            legendArray.push(data.chartData[i][data.dataTable.label]);
        }
    }
    return legendArray;
}

/**generateRadial
 *
 * paints the radil bar chart on the chart
 * @params radialData
 */

function generateRadial() {
    var chart = this,
        svg = chart.svg,
        colors = chart._vars.color,
        container = chart.config.container,
        legendData = chart.data.legendData,
        radialData = chart.data.chartData,
        tickNumber = 3,
        barHeight = container.height / 2 - 40,
        width = container.width,
        height = container.height,
        r = Math.min(height / 2, width / 3),
        data = [],
        allKeys = [chart.data.dataTable.label, chart.data.dataTable.value],
        radialDataNew,
        dataHeaders,
        legendElementToggleArray = [],
        radialDataFiltered;

    for (var i = 0; i < radialData.length; i++) {
        var obj = {};
        for (var _j in chart.data.dataTable) {
            obj[_j] = radialData[i][chart.data.dataTable[_j]];
        }
        data[i] = obj;
        //total += parseFloat(pieData[i][keys[1]]);
    }

    radialDataNew = JSON.parse(JSON.stringify(data)); //copy of pie data


    if (!chart._vars.legendHeaders) {
        chart._vars.legendHeaders = legendData;
    }

    dataHeaders = chart._vars.legendHeaders;
    legendElementToggleArray = jvCharts.getLegendElementToggleArray(dataHeaders, legendData);
    radialDataFiltered = [];

    if (legendElementToggleArray) {
        for (var j = 0; j < radialDataNew.length; j++) {
            for (var i = 0; i < legendElementToggleArray.length; i++) {
                if (legendElementToggleArray[i].element === radialDataNew[j].label && legendElementToggleArray[i].toggle === false) {
                    radialDataNew[j].value = -1;
                }
            }
        }
    }

    for (var j = 0; j < radialDataNew.length; j++) {
        if (radialDataNew[j].value !== -1) {
            radialDataFiltered.push(radialDataNew[j]);
        }
    }

    //Remove existing bars from page
    svg.selectAll('g.radial-container').remove();

    var vis = svg.append('g').attr('class', 'radial-container').attr('height', height).attr('transform', 'translate(' + width / 2 + ',' + r + ')');

    var extent = d3.extent(radialDataFiltered, function (d) {
        return d.value;
    });

    //commas and 0 decimals
    var formatNumber = d3.format(',.0f');
    if (extent[1] >= 1000000) {
        //millions
        var p = d3.precisionPrefix(1e5, 1.3e6);
        formatNumber = d3.formatPrefix('.' + p, 1.3e6);
    } else if (extent[1] <= 100) {
        //2 decimals
        formatNumber = d3.format(',.2f');
    }

    if (extent[0] !== 0) {
        extent[0] = 0;
    }
    var barScale = d3.scaleLinear().domain(extent).range([0, barHeight]);

    var keys = radialDataFiltered.map(function (d, i) {
        return d.label;
    });
    var numBars = keys.length;

    var x = d3.scaleLinear().domain(extent).range([0, -barHeight]);

    //create xAxis drawing function
    var xAxis = d3.axisLeft().scale(x).ticks(tickNumber).tickFormat(formatNumber);

    vis.selectAll('circle').data(x.ticks(3)).enter().append('circle').attr('r', function (d) {
        return barScale(d);
    }).style('fill', 'none').style('stroke', 'black').style('stroke-dasharray', '2,2').style('stroke-width', '.5px');

    var arc = d3.arc().startAngle(function (d, i) {
        return i * 2 * Math.PI / numBars;
    }).endAngle(function (d, i) {
        return (i + 1) * 2 * Math.PI / numBars;
    }).innerRadius(0);

    var segments = vis.selectAll('path').data(radialDataFiltered).enter().append('g')
    //.attr("class", "label")
    .append('path').attr('class', function (d) {
        var label = d.label.replace(/\s/g, '_').replace(/\./g, '_dot_');
        return 'radial-data-' + label;
    }).each(function (d) {
        d.outerRadius = 0;
    }).style('fill', function (d, i) {
        return jvCharts.getColors(colors, i, d.label);
    }).attr('d', arc).on('mouseover', function (d, i) {
        if (chart.showToolTip) {
            //chart.tip.hideTip();
            //Get tip data
            var tipData = chart.setTipData(d, i);
            //Draw tip line
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
            svg.selectAll('line.tip-line').remove();
        }
    });

    segments.transition().duration(800).ease(d3.easeElastic).delay(function (d, i) {
        return 750 - 50 * i;
    }).attrTween('d', function (d, index) {
        var i = d3.interpolate(d.outerRadius, barScale(+d.value));
        return function (t) {
            d.outerRadius = i(t);
            return arc(d, index);
        };
    });

    vis.append('circle').attr('r', barHeight).classed('outer', true).style('fill', 'none').style('stroke', 'black').style('stroke-width', '1.5px');

    vis.selectAll('line').data(keys).enter().append('g').attr('class', 'label').append('line').attr('y2', -barHeight - 20).style('stroke', 'black').style('stroke-width', '.5px').attr('transform', function (d, i) {
        return 'rotate(' + i * 360 / numBars + ')';
    });

    var axisGroup = vis.append('g').attr('class', 'xAxis').style('pointer-events', 'none').call(xAxis);
    var yAxisClass = 'yAxisLabels editable editable-yAxis editable-text editable-num';

    axisGroup.selectAll('text').attr('fill', 'black') //Customize the color of axis labels
    .attr('class', yAxisClass).attr('transform', function (d) {
        if (d === xAxis.scale().ticks(tickNumber)[tickNumber]) {
            return 'translate(0, 10)';
        }
        return 'translate(0,0)';
    }).attr('font-size', chart._vars.fontSize).append('svg:title');
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],22:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.sankey = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateSankey = generateSankey;

/************************************************ Sankey functions ******************************************************/
/**
 *
 * @param data
 * @param dataTable
 * @param colors
 */
function setData() {
    var chart = this;
    var sankeyData = {},
        data = chart.data.chartData,
        dataTable = chart.data.dataTable;

    sankeyData.links = [];
    sankeyData.nodes = [];

    //Iterate through sources and targets to make a node list
    var nodeList = [];
    var nodeGroup = 1;
    for (var item in dataTable) {
        var nodeListForLabel = [];
        if (item === 'value') {
            continue;
        };
        for (var i = 0; i < data.length; i++) {
            var potentialNode = data[i][dataTable[item]] + "-" + nodeGroup;
            var addToList = true;
            for (var j = 0; j < nodeListForLabel.length; j++) {
                if (potentialNode === nodeListForLabel[j]) {
                    addToList = false;
                    break;
                }
            }
            if (addToList) {
                nodeListForLabel.push(potentialNode);
            }
        }
        nodeGroup++;
        nodeList = nodeList.concat(nodeListForLabel);
    }
    //Create nodes object
    for (var i = 0; i < nodeList.length; i++) {
        sankeyData.nodes.push({
            'name': nodeList[i]
        });
    }

    //See how many sets of links you need
    var linkGroups = 0;

    for (var _item in dataTable) {
        if (_item.indexOf('label') !== -1) {
            linkGroups++;
        }
    }

    var _loop = function _loop(_i) {
        linkGroup = [];

        linkGroup = data.map(function (x) {

            var label1 = "label " + _i;
            var label2 = "label " + (_i + 1);
            var source = dataTable[label1];
            var target = dataTable[label2];
            var value = dataTable.value;

            return {
                'source': x[source] + "-" + _i,
                'target': x[target] + "-" + (_i + 1),
                'value': x[value]
            };
        });

        sankeyData.links = sankeyData.links.concat(linkGroup);
    };

    for (var _i = 1; _i < linkGroups; _i++) {
        var linkGroup;

        _loop(_i);
    }

    var nodeMap = {};
    for (i = 0; i < sankeyData.nodes.length; i++) {
        sankeyData.nodes[i].node = i;
        nodeMap[sankeyData.nodes[i].name] = i;
    }
    sankeyData.links = sankeyData.links.map(function (x) {
        return {
            source: nodeMap[x.source],
            target: nodeMap[x.target],
            value: x.value
        };
    });

    //Group common sankey links together and add the values
    var aggregateSankeyLinks = [];
    for (var _i2 = 0; _i2 < sankeyData.links.length; _i2++) {
        var currentLink = {};
        currentLink.source = sankeyData.links[_i2].source;
        currentLink.target = sankeyData.links[_i2].target;
        currentLink.value = sankeyData.links[_i2].value;

        //Make sure that only unique links are pushed to the aggregated array
        var addToAggregate = true;
        for (var k = 0; k < aggregateSankeyLinks.length; k++) {
            if (aggregateSankeyLinks[k].source === currentLink.source && aggregateSankeyLinks[k].target === currentLink.target) {
                addToAggregate = false;
                break;
            }
        }

        if (!addToAggregate) {
            continue;
        }

        //Sum the value of identical links
        for (var _j = 0; _j < sankeyData.links.length; _j++) {
            if (sankeyData.links[_i2].source === sankeyData.links[_j].source && sankeyData.links[_i2].target === sankeyData.links[_j].target) {
                currentLink.value = currentLink.value + sankeyData.links[_j].value;
            }
        }

        aggregateSankeyLinks.push(currentLink);
    }

    sankeyData.links = aggregateSankeyLinks;

    chart.data.chartData = sankeyData;
    chart.data.color = d3.scaleOrdinal(d3.schemeCategory20);
}

function paint() {
    var chart = this;
    var data = chart.data.chartData;

    //generate SVG
    chart.generateSVG(null);
    chart.generateSankey(data);
}

function getEventData() {
    return {};
}

/**
 * Generates a sankey chart with the given data
 * @param sankeyData
 */
function generateSankey(sankeyData) {
    var chart = this,
        svg = chart.svg,
        color = chart._vars.color;

    var width = chart.config.container.width;
    var height = chart.config.container.height;

    var formatNumber = d3.format(',.0f'),
        // zero decimal places
    format = function format(d) {
        return formatNumber(d) + ' ' + 'Widgets';
    },
        color = d3.scaleOrdinal(d3.schemeCategory20);

    var sankey = d3.sankey().nodeWidth(10).nodePadding(15).size([width, height]);

    var path = sankey.link();

    // //Adding zoom v4 behavior to sankey
    d3.selectAll('svg').call(d3.zoom().scaleExtent([.1, 10]).on('zoom', zoom)); //zoom event listener

    sankey.nodes(sankeyData.nodes).links(sankeyData.links).layout(32);

    var link = svg.append('g').selectAll('.sankey-link').data(sankeyData.links).enter().append('path').filter(function (d) {
        return d.value > 0;
    }).attr('class', 'sankey-link').attr('d', path).style('stroke-width', function (d) {
        return Math.max(1, d.dy);
    }).sort(function (a, b) {
        return b.dy - a.dy;
    }).on('mouseover', function (d, i) {
        if (chart.showToolTip) {
            var tipData = chart.setTipData(d, i);
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function (d, i) {
        if (chart.showToolTip) {
            chart.tip.hideTip();
        }
    });

    var node = svg.append('g').selectAll('.node').data(sankeyData.nodes).enter().append('g').filter(function (d) {
        return d.value > 0;
    }).attr('class', 'node').attr('transform', function (d) {
        return 'translate(' + d.x + ', ' + d.y + ')';
    }).call(d3.drag().subject(function (d) {
        return d;
    }).on('start', function (d) {
        d3.event.sourceEvent.stopPropagation();
        this.parentNode.appendChild(this);
    }).on('drag', dragmove));

    node.append('rect').attr('height', function (d) {
        //return d.dy;
        return Math.abs(d.dy);
        //return Math.max(d.dy, 2);
    }).attr('width', sankey.nodeWidth()).style('fill', function (d) {
        return d.color = color(d.name);
    }).style('stroke', function (d) {
        return d3.rgb(d.color).darker(2);
    });

    node.append('text').attr('x', -6).attr('y', function (d) {
        return d.dy / 2;
    }).attr('dy', '.35em').attr('text-anchor', 'end').attr('transform', null).attr('transform', null).text(function (d) {
        //Remove the the nodeGroup tag and hyphen from the end of the label
        return d.name.slice(0, -2);
    }).filter(function (d) {
        return d.x < width / 2;
    }).attr('x', 6 + sankey.nodeWidth()).attr('text-anchor', 'start');

    function dragmove(d) {
        d3.select(this).attr('transform', 'translate(' + (d.x = Math.max(0, Math.min(width - d.dx, d3.event.x))) + ',' + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ')');
        sankey.relayout();
        link.attr('d', path);
    }

    function zoom() {
        //Implementing the v4 zooming feature
        svg.attr('transform', d3.event.transform);
    }
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],23:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.scatterplot = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateScatter = generateScatter;
jvCharts.prototype.createLineGuide = createLineGuide;

/************************************************ Scatter functions ******************************************************/

/**setScatterData
 *  gets scatter data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.legendData = setScatterLegendData(chart.data);
    chart.data.xAxisData = setScatterAxisData(chart.data, 'x', chart._vars);
    chart.data.yAxisData = setScatterAxisData(chart.data, 'y', chart._vars);
    chart.data.zAxisData = chart.data.dataTable.hasOwnProperty('z') ? setScatterAxisData(chart.data, 'z', chart._vars) : {};
    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData(event, mouse) {
    var chart = this,
        ele = event.target.__data__;

    //determine if the click event happens inside the container
    var brushContainer = chart.chartDiv.select('.' + chart.config.type + '-container').node(),
        containerBox = brushContainer.getBoundingClientRect(),
        x = mouse[0],
        y = mouse[1],
        insideContainer = false;

    if (x < containerBox.right && y < containerBox.bottom && x > containerBox.left && y > containerBox.top) {
        insideContainer = true;
    }

    if (insideContainer && ele) {
        return {
            data: _defineProperty({}, chart.currentData.dataTable.label, [ele[chart.currentData.dataTable.label].replace(/_/g, ' ').replace(/_dot_/g, '.')]),
            node: event.target
        };
    } else if (insideContainer) {
        return {
            data: {}
        };
    }
    return {
        data: false
    };
}

/**setScatterLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setScatterLegendData(data) {
    var legendArray = [];
    if (data.dataTable.hasOwnProperty('series')) {
        var item = data.dataTable.series;
        for (var value in data.chartData) {
            var legendElement = data.chartData[value][item];
            if (legendArray.indexOf(legendElement) === -1) {
                legendArray.push(legendElement);
            }
        }
    } else if (data.dataTable.hasOwnProperty('label')) {
        legendArray.push(data.dataTable.label);
    }
    if (typeof legendArray[0] === 'undefined') {
        legendArray = [];
        legendArray.push(data.dataTable.label);
    }
    //order legend data in alphabetical order
    legendArray.sort();
    return legendArray;
}

/**setScatterAxisData
 *  gets z axis data based on the chartData
 *
 * @params data, dataTable
 * @returns object with label and values
 */
function setScatterAxisData(data, axis, _vars) {
    //declare vars
    var axisData = [],
        chartData = data.chartData,
        scatterLabel = data.dataTable[axis],
        min = scatterLabel ? chartData[0][scatterLabel] : 0,
        max = scatterLabel ? chartData[0][scatterLabel] : 0,
        dataType;

    for (var j = 0; j < data.dataTableKeys.length; j++) {
        if (data.dataTableKeys[j].vizType === axis) {
            dataType = data.dataTableKeys[j].type;
            break;
        }
    }
    //loop over data to find max and min
    //also determines the y axis total if the data is stacked
    for (var i = 1; i < chartData.length; i++) {
        if (chartData[i].hasOwnProperty(scatterLabel)) {
            var num = chartData[i][scatterLabel];
            if (!isNaN(num)) {
                num = parseFloat(num);
                if (num > max) {
                    max = num;
                } else if (num < min) {
                    min = num;
                }
            }
        }
    }
    if (axis !== 'z') {
        min *= 0.9;
        max *= 1.1;
    }

    if (_vars.yMin && !isNaN(_vars.yMin) && axis === 'y') {
        min = _vars.yMin;
    }
    if (_vars.yMax && !isNaN(_vars.yMax) && axis === 'y') {
        max = _vars.yMax;
    }
    if (_vars.xMin && !isNaN(_vars.xMin) && axis === 'x') {
        min = _vars.xMin;
    }
    if (_vars.xMax && !isNaN(_vars.xMax) && axis === 'x') {
        max = _vars.xMax;
    }

    axisData.push(min);
    axisData.push(max);
    return {
        'label': scatterLabel,
        'values': axisData,
        'dataType': 'NUMBER',
        'min': min,
        'max': max
    };
}

function paint() {
    var chart = this;
    var dataObj = {};

    dataObj.chartData = chart.data.chartData;
    dataObj.legendData = chart.data.legendData;
    dataObj.dataTable = chart.data.dataTable;
    chart._vars.color = chart.data.color;
    dataObj.xAxisData = chart.data.xAxisData;
    dataObj.yAxisData = chart.data.yAxisData;
    dataObj.zAxisData = chart.data.zAxisData;
    chart.currentData = dataObj;

    //generate svg dynamically based on legend data
    chart.generateSVG(dataObj.legendData);

    //TODO remove these from draw object
    chart.generateXAxis(chart.currentData.xAxisData);
    chart.generateYAxis(chart.currentData.yAxisData);
    chart.generateLegend(chart.currentData.legendData, 'generateScatter');

    chart.generateScatter();
    chart.createLineGuide();

    if (typeof dataObj.xAxisScale.ticks === "function") {
        chart.formatXAxisLabels(dataObj.xAxisScale.ticks().length);
    } else {
        chart.formatXAxisLabels(dataObj.xAxisScale.domain().length);
    }
}

function calculateMean(data, type) {
    return d3.mean(data, function (value) {
        return +value[type];
    });
}

function createLineGuide() {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container,
        chartData = chart.currentData.chartData,
        dataTable = chart.currentData.dataTable,
        xAxisData = chart.currentData.xAxisData,
        yAxisData = chart.currentData.yAxisData;

    var xLineVal = calculateMean(chartData, dataTable.x);
    var yLineVal = calculateMean(chartData, dataTable.y);

    var x = jvCharts.getAxisScale('x', xAxisData, container, chart._vars);
    var y = jvCharts.getAxisScale('y', yAxisData, container, chart._vars);

    svg.selectAll('g.lineguide.x').remove();
    svg.selectAll('g.lineguide.y').remove();

    var lineGroup = svg.append('g').attr('class', 'line-group scatterplot-container');

    //x line group for crosshair
    var lineGuideX = lineGroup.append('g').attr('class', 'lineguide x').append('line').style('stroke', 'gray').style('stroke-dasharray', '3, 3').style('opacity', function () {
        if (chart._vars.lineGuide) {
            return 1;
        }
        return 0;
    }).style('fill', 'black');

    //y line group for crosshair
    var lineGuideY = lineGroup.append('g').attr('class', 'lineguide y').append('line').style('stroke', 'gray').style('stroke-dasharray', '3, 3').style('opacity', function () {
        if (chart._vars.lineGuide) {
            return 1;
        }
        return 0;
    }).style('fill', 'black');

    //create crosshair based on median x (up/down) 'potentially' passed with data
    lineGuideX.attr('x1', x(xLineVal)).attr('y1', 0).attr('x2', x(xLineVal)).attr('y2', container.height);

    //create crosshair based on median y (left/right) 'potentially' passed with data
    lineGuideY.attr('x1', 0).attr('y1', y(yLineVal)).attr('x2', container.width).attr('y2', y(yLineVal));

    return lineGroup;
}
/**generateScatter
 *
 * creates and draws a scatter plot on the svg element
 * @params svg, scatterData, _vars, xAxisData, yAxisData, zAxisData, container, dataTable legendData
 * @returns {{}}
 */
function generateScatter() {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container,
        scatterData = chart.currentData.chartData,
        dataTable = chart.currentData.dataTable,
        xAxisData = chart.currentData.xAxisData,
        yAxisData = chart.currentData.yAxisData,
        zAxisData = chart.currentData.zAxisData,
        legendData = chart.currentData.legendData,
        colors = chart._vars.color,
        scatterDataNew = JSON.parse(JSON.stringify(scatterData));

    if (!chart._vars.NODE_MIN_SIZE) {
        chart._vars.NODE_MIN_SIZE = 4.5;
    }
    if (!chart._vars.NODE_MAX_SIZE) {
        chart._vars.NODE_MAX_SIZE = 25;
    }

    //set clip path rectangle
    svg.append('clipPath').attr('id', 'scatter-area').append('rect').attr('x', 1).attr('width', container.width - 1).attr('height', container.height).attr('fill', chart._vars.backgroundColor);

    svg.selectAll('g.scatterplot-container').remove();
    svg.selectAll('g.scatterplot-container.editable-scatter').remove();

    if (!chart._vars.legendHeaders) {
        chart._vars.legendHeaders = legendData;
    }

    var dataHeaders = chart._vars.legendHeaders;
    var legendElementToggleArray = jvCharts.getLegendElementToggleArray(dataHeaders, legendData);
    var scatterDataFiltered = [];

    if (legendElementToggleArray) {
        for (var j = 0; j < scatterDataNew.length; j++) {
            for (var i = 0; i < legendElementToggleArray.length; i++) {
                if (typeof scatterDataNew[j][dataTable.label] === 'undefined' || scatterDataNew[j][dataTable.label] === '') {
                    if (legendElementToggleArray[i].toggle === false) {
                        scatterDataNew[j][dataTable.x] = -1;
                        scatterDataNew[j][dataTable.y] = -1;
                        scatterDataNew[j][dataTable.z] = -1;
                    }
                } else if (legendElementToggleArray[i].element === scatterDataNew[j][dataTable.series] && legendElementToggleArray[i].toggle === false) {
                    scatterDataNew[j][dataTable.x] = -1;
                    scatterDataNew[j][dataTable.y] = -1;
                    scatterDataNew[j][dataTable.z] = -1;
                }
            }
        }
    }

    for (var j = 0; j < scatterDataNew.length; j++) {
        if (scatterDataNew[j][dataTable.x] !== -1 && scatterDataNew[j][dataTable.y] !== -1) {
            scatterDataFiltered.push(scatterDataNew[j]);
        }
    }

    var x = jvCharts.getAxisScale('x', xAxisData, container, chart._vars);
    var y = jvCharts.getAxisScale('y', yAxisData, container, chart._vars);

    if (zAxisData && (typeof zAxisData === 'undefined' ? 'undefined' : _typeof(zAxisData)) === 'object' && Object.keys(zAxisData).length > 0) {
        console.log(zAxisData);
        var z = jvCharts.getZScale(zAxisData, container, chart._vars);
    }

    var cxTranslate, cyTranslate;

    cxTranslate = function cxTranslate(d, i) {
        return x(scatterDataFiltered[i][xAxisData.label]);
    };
    cyTranslate = function cyTranslate(d, i) {
        return y(scatterDataFiltered[i][yAxisData.label]);
    };

    var scatters = svg.append('g').attr('class', 'scatterplot-circles').selectAll('g');
    var tempMouseOver;
    scatters.data(function () {
        return scatterDataFiltered;
    }).enter().append('circle').attr('clip-path', 'url(#scatter-area)').attr('class', function (d, i) {
        return 'editable editable-scatter scatter-circle-' + i + ' highlight-class';
    }).attr('cx', function (d, i) {
        return cxTranslate(d, i);
    }).attr('cy', function (d, i) {
        return cyTranslate(d, i);
    })
    // .attr("clip-path", "url(.line-group)")
    .attr("opacity", 0.8).attr('r', function (d, i) {
        if (dataTable.hasOwnProperty('z')) {
            if (chart._vars.toggleZ && zAxisData && (typeof zAxisData === 'undefined' ? 'undefined' : _typeof(zAxisData)) === 'object' && Object.keys(zAxisData).length > 0 && scatterDataFiltered[i][dataTable.z]) {
                return z(scatterDataFiltered[i][dataTable.z]);
            }
        }
        return chart._vars.NODE_MIN_SIZE;
    }).on('mouseover', function (d, i, j) {
        if (chart.showToolTip) {
            this.setAttribute('clip-path', '');
            var tipData = chart.setTipData(d, i);

            //Draw tip line
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function () {
        if (chart.showToolTip) {
            this.setAttribute('clip-path', 'url(#scatter-area)');
            chart.tip.hideTip();
        }
    }).attr('fill', function (d, i) {
        var color;
        if (dataTable.hasOwnProperty('series')) {
            color = jvCharts.getColors(colors, i, scatterDataFiltered[i][dataTable.series]);
        } else {
            color = jvCharts.getColors(colors, i, scatterDataFiltered[i][dataTable.label]);
        }
        return color;
    });
    return scatters;
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],24:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.singleaxis = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.getSingleAxisData = getSingleAxisData;
jvCharts.prototype.getSingleAxisZ = getSingleAxisZ;
jvCharts.prototype.generatePoints = generatePoints;

function isEmpty(value) {
    return typeof value === 'undefined' || value === null;
}

/************************************************ Single Axis Cluster functions ******************************************************/

function setData() {
    var chart = this;
    chart.currentData = { chartData: chart.data.chartData, dataTable: chart.data.dataTable };

    //Set the legend Data to the label from dataTable Keys
    chart.currentData.legendData = [chart.currentData.dataTable.x];
    chart.currentData.xAxisData = chart.getSingleAxisData(chart.currentData.chartData, chart.currentData.dataTable);

    if (chart.currentData.dataTable.hasOwnProperty('size')) {
        chart.currentData.zAxisData = chart.getSingleAxisZ(chart.currentData.chartData);
    }

    chart.currentData.color = 'red'; //chart.setChartColors (chart._vars.color, chart.data.legendData, colors);
}

function getEventData() {
    return {};
}

function paint() {
    var chart = this,
        splitData = {},
        //If there is a split, the data that has been split
    numVizzes,
        //If there is a split, the number of single axis clusters that are created
    customSize = {},
        //If there is a split, the svg needs to be a custom predefined height
    margin = {
        top: 40,
        left: 100,
        right: 75,
        bottom: 50
    };

    //If there is a split on the viz, run through this logic
    if (!isEmpty(chart._vars.splitData) && chart._vars.splitData !== '' && chart._vars.splitData !== 'none') {
        var splitDataKeys = [],
            splitOptionName = chart._vars.splitData.replace(/_/g, ' ');

        //Check to see how many vizzes need to be created because of the split
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = chart.currentData.chartData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var ele = _step.value;

                var addToKeys = true;
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = splitDataKeys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var key = _step4.value;

                        if (ele[splitOptionName] === key) {
                            addToKeys = false;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                if (addToKeys) {
                    splitDataKeys.push(ele[splitOptionName]);
                }
            }

            //Create Object with keys and assign each element of the data array to corresponding object
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = splitDataKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _key = _step2.value;

                splitData[_key] = []; //Assign empty array to each location
            }

            //Assign Data elements to appropriate place in splitData object
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = chart.currentData.chartData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _ele = _step3.value;

                splitData[_ele[splitOptionName]].push(_ele);
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        numVizzes = splitDataKeys.length;
        customSize.height = numVizzes * 300;

        chart.generateSVG(chart.currentData.legendData, margin, customSize);
        chart.generateXAxis(chart.currentData.xAxisData);
        chart.drawGridlines(chart.currentData.xAxisData);

        for (var i = 0; i < numVizzes; i++) {
            chart.generatePoints(splitData[splitDataKeys[i]], i);
        }
    } else {
        //When there isn't a split, the base case
        chart.generateSVG(chart.currentData.legendData, margin, customSize);
        chart.generateXAxis(chart.currentData.xAxisData);
        chart.drawGridlines(chart.currentData.xAxisData);
        chart.generatePoints(chart.currentData.chartData);
    }

    if (typeof chart.currentData.xAxisScale.ticks === 'function') {
        chart.formatXAxisLabels(chart.currentData.xAxisScale.ticks().length);
    } else {
        chart.formatXAxisLabels(chart.currentData.xAxisScale.domain().length);
    }
}

function getSingleAxisZ(data) {
    var chart = this,
        size = chart.currentData.dataTable.size,
        min = data[0][size],
        max = data[0][size];
    //Find min and max of the data
    for (var i = 0; i < data.length; i++) {
        var num = data[i][size];
        if (num > max) {
            max = num;
        } else if (num < min) {
            min = num;
        }
    }

    return {
        'min': min,
        'max': max,
        'label': size
    };
}

function generatePoints(data, yLevel) {
    var chart = this,
        svg = chart.svg,
        width = chart.config.container.width,
        height = chart.config.container.height,
        dataTable = chart.currentData.dataTable,
        xAxisData = chart.currentData.xAxisData,
        zAxisData = chart.currentData.zAxisData,
        container = chart.config.container,
        pointColor = '#609cdb',
        coloredPoint = '#e88a17',
        x = jvCharts.getAxisScale('x', xAxisData, chart.config.container, chart._vars),
        currentAxisHeight,
        simulation,
        cell;

    var SPLIT_CLUSTER_HEIGHT = 300,
        TRANSLATE_SPLIT_CLUSTER = 150;

    //If there's a split, account for the multiple axes
    if (!isEmpty(yLevel)) {
        currentAxisHeight = yLevel * SPLIT_CLUSTER_HEIGHT + TRANSLATE_SPLIT_CLUSTER; //Each height is 100px
    } else {
        currentAxisHeight = height / 2;
    }

    if (!chart._vars.NODE_MIN_SIZE) {
        chart._vars.NODE_MIN_SIZE = 4.5;
    }
    if (!chart._vars.NODE_MAX_SIZE) {
        chart._vars.NODE_MAX_SIZE = 25;
    }

    //Add a path line through the height of the axis
    if (!isEmpty(yLevel)) {
        svg.append('line').attr('x1', 0).attr('x2', container.width).attr('y1', currentAxisHeight).attr('y2', currentAxisHeight).attr('stroke', 'white').attr('stroke-width', '20px').attr('transform', 'translate(0, ' + TRANSLATE_SPLIT_CLUSTER + ')');

        svg.append('text').datum(data).attr('x', 0).attr('y', currentAxisHeight).text(function (d) {
            return d[0][chart._vars.splitData.replace(/_/g, ' ')];
        }).attr('transform', 'translate(-85, 0)');
    }

    simulation = d3.forceSimulation(data).alphaDecay(0.05).force('x', d3.forceX(function (d) {
        return x(d[dataTable.x]);
    }).strength(1)).force('y', d3.forceY(currentAxisHeight)).force('collide', d3.forceCollide(function (d) {
        var norm = void 0,
            val = chart._vars.NODE_MIN_SIZE;
        //Set collision radius equal to the radius of the circle
        if (dataTable.hasOwnProperty('size')) {
            norm = (d[dataTable.size] - zAxisData.min) / (zAxisData.max - zAxisData.min);
            val = (chart._vars.NODE_MAX_SIZE - chart._vars.NODE_MIN_SIZE) * norm + chart._vars.NODE_MIN_SIZE;
        }
        return val;
    }).strength(1)).force('charge', d3.forceManyBody().strength(-6)).stop();

    for (var i = 0; i < 120; ++i) {
        simulation.tick();
    }cell = svg.append('g').attr('class', 'cells').selectAll('g').data(d3.voronoi().extent([[0, 0], [width, height]]).x(function (d) {
        return d.x;
    }).y(function (d) {
        return d.y;
    }).polygons(data)).enter().append('g').attr('class', 'singleaxis-container');

    cell.append('circle').attr('r', function (d) {
        var val = chart._vars.NODE_MIN_SIZE; //Default node size of 15
        if (dataTable.hasOwnProperty('size') && !isEmpty(d) && d.hasOwnProperty('data')) {
            var norm = (d.data[dataTable.size] - zAxisData.min) / (zAxisData.max - zAxisData.min);
            if (!isNaN(norm)) {
                val = (chart._vars.NODE_MAX_SIZE - chart._vars.NODE_MIN_SIZE) * norm + chart._vars.NODE_MIN_SIZE;
            } else {
                //If there is only 1 node on the chart
                val = chart._vars.NODE_MIN_SIZE;
            }
        } else if (isEmpty(d)) {
            val = 0; //Don't display undefined nodes
        }
        return val;
    }).attr('cx', function (d) {
        return isEmpty(d) ? 0 : d.data.x;
    }).attr('cy', function (d) {
        return isEmpty(d) ? 0 : d.data.y;
    }).attr('fill', function (d) {
        if (!isEmpty(d) && d.data[chart._vars.colorDataCategory] === chart._vars.colorDataInstance) {
            return coloredPoint;
        }
        return pointColor;
    }).attr('opacity', 0.8).attr('stroke', 'black').attr('stroke-width', 1).on('mouseover', function (d, i) {
        if (chart.showToolTip) {
            var tipData = chart.setTipData(d, i);
            chart.tip.generateSimpleTip(tipData, dataTable);
            d3.select(this).attr('fill', chart._vars.singleAxisFillHoverColor);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('mouseout', function () {
        if (chart.showToolTip) {
            chart.tip.hideTip();
        }
        d3.select(this).attr('fill', function (d) {
            if (!isEmpty(d) && d.data[chart._vars.colorDataCategory] === chart._vars.colorDataInstance) {
                return coloredPoint;
            }
            return pointColor;
        });
    });
}

function getSingleAxisData(data, dataTable) {
    var chart = this,
        label,
        dataType,
        min,
        max,
        values = [];

    if (dataTable) {
        if (dataTable.hasOwnProperty('x')) {
            label = dataTable.x;
        }
    }

    dataType = 'NUMBER';

    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = data[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var ele = _step5.value;

            values.push(ele[dataTable.x]);
        }
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }

    min = Math.min.apply(null, values);
    max = Math.max.apply(null, values);

    //Add a 10% buffer to both sides
    min = Math.floor(min - (max - min) * 0.10);
    max = Math.ceil(max + (max - min) * 0.10);

    //For axis min/max widget
    if (chart._vars.hasOwnProperty('xMin') && chart._vars.xMin !== 'none') {
        min = chart.options.xMin;
    }
    if (chart._vars.hasOwnProperty('xMax') && chart._vars.xMax !== 'none') {
        max = chart._vars.xMax;
    }

    return {
        'label': label,
        'values': values,
        'dataType': dataType,
        'min': min,
        'max': max
    };
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],25:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.sunburst = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateSunburst = generateSunburst;

/************************************************ Sunburst functions ******************************************************/

/**setSunburstChartData
 *  gets sunburst data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.color = chart.colors;
}

function getEventData() {
    return {};
}

function paint() {
    var chart = this;
    chart._vars.color = chart.data.color;

    chart.currentData = chart.data; //Might have to move into method bc of reference/value relationship

    var sunburstMargins = {
        top: 15,
        right: 15,
        bottom: 15,
        left: 15
    };

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, sunburstMargins);
    //chart.generateLegend(chart.currentData.legendData, 'generateSunburst');
    chart.generateSunburst(chart.currentData);
}

/**generateSunburst
 *
 * paints the sunburst on the chart
 * @params sunburstData
 */
function generateSunburst(sunburstData) {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container,
        allFilterList = [],
        relationMap = chart.data.dataTable,
        width = container.width,
        height = container.height,
        radius = Math.min(width, height) / 2 - 10;

    chart.children = chart.data.chartData;

    var newData = JSON.parse(JSON.stringify(chart.children)); //copy of pie data

    var formatNumber = d3.format(',d');

    var x = d3.scaleLinear().range([0, 2 * Math.PI]);

    var y = d3.scaleSqrt().range([0, radius]);

    var color = d3.scaleOrdinal().range(chart.data.color.map(function (c) {
        c = d3.rgb(c);c.opacity = 1;return c;
    }));

    //var color = d3.scaleOrdinal(d3.schemeCategory10);

    var partition = d3.partition();

    var arc = d3.arc().startAngle(function (d) {
        return Math.max(0, Math.min(2 * Math.PI, x(d.x0)));
    }).endAngle(function (d) {
        return Math.max(0, Math.min(2 * Math.PI, x(d.x1)));
    }).innerRadius(function (d) {
        return Math.max(0, y(d.y0));
    }).outerRadius(function (d) {
        return Math.max(0, y(d.y1));
    });

    //assigns the data to a hierarchy using parent-child relationships
    var root = d3.hierarchy(chart.children, function (d) {
        return d.children;
    });

    root.sum(function (d) {
        return d.value;
    });

    var vis = svg.append('g').attr('class', 'sunburst').attr('width', width).attr('height', height).attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

    vis.selectAll('path').data(partition(root).descendants()).enter().append('g').attr('class', 'node');

    var path = vis.selectAll('.node').append('path').attr('d', arc).style('fill', function (d) {
        if (d.data.name === 'root') {
            d.color = chart._vars.backgroundColor;
            return chart._vars.backgroundColor;
        }
        d.color = color(d.data.name);
        return color(d.data.name);
    }).on('mouseover', function (d, i, j) {
        if (chart.showToolTip) {
            // var tData = chart.data.tipData.get(d.data.name);
            // tData.name = d.data.name;
            // tData.color = d.color;
            var tipData = chart.setTipData(d, i);

            //Draw tip line
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on('click', click).on('mouseout', function (d) {
        chart.tip.hideTip();
    });

    if (chart._vars.displayValues) {
        var text = vis.selectAll('.node').append('text').attr('transform', function (d) {
            return 'rotate(' + computeTextRotation(d) + ')';
        }).attr('x', function (d) {
            return y(d.y0);
        }).attr('dx', '6') //margin
        .attr('dy', '.35em') //vertical-align
        .text(function (d) {
            return d.data.name === 'root' ? '' : d.data.name;
        });
    }

    function click(d) {
        //fade out all text elements
        if (chart._vars.displayValues) {
            text.transition().attr('opacity', 0);
        }

        vis.transition().duration(750).tween('scale', function () {
            var xd = d3.interpolate(x.domain(), [d.x0, d.x1]),
                yd = d3.interpolate(y.domain(), [d.y0, 1]),
                yr = d3.interpolate(y.range(), [d.y0 ? 20 : 0, radius]);

            return function (t) {
                x.domain(xd(t));y.domain(yd(t)).range(yr(t));
            };
        }).selectAll('path').attrTween('d', function (d) {
            return function () {
                return arc(d);
            };
        }).on('end', function (e, i) {
            if (chart._vars.displayValues) {
                //check if the animated element's data e lies within the visible angle span given in d
                if (e.x0 > d.x0 && e.x0 < d.x1) {
                    //get a selection of the associated text element
                    var arcText = d3.select(this.parentNode).select('text');
                    //fade in the text element and recalculate positions
                    arcText.transition().duration(750).attr('opacity', 1).attr('class', 'visible').attr('transform', function () {
                        return 'rotate(' + computeTextRotation(e) + ')';
                    }).attr('x', function (d) {
                        return y(d.y0);
                    }).text(function (d) {
                        return d.data.name === 'root' ? '' : d.data.name;
                    });
                }
            }
        });
    }

    function computeTextRotation(d) {
        return (x((d.x0 + d.x1) / 2) - Math.PI / 2) / Math.PI * 180;
    }
}

module.exports = jvCharts;

},{"../jvCharts.js":4}],26:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.treemap = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateTreeMap = generateTreeMap;
/************************************************ TreeMap functions ******************************************************/

/**setTreeMapData
 *  gets treemap data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    chart.data.legendData = setTreeMapLegendData(chart.data);
    //define color object for chartData
    chart.data.color = jvCharts.setChartColors(chart._vars.color, chart.data.legendData, chart.colors);
}

function getEventData() {
    return {};
}

/**setTreeMapLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setTreeMapLegendData(data) {
    var legendArray = [];
    for (var i = 0; i < data.chartData.children.length; i++) {
        if (legendArray.indexOf(data.chartData.children[i][data.dataTable.series]) == -1) {
            legendArray.push(data.chartData.children[i][data.dataTable.series]);
        }
    }
    return legendArray;
}

function paint() {
    var chart = this;
    chart._vars.color = chart.data.color;

    chart.currentData = chart.data; //Might have to move into method bc of reference/value relationship

    var treeMapMargins = {
        top: 45,
        right: 50,
        left: 50,
        bottom: 130
    };

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, treeMapMargins);
    chart.generateLegend(chart.currentData.legendData, 'generateTreeMap');
    chart.generateTreeMap(chart.currentData);
};

/** generateTreeMap
 *
 * paints the treemap on the chart
 * @params treeMapData
 */
function generateTreeMap(treeMapData) {

    var chart = this,
        svg = chart.svg,
        colors = treeMapData.color,
        container = chart.config.container,
        allFilterList = [],
        relationMap = chart.data.dataTable,
        treemap = null;

    chart.children = chart.data.chartData;

    var newData = JSON.parse(JSON.stringify(chart.children)); //copy of pie data

    if (!chart._vars.legendHeaders) {
        chart._vars.legendHeaders = legendData;
    }

    var dataHeaders = chart._vars.legendHeaders;

    var legendElementToggleArray = jvCharts.getLegendElementToggleArray(dataHeaders, chart.data.legendData);

    if (legendElementToggleArray) {
        for (var j = 0; j < newData.children.length; j++) {
            for (var i = 0; i < legendElementToggleArray.length; i++) {
                if (legendElementToggleArray[i].element === newData.children[j][relationMap.series] && legendElementToggleArray[i].toggle === false) {
                    newData.children[j].show = false;
                }
            }
        }
    }

    var treeMapDataFiltered = {};
    treeMapDataFiltered["Parent"] = "Top Level";
    treeMapDataFiltered.children = [];

    for (var j = 0; j < newData.children.length; j++) {
        if (newData.children[j].show !== false) {
            treeMapDataFiltered.children.push(newData.children[j]);
        }
    }

    //  assigns the data to a hierarchy using parent-child relationships
    var root = d3.hierarchy(treeMapDataFiltered, function (d) {
        return d.children;
    });

    var treemap = d3.treemap().size([container.width, container.height]).padding(2);

    var nodes = treemap(root.sum(function (d) {
        return d[relationMap.size];
    }).sort(function (a, b) {
        return b.height - a.height || b.value - a.value;
    })).descendants();

    //Remove existing bars from page
    svg.selectAll("g.treemap").remove();
    svg.append("g").attr("class", "treemap");

    var node = svg.select(".treemap").selectAll("g").data(root.leaves()).enter().append('g').attr('transform', function (d) {
        return 'translate(0,0)';
    });

    node.append('rect')
    // .call(position)
    .attr("x", function (d) {
        return d.x0 + "px";
    }).attr("y", function (d) {
        return d.y0 + "px";
    }).attr("width", function (d) {
        return d.x1 - d.x0 + "px";
    }).attr("height", function (d) {
        return d.y1 - d.y0 + "px";
    }).attr("fill", function (d, i) {
        return jvCharts.getColors(colors, i, d.data[relationMap.series]);
    }).attr("fill-opacity", .8).attr("stroke", chart._vars.white).attr("stroke-width", chart._vars.strokeWidth).on("mouseover", function (d, i) {
        //Get tip data
        var tipData = chart.setTipData(d.data, i);
        //Draw tip line
        chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
        chart.tip.d = d;
        chart.tip.i = i;

        // var rect = d3.select(this);
        // rect.attr("fill", chart._vars.light);
        // rect.transition().duration(200);
    }).on('mousemove', function (d, i) {
        if (chart.showToolTip) {
            if (chart.tip.d === d && chart.tip.i === i) {
                chart.tip.showTip(d3.event);
            } else {
                //Get tip data
                var tipData = chart.setTipData(d, i);
                //Draw tip line
                chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            }
        }
    }).on("mouseout", function (d) {
        chart.tip.hideTip();
        // var rect = d3.select(this);
        // rect.attr("fill", function (d, i) {
        //     return jvCharts.getColors(colors, i, d.data[relationMap.series]);
        // });
        // rect.transition().duration(200);
    });

    node.append('text')
    // .call(position)
    .attr("x", function (d) {
        return d.x0 + "px";
    }).attr("y", function (d) {
        return d.y0 + "px";
    }).attr("width", function (d) {
        return d.x1 - d.x0 + "px";
    }).attr("height", function (d) {
        return d.y1 - d.y0 + "px";
    }).attr("transform", "translate(3, 18)").text(function (d) {
        if (d.dy !== 0) {
            return d.children ? null : d.data[relationMap.label];
        }
    });

    /* Don't display text if text is wider than rect */
    var temp = svg.select(".treemap").selectAll("g").selectAll("text");
    temp.attr("style", function (d) {
        if (this.getBBox().width >= d.x1 - d.x0 - 5) {
            return "display:none";
        }
        if (this.getBBox().height >= d.y1 - d.y0 - 5) {
            return "display:none";
        }
    });
};
module.exports = jvCharts;

},{"../jvCharts.js":4}],27:[function(require,module,exports){
'use strict';

var jvCharts = require('../jvCharts.js');

jvCharts.prototype.cloud = {
    paint: paint,
    setData: setData,
    getEventData: getEventData
};

jvCharts.prototype.generateCloud = generateCloud;

/************************************************ Cloud functions ******************************************************/

/**setCloudData
 *  gets cloud data and adds it to the chart object
 *
 * @params data, dataTable, colors
 */
function setData() {
    var chart = this;
    //define color object for chartData
    chart.data.color = chart.colors;
}

function getEventData() {
    return {};
}

/**setCloudLegendData
 *  gets legend info from chart Data
 *
 * @params data, type
 * @returns [] of legend text
 */
function setCloudLegendData(data) {
    var legendArray = [];
    for (var i = 0; i < data.chartData.children.length; i++) {
        if (legendArray.indexOf(data.chartData.children[i][data.dataTable.series]) == -1) {
            legendArray.push(data.chartData.children[i][data.dataTable.series]);
        }
    }
    return legendArray;
}

function paint() {
    var chart = this;
    if (!chart.smallerFontRepaint) {
        chart._vars.fontSizeMax = 80;
        chart.currentData = chart.data;
    } else {
        chart.currentData = JSON.parse(JSON.stringify(chart.data));
    }

    chart._vars.color = chart.data.color;

    var cloudMargins = {
        top: 15,
        right: 15,
        left: 15,
        bottom: 15
    };

    //Generate SVG-legend data is used to determine the size of the bottom margin (set to null for no legend)
    chart.generateSVG(null, cloudMargins);
    // chart.generateLegend(chart.currentData.legendData, 'generateCloud');
    chart.generateCloud(chart.currentData);
};

/** generateCloud
 *
 * paints the cloud  on the chart
 * @params cloud Data
 */
function generateCloud(cloudData) {
    var chart = this,
        svg = chart.svg,
        container = chart.config.container,
        allFilterList = [],
        relationMap = chart.data.dataTable,
        width = container.width,
        height = container.height,
        margin = chart.config.margin,
        min,
        max;

    var categories = d3.keys(d3.nest().key(function (d) {
        if (!min && !max) {
            min = d[relationMap.value];
            max = d[relationMap.value];
        } else {
            if (d[relationMap.value] > max) {
                max = d[relationMap.value];
            }
            if (d[relationMap.value] < min) {
                min = d[relationMap.value];
            }
        }

        return d[relationMap.value];
    }).map(cloudData.chartData));

    if (!chart._vars.fontSizeMax) {
        chart._vars.fontSizeMax = 80;
    }

    var color = d3.scaleOrdinal().range(chart.data.color.map(function (c) {
        c = d3.rgb(c);c.opacity = 0.8;return c;
    }));

    var fontSize = d3.scalePow().exponent(5).domain([0, 1]).range([10, chart._vars.fontSizeMax]);
    chart.smallerFontRepaint = false;
    var layout = d3.layout.cloud().timeInterval(10).size([width, height]).words(cloudData.chartData).rotate(function (d) {
        return 0;
    }).font('Roboto').fontSize(function (d, i) {
        return fontSize(max - min !== 0 ? (d[relationMap.value] - min) / (max - min) : 0);
    }).repaintWithSmallerFont(function () {
        if (chart._vars.fontSizeMax > 10) {
            chart._vars.fontSizeMax -= 5;
            chart.smallerFontRepaint = true;
            paint(chart);
        }
    }).text(function (d) {
        return d[relationMap.label];
    }).spiral("archimedean").on("end", draw).start();

    var wordcloud = svg.append("g").attr('class', 'wordcloud').attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    function draw(words) {
        if (chart.smallerFontRepaint) {
            return;
        }
        wordcloud.selectAll("text").data(cloudData.chartData).enter().append("text").attr('class', 'word').style("font-size", function (d) {
            return d.size + "px";
        }).style("font-family", function (d) {
            return d.font;
        }).style("fill", function (d) {
            return color(d[relationMap.value]);
        }).attr("text-anchor", "middle").text(function (d) {
            return d.text;
        }).on("mouseover", function (d, i) {
            //Get tip data
            var tipData = chart.setTipData(d, i);
            tipData.color = color(d[relationMap.value]);

            //Draw tip
            chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
            chart.tip.d = d;
            chart.tip.i = i;
        }).on('mousemove', function (d, i) {
            if (chart.showToolTip) {
                if (chart.tip.d === d && chart.tip.i === i) {
                    chart.tip.showTip(d3.event);
                } else {
                    //Get tip data
                    var tipData = chart.setTipData(d, i);
                    //Draw tip line
                    chart.tip.generateSimpleTip(tipData, chart.data.dataTable);
                }
            }
        }).on("mouseout", function (d) {
            chart.tip.hideTip();
        }).transition().duration("1000").attr("transform", function (d) {
            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
        });
    }
};

module.exports = jvCharts;

},{"../jvCharts.js":4}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
